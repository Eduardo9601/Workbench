/*1º VERSÃO*/

WITH
/* BLOCO PARA ENTRADA DE PARÂMETROS (DINÂMICO POR PERÍODO) */
PARAMS AS (

/*VERSÃO PARA USAR NO PL/SQL*/
  /*SELECT TO_DATE('&DATA_INICIO', 'DD/MM/YYYY') AS D_INI,
       TO_DATE('&DATA_FIM', 'DD/MM/YYYY') AS D_FIM
  FROM DUAL*/

  SELECT --:REFERENCIA AS REFERENCIA
         TO_DATE('&REFERENCIA', 'DD/MM/YYYY') AS REFERENCIA
  FROM DUAL

/*VERSÃO PARA USAR NO SAPINHO E DENTRO DA FOLHA*/
/*SELECT :DATA_INICIO AS D_INI, :DATA_FIM AS D_FIM FROM DUAL*/

),

CONTRATOS AS (
SELECT DISTINCT CT.STATUS,
                CT.COD_CONTRATO,
                CT.DES_PESSOA,
                CT.DATA_NASCIMENTO,
                CT.DATA_ADMISSAO,
                CT.DATA_DEMISSAO,
                FN.COD_FUNCAO,
                FN.DES_FUNCAO,
                FN.DATA_INI_CLH,
                FN.DATA_FIM_CLH,
                HR.HR_BASE_MES,
                HR.DATA_INI_HR,
                HR.DATA_FIM_HR,
                CT.IND_DEFICIENCIA,
                CT.SEXO,
                ORG.COD_EMP,
                ORG.EDICAO_EMP,
                ORG.DES_EMP,
                ORG.COD_ORGANOGRAMA,
                ORG.COD_UNIDADE,
                ORG.DES_UNIDADE,
                ORG.DATA_INI_ORG,
                ORG.DATA_FIM_ORG,
                CASE
                  WHEN ORG.COD_TIPO = 2 THEN
                   ORG.EDICAO_ORG_3
                  WHEN ORG.COD_TIPO = 3 THEN
                   ORG.EDICAO_ORG_3
                  ELSE
                   ORG.COD_UNIDADE
                END AS COD_FILIAL,
                CASE
                  WHEN ORG.COD_TIPO = 2 THEN
                   ORG.NOME3
                  WHEN ORG.COD_TIPO = 3 THEN
                   ORG.NOME3
                  ELSE
                   ORG.DES_UNIDADE
                END AS DES_FILIAL,
                CASE
                  WHEN ORG.COD_TIPO = 2 THEN
                   ORG.EDICAO_ORG_4
                  WHEN ORG.COD_TIPO = 3 THEN
                   ORG.EDICAO_ORG_4
                  ELSE
                   ORG.COD_UNIDADE
                END AS COD_DIVISAO,
                CASE
                  WHEN ORG.COD_TIPO = 2 THEN
                   ORG.NOME4
                  WHEN ORG.COD_TIPO = 3 THEN
                   ORG.NOME4
                  ELSE
                   ORG.DES_UNIDADE
                END AS DES_DIVISAO,
                ORG.COD_REDE,
                ORG.DES_REDE,
                ORG.COD_TIPO,
                ORG.DES_TIPO
  FROM V_DADOS_CONTRATO_AVT CT
  JOIN VH_EST_ORG_CONTRATO_AVT ORG ON CT.COD_CONTRATO = ORG.COD_CONTRATO
  JOIN VH_HIST_HORAS_COLAB_AVT HR ON CT.COD_CONTRATO = HR.COD_CONTRATO
  JOIN VH_CARGO_CONTRATO_AVT FN ON CT.COD_CONTRATO = FN.COD_CONTRATO
 CROSS JOIN PARAMS P
 WHERE P.REFERENCIA BETWEEN CT.DATA_ADMISSAO AND NVL(CT.DATA_DEMISSAO, DATE '2999-12-31')
 /*CT.DATA_ADMISSAO <= M.DTA_FIM
 AND NVL(CT.DATA_DEMISSAO, DATE '2999-12-31') >= M.DTA_INI*/
/*VERSÕES ALTERNATIVAS DE FILTRAR POR DATA
(('31/03/2025' BETWEEN CT.DATA_ADMISSAO AND CT.DATA_DEMISSAO) OR
        (CT.DATA_ADMISSAO <= '31/03/2025' AND CT.DATA_DEMISSAO IS NULL))
AND (CT.DATA_ADMISSAO <= TO_DATE('31/07/2025','DD/MM/YYYY'))
   AND (CT.DATA_DEMISSAO IS NULL OR CT.DATA_DEMISSAO >= TO_DATE('01/07/2025','DD/MM/YYYY'))
AND (CT.DATA_DEMISSAO IS NULL OR
       CT.DATA_DEMISSAO >= '01/07/2025')*/

 AND P.REFERENCIA BETWEEN ORG.DATA_INI_ORG AND ORG.DATA_FIM_ORG
 AND P.REFERENCIA BETWEEN FN.DATA_INI_CLH AND FN.DATA_FIM_CLH
 AND P.REFERENCIA BETWEEN HR.DATA_INI_HR AND HR.DATA_FIM_HR
 AND ORG.COD_EMP = 8
 AND ORG.COD_TIPO = 1
 AND ORG.EDICAO_ORG_4 IS NOT NULL
--AND ORG.COD_UNIDADE NOT IN (014, 050, 615, 7586, 7608)
--AND ORG.COD_UNIDADE = 004
 ORDER BY CT.COD_CONTRATO
),

/*==== MAPEIA TODOS OS COLABORADORES MAS TAMBÉM COM INFO DE AFASTAMENTO ====*/
STATUS_AFASTADOS AS (
SELECT DISTINCT ORG.COD_EMP,
                CT.COD_CONTRATO,
                ORG.COD_ORGANOGRAMA,
                ORG.COD_UNIDADE,
                NVL(AF.COD_CAUSA_AFAST, 0) AS STATUS_AFAST,
                DES.NOME_CAUSA_AFAST AS DES_AFAST,
                AF.DATA_INICIO AS DATA_INI_AFAST,
                AF.DATA_FIM AS DATA_FIM_AFAST
  FROM RHFP0306                AF,
       RHFP0300                CT,
       VH_EST_ORG_CONTRATO_AVT ORG,
       VH_CARGO_CONTRATO_AVT   FN,
       RHFP0100                DES,
       PARAMS                  P
 WHERE CT.COD_CONTRATO = AF.COD_CONTRATO(+)
   AND CT.COD_CONTRATO = ORG.COD_CONTRATO(+)
   AND CT.COD_CONTRATO = FN.COD_CONTRATO(+)
   AND AF.COD_CAUSA_AFAST = DES.COD_CAUSA_AFAST(+)
   AND P.REFERENCIA BETWEEN CT.DATA_INICIO AND NVL(CT.DATA_FIM, DATE '2999-12-31')
   /*AND CT.DATA_INICIO <= M.DTA_FIM
   AND NVL(CT.DATA_FIM, DATE '2999-12-31') >= M.DTA_INI*/
      /* AND (CT.DATA_INICIO <= '31/03/2025')
         AND (CT.DATA_INICIO IS NULL OR CT.DATA_FIM >= '01/01/2025')*/
   AND P.REFERENCIA BETWEEN AF.DATA_INICIO(+) AND AF.DATA_FIM(+)
   AND P.REFERENCIA BETWEEN ORG.DATA_INI_ORG(+) AND ORG.DATA_FIM_ORG(+)
   AND P.REFERENCIA BETWEEN AF.DATA_INICIO AND NVL(AF.DATA_FIM, DATE '2999-12-31')
   AND ORG.COD_EMP = 8
   AND ORG.COD_TIPO = 1
--AND ORG.COD_UNIDADE NOT IN (014, 050, 615, 7586, 7608)

),

/* 1) Unidades SEM gerente na data de referência */
UNIDADES_SEM_GERENTE AS (
  SELECT
    A.COD_UNIDADE,
    MAX(A.DES_UNIDADE) AS DES_UNIDADE
  FROM CONTRATOS A
  GROUP BY A.COD_UNIDADE
  HAVING SUM(CASE WHEN UPPER(A.DES_FUNCAO) LIKE 'GERENTE%' THEN 1 ELSE 0 END) = 0
),


/* 2) Última data de saída de um gerente por unidade antes da referência */
ULTIMA_SAIDA_GERENTE AS (
  SELECT
    O.COD_UNIDADE,
    /* pega a última DATA_FIM_CLH de um GERENTE cujo vínculo com a unidade existia quando ele saiu */
    MAX(F.DATA_FIM_CLH) AS DT_ULT_SAIDA
  FROM VH_CARGO_CONTRATO_AVT F
  JOIN VH_EST_ORG_CONTRATO_AVT O
    ON O.COD_CONTRATO = F.COD_CONTRATO
   /* garantir que, no momento da saída, o contrato estava associado a essa unidade */
   AND F.DATA_FIM_CLH BETWEEN O.DATA_INI_ORG AND O.DATA_FIM_ORG
  CROSS JOIN PARAMS P
  WHERE UPPER(F.DES_FUNCAO) LIKE 'GERENTE%'
    AND F.DATA_FIM_CLH IS NOT NULL
    AND F.DATA_FIM_CLH < P.REFERENCIA          -- saída anterior à referência
    AND O.COD_EMP = 8
    AND O.COD_TIPO = 1
  GROUP BY O.COD_UNIDADE
)

SELECT
  U.COD_UNIDADE,
  U.DES_UNIDADE,
  S.DT_ULT_SAIDA,
  /* tempo sem gerente em dias */
  CASE
    WHEN S.DT_ULT_SAIDA IS NOT NULL THEN (P.REFERENCIA - S.DT_ULT_SAIDA)
    ELSE NULL
  END AS DIAS_SEM_GERENTE,
  /* tempo sem gerente em meses (fracionado) */
  CASE
    WHEN S.DT_ULT_SAIDA IS NOT NULL THEN MONTHS_BETWEEN(P.REFERENCIA, S.DT_ULT_SAIDA)
    ELSE NULL
  END AS MESES_SEM_GERENTE
FROM UNIDADES_SEM_GERENTE U
LEFT JOIN ULTIMA_SAIDA_GERENTE S
  ON S.COD_UNIDADE = U.COD_UNIDADE
CROSS JOIN PARAMS P
ORDER BY U.COD_UNIDADE;



select * from mdl_usuario
where cod_contrato = 397702



WITH
PARAMS AS (
  SELECT TO_DATE('&REFERENCIA','DD/MM/YYYY') AS REFERENCIA FROM DUAL
),

/* ===== SOMENTE LOJAS (COD_TIPO=1) ===== */
ORG_LOJA AS (
  SELECT
    O.COD_CONTRATO,
    O.COD_UNIDADE,
    O.DES_UNIDADE,
    O.DATA_INI_ORG,
    O.DATA_FIM_ORG
  FROM VH_EST_ORG_CONTRATO_AVT O
  WHERE O.COD_EMP = 8
    AND O.COD_TIPO = 1
),

/* Fotografia na referência (para decidir quem está sem gerente na data) */
CONTRATOS AS (
  SELECT DISTINCT
         CT.COD_CONTRATO,
         FN.DES_FUNCAO,
         OL.COD_UNIDADE,
         OL.DES_UNIDADE
  FROM V_DADOS_CONTRATO_AVT CT
  JOIN ORG_LOJA OL                 ON OL.COD_CONTRATO = CT.COD_CONTRATO
  JOIN VH_HIST_HORAS_COLAB_AVT HR  ON HR.COD_CONTRATO = CT.COD_CONTRATO
  JOIN VH_CARGO_CONTRATO_AVT  FN   ON FN.COD_CONTRATO = CT.COD_CONTRATO
  CROSS JOIN PARAMS P
  WHERE P.REFERENCIA BETWEEN CT.DATA_ADMISSAO AND NVL(CT.DATA_DEMISSAO, DATE '2999-12-31')
    AND P.REFERENCIA BETWEEN OL.DATA_INI_ORG AND OL.DATA_FIM_ORG
    AND P.REFERENCIA BETWEEN FN.DATA_INI_CLH AND FN.DATA_FIM_CLH
    AND P.REFERENCIA BETWEEN HR.DATA_INI_HR  AND HR.DATA_FIM_HR
),

AFAST_VIGENTES_REF AS (
  SELECT AF.COD_CONTRATO
  FROM RHFP0306 AF
  CROSS JOIN PARAMS P
  WHERE P.REFERENCIA BETWEEN AF.DATA_INICIO AND NVL(AF.DATA_FIM, DATE '2999-12-31')
  GROUP BY AF.COD_CONTRATO
),

GERENTES_REF AS (
  SELECT
    C.COD_UNIDADE,
    C.COD_CONTRATO,
    CASE WHEN UPPER(C.DES_FUNCAO) LIKE 'GERENTE%' THEN 1 ELSE 0 END AS EH_GERENTE,
    CASE WHEN A.COD_CONTRATO IS NOT NULL THEN 1 ELSE 0 END AS ESTA_AFASTADO
  FROM CONTRATOS C
  LEFT JOIN AFAST_VIGENTES_REF A ON A.COD_CONTRATO = C.COD_CONTRATO
),

/* Lojas sem gerente efetivo na referência */
UNIDS_SEM_GERENTE AS (
  SELECT COD_UNIDADE
  FROM GERENTES_REF
  GROUP BY COD_UNIDADE
  HAVING SUM(CASE WHEN EH_GERENTE = 1 AND ESTA_AFASTADO = 0 THEN 1 ELSE 0 END) = 0
),

/* ===== INTERVALOS EFETIVOS DE GERENTE NA LOJA (histórico completo) ===== */
GERENTE_RAW AS (
  SELECT
    OL.COD_UNIDADE,
    CT.COD_CONTRATO,
    GREATEST(F.DATA_INI_CLH, OL.DATA_INI_ORG, CT.DATA_ADMISSAO) AS DT_INI,
    LEAST(NVL(F.DATA_FIM_CLH, DATE '2999-12-31'),
          NVL(OL.DATA_FIM_ORG, DATE '2999-12-31'),
          NVL(CT.DATA_DEMISSAO, DATE '2999-12-31'))             AS DT_FIM
  FROM VH_CARGO_CONTRATO_AVT F
  JOIN V_DADOS_CONTRATO_AVT  CT ON CT.COD_CONTRATO = F.COD_CONTRATO
  JOIN ORG_LOJA OL               ON OL.COD_CONTRATO = F.COD_CONTRATO
  WHERE UPPER(F.DES_FUNCAO) LIKE 'GERENTE%'
),
GERENTE_OK AS (
  SELECT * FROM GERENTE_RAW WHERE DT_INI <= DT_FIM
),

/* Funde intervalos contíguos (LOJA, CONTRATO) – sem analítica aninhada */
G_PRE AS (
  SELECT
    COD_UNIDADE, COD_CONTRATO, DT_INI, DT_FIM,
    LAG(DT_FIM) OVER (PARTITION BY COD_UNIDADE, COD_CONTRATO ORDER BY DT_INI) AS PREV_FIM
  FROM GERENTE_OK
),
G_FLAG AS (
  SELECT
    COD_UNIDADE, COD_CONTRATO, DT_INI, DT_FIM,
    CASE WHEN DT_INI > NVL(PREV_FIM, DT_INI) + 1 THEN 1 ELSE 0 END AS FLAG_QUEBRA
  FROM G_PRE
),
GERENTE_ILHAS AS (
  SELECT
    COD_UNIDADE, COD_CONTRATO, DT_INI, DT_FIM,
    SUM(FLAG_QUEBRA) OVER (PARTITION BY COD_UNIDADE, COD_CONTRATO ORDER BY DT_INI ROWS UNBOUNDED PRECEDING) AS GID
  FROM G_FLAG
),
GERENTE_ILHAS_F AS (
  SELECT COD_UNIDADE, COD_CONTRATO, MIN(DT_INI) DT_INI, MAX(DT_FIM) DT_FIM
  FROM GERENTE_ILHAS
  GROUP BY COD_UNIDADE, COD_CONTRATO, GID
),

/* ===== AFASTAMENTOS HISTÓRICOS (apenas interseção com os períodos de gerente na loja) ===== */
AFAST_RAW AS (
  SELECT
    GI.COD_UNIDADE,
    GI.COD_CONTRATO,
    GREATEST(AF.DATA_INICIO, GI.DT_INI) AS DT_INI,
    LEAST(NVL(AF.DATA_FIM, DATE '2999-12-31'), GI.DT_FIM) AS DT_FIM
  FROM RHFP0306 AF
  JOIN GERENTE_ILHAS_F GI
    ON AF.COD_CONTRATO = GI.COD_CONTRATO
   AND AF.DATA_INICIO <= GI.DT_FIM
   AND NVL(AF.DATA_FIM, DATE '2999-12-31') >= GI.DT_INI
),
AFAST_OK AS (
  SELECT * FROM AFAST_RAW WHERE DT_INI <= DT_FIM
),

/* ===== EVENTOS NA LINHA DO TEMPO =====
   +1 em inícios de gerente; -1 em (fim+1)
   -1 em inícios de afastamento; +1 em (fim+1)  */
EVENTOS AS (
  SELECT COD_UNIDADE, DT_INI AS DT,  1 AS DELTA FROM GERENTE_ILHAS_F
  UNION ALL
  SELECT COD_UNIDADE, DT_FIM + 1,   -1 AS DELTA FROM GERENTE_ILHAS_F
  UNION ALL
  SELECT COD_UNIDADE, DT_INI,       -1 AS DELTA FROM AFAST_OK
  UNION ALL
  SELECT COD_UNIDADE, DT_FIM + 1,    1 AS DELTA FROM AFAST_OK
),

EV_ORD AS (
  SELECT
    COD_UNIDADE,
    DT,
    DELTA,
    SUM(DELTA) OVER (PARTITION BY COD_UNIDADE ORDER BY DT ROWS UNBOUNDED PRECEDING) AS ATIVOS
  FROM EVENTOS
),

/* Segmentos contínuos [DT, NEXT_DT-1] com quantidade de gerentes ativos */
SEG AS (
  SELECT
    E.COD_UNIDADE,
    E.DT                         AS SEG_INI,
    LEAD(E.DT) OVER (PARTITION BY E.COD_UNIDADE ORDER BY E.DT) - 1 AS SEG_FIM,
    E.ATIVOS
  FROM EV_ORD E
),
SEG_VALIDOS AS (
  SELECT * FROM SEG WHERE SEG_FIM IS NOT NULL AND SEG_INI <= SEG_FIM
),

/* Último segmento COM gerente antes da referência: define a DT_BASE */
ULTIMO_COM_GERENTE AS (
  SELECT
    S.COD_UNIDADE,
    MAX(S.SEG_FIM) AS DT_BASE
  FROM SEG_VALIDOS S
  CROSS JOIN PARAMS P
  WHERE S.ATIVOS > 0
    AND S.SEG_FIM < P.REFERENCIA
  GROUP BY S.COD_UNIDADE
)

/* ===== RESULTADO: lojas sem gerente na referência, com tempo desde a última cobertura ===== */
SELECT
  U.COD_UNIDADE,
  MAX(C.DES_UNIDADE) AS DES_UNIDADE,
  B.DT_BASE,
  /* dias/meses/anos desde a última vez que AINDA tinha gerente */
  CASE WHEN B.DT_BASE IS NOT NULL THEN (P.REFERENCIA - B.DT_BASE) END AS DIAS_SEM_GERENTE,
  CASE WHEN B.DT_BASE IS NOT NULL THEN ROUND(MONTHS_BETWEEN(P.REFERENCIA, B.DT_BASE)) END AS MESES_ARRED,
  CASE WHEN B.DT_BASE IS NOT NULL THEN ROUND(ROUND(MONTHS_BETWEEN(P.REFERENCIA, B.DT_BASE))/12) END AS ANOS_ARRED
FROM UNIDS_SEM_GERENTE U
LEFT JOIN ULTIMO_COM_GERENTE B ON B.COD_UNIDADE = U.COD_UNIDADE
JOIN CONTRATOS C ON C.COD_UNIDADE = U.COD_UNIDADE
CROSS JOIN PARAMS P
GROUP BY U.COD_UNIDADE, B.DT_BASE, P.REFERENCIA
ORDER BY U.COD_UNIDADE;





/*2º VERSÃO*/


WITH
PARAMS AS (
  SELECT TO_DATE('&REFERENCIA','DD/MM/YYYY') AS REFERENCIA FROM DUAL
),

/* === SOMENTE LOJAS (COD_TIPO=1) === */
ORG_LOJA AS (
  SELECT
    O.COD_CONTRATO,
    O.COD_UNIDADE,
    O.DES_UNIDADE,
    O.DATA_INI_ORG,
    O.DATA_FIM_ORG
  FROM VH_EST_ORG_CONTRATO_AVT O
  WHERE O.COD_EMP = 8
    AND O.COD_TIPO = 1
),

/* Fotografia na referência (lotação, função, horas, contrato) */
CONTRATOS AS (
  SELECT DISTINCT
         CT.COD_CONTRATO,
         FN.DES_FUNCAO,
         OL.COD_UNIDADE,
         OL.DES_UNIDADE
  FROM V_DADOS_CONTRATO_AVT CT
  JOIN ORG_LOJA OL                 ON OL.COD_CONTRATO = CT.COD_CONTRATO
  JOIN VH_HIST_HORAS_COLAB_AVT HR  ON HR.COD_CONTRATO = CT.COD_CONTRATO
  JOIN VH_CARGO_CONTRATO_AVT  FN   ON FN.COD_CONTRATO = CT.COD_CONTRATO
  CROSS JOIN PARAMS P
  WHERE P.REFERENCIA BETWEEN CT.DATA_ADMISSAO AND NVL(CT.DATA_DEMISSAO, DATE '2999-12-31')
    AND P.REFERENCIA BETWEEN OL.DATA_INI_ORG AND OL.DATA_FIM_ORG
    AND P.REFERENCIA BETWEEN FN.DATA_INI_CLH AND FN.DATA_FIM_CLH
    AND P.REFERENCIA BETWEEN HR.DATA_INI_HR  AND HR.DATA_FIM_HR
),

/* Afastamentos vigentes na referência */
AFAST_VIGENTES AS (
  SELECT AF.COD_CONTRATO, AF.DATA_INICIO AS DATA_INI_AFAST
  FROM RHFP0306 AF
  CROSS JOIN PARAMS P
  WHERE P.REFERENCIA BETWEEN AF.DATA_INICIO AND NVL(AF.DATA_FIM, DATE '2999-12-31')
),

/* Quem é gerente na referência e se está afastado */
GERENTES_REF AS (
  SELECT
    C.COD_UNIDADE,
    C.COD_CONTRATO,
    CASE WHEN UPPER(C.DES_FUNCAO) LIKE 'GERENTE%' THEN 1 ELSE 0 END AS EH_GERENTE,
    CASE WHEN A.COD_CONTRATO IS NOT NULL THEN 1 ELSE 0 END AS ESTA_AFASTADO
  FROM CONTRATOS C
  LEFT JOIN AFAST_VIGENTES A ON A.COD_CONTRATO = C.COD_CONTRATO
),

/* Lojas sem gerente efetivo na referência (ninguém com GERENTE% e não-afastado) */
UNIDS_SEM_GERENTE AS (
  SELECT COD_UNIDADE
  FROM GERENTES_REF
  GROUP BY COD_UNIDADE
  HAVING SUM(CASE WHEN EH_GERENTE = 1 AND ESTA_AFASTADO = 0 THEN 1 ELSE 0 END) = 0
),

/* ===== Intervalos efetivos de GERENTE por LOJA (interseção) ===== */
INTERVALOS AS (
  SELECT
    OL.COD_UNIDADE,
    CT.COD_CONTRATO,
    GREATEST(F.DATA_INI_CLH, OL.DATA_INI_ORG, CT.DATA_ADMISSAO) AS DT_INI,
    LEAST( NVL(F.DATA_FIM_CLH, DATE '2999-12-31'),
           NVL(OL.DATA_FIM_ORG, DATE '2999-12-31'),
           NVL(CT.DATA_DEMISSAO, DATE '2999-12-31') )           AS DT_FIM
  FROM VH_CARGO_CONTRATO_AVT F
  JOIN V_DADOS_CONTRATO_AVT  CT ON CT.COD_CONTRATO = F.COD_CONTRATO
  JOIN ORG_LOJA OL               ON OL.COD_CONTRATO = F.COD_CONTRATO
  WHERE UPPER(F.DES_FUNCAO) LIKE 'GERENTE%'
),
INTERVALOS_VALIDOS AS (
  SELECT * FROM INTERVALOS WHERE DT_INI <= DT_FIM
),

/* >>> CORREÇÃO: separar o LAG do running SUM para evitar analítica aninhada <<< */
ILHAS_PRE AS (
  SELECT
    COD_UNIDADE,
    COD_CONTRATO,
    DT_INI,
    DT_FIM,
    LAG(DT_FIM) OVER (PARTITION BY COD_UNIDADE, COD_CONTRATO ORDER BY DT_INI) AS PREV_FIM
  FROM INTERVALOS_VALIDOS
),
ILHAS_FLAG AS (
  SELECT
    COD_UNIDADE,
    COD_CONTRATO,
    DT_INI,
    DT_FIM,
    CASE
      WHEN DT_INI > NVL(PREV_FIM, DT_INI) + 1 THEN 1 ELSE 0
    END AS FLAG_QUEBRA
  FROM ILHAS_PRE
),
ILHAS AS (
  SELECT
    COD_UNIDADE,
    COD_CONTRATO,
    DT_INI,
    DT_FIM,
    /* running sum sem aninhar analíticas */
    SUM(FLAG_QUEBRA) OVER (
      PARTITION BY COD_UNIDADE, COD_CONTRATO
      ORDER BY DT_INI
      ROWS UNBOUNDED PRECEDING
    ) AS GID
  FROM ILHAS_FLAG
),
ILHAS_FUNDIDAS AS (
  SELECT
    COD_UNIDADE,
    COD_CONTRATO,
    MIN(DT_INI) AS DT_INI,
    MAX(DT_FIM) AS DT_FIM
  FROM ILHAS
  GROUP BY COD_UNIDADE, COD_CONTRATO, GID
),

/* (a) Último término de gerente na loja antes da referência */
SAIDAS AS (
  SELECT COD_UNIDADE, MAX(DT_FIM) AS DT_ULT_SAIDA
  FROM ILHAS_FUNDIDAS, PARAMS P
  WHERE DT_FIM < P.REFERENCIA
  GROUP BY COD_UNIDADE
),

/* (b) Início do afastamento do gerente (ativo na loja na referência) */
AFAST AS (
  SELECT
    OL.COD_UNIDADE,
    MAX(AF.DATA_INICIO) AS DT_INI_AFAST
  FROM PARAMS P
  JOIN VH_CARGO_CONTRATO_AVT F  ON 1=1
  JOIN ORG_LOJA OL              ON OL.COD_CONTRATO = F.COD_CONTRATO
   AND P.REFERENCIA BETWEEN OL.DATA_INI_ORG AND OL.DATA_FIM_ORG
  JOIN RHFP0306 AF              ON AF.COD_CONTRATO = F.COD_CONTRATO
  JOIN V_DADOS_CONTRATO_AVT CT  ON CT.COD_CONTRATO = F.COD_CONTRATO
  WHERE UPPER(F.DES_FUNCAO) LIKE 'GERENTE%'
    AND P.REFERENCIA BETWEEN F.DATA_INI_CLH AND NVL(F.DATA_FIM_CLH, DATE '2999-12-31') -- gerente ativo
    AND P.REFERENCIA BETWEEN CT.DATA_ADMISSAO AND NVL(CT.DATA_DEMISSAO, DATE '2999-12-31')
    AND P.REFERENCIA BETWEEN AF.DATA_INICIO AND NVL(AF.DATA_FIM, DATE '2999-12-31')    -- afastado
  GROUP BY OL.COD_UNIDADE
),

/* Data-base do tempo sem gerente = evento mais recente (saída x início afastamento) */
BASE AS (
  SELECT
    U.COD_UNIDADE,
    MAX(C.DES_UNIDADE) AS DES_UNIDADE,
    S.DT_ULT_SAIDA,
    A.DT_INI_AFAST,
    CASE
      WHEN S.DT_ULT_SAIDA IS NULL AND A.DT_INI_AFAST IS NULL THEN NULL
      WHEN S.DT_ULT_SAIDA IS NULL THEN A.DT_INI_AFAST
      WHEN A.DT_INI_AFAST IS NULL THEN S.DT_ULT_SAIDA
      ELSE GREATEST(S.DT_ULT_SAIDA, A.DT_INI_AFAST)
    END AS DT_BASE
  FROM UNIDS_SEM_GERENTE U
  LEFT JOIN SAIDAS S ON S.COD_UNIDADE = U.COD_UNIDADE
  LEFT JOIN AFAST  A ON A.COD_UNIDADE = U.COD_UNIDADE
  JOIN CONTRATOS  C ON C.COD_UNIDADE = U.COD_UNIDADE
  GROUP BY U.COD_UNIDADE, S.DT_ULT_SAIDA, A.DT_INI_AFAST
)

SELECT
  B.COD_UNIDADE,
  B.DES_UNIDADE,
  B.DT_ULT_SAIDA,
  --B.DT_INI_AFAST,
  --B.DT_BASE,
  /* dias */
  CASE WHEN B.DT_BASE IS NOT NULL THEN (P.REFERENCIA - B.DT_BASE) END AS DIAS_SEM_GERENTE,
  /* meses arredondado / anos arredondado */
  CASE WHEN B.DT_BASE IS NOT NULL THEN ROUND(MONTHS_BETWEEN(P.REFERENCIA, B.DT_BASE)) END AS MESES_ARRED,
  CASE WHEN B.DT_BASE IS NOT NULL THEN ROUND(ROUND(MONTHS_BETWEEN(P.REFERENCIA, B.DT_BASE))/12) END AS ANOS_ARRED
FROM BASE B
CROSS JOIN PARAMS P
ORDER BY B.COD_UNIDADE;
