CREATE OR REPLACE PACKAGE PK_CALC IS
PROCEDURE GRAVA_MESTRE(
  pCOD_ORGANOGRAMA	   RHFP1003.COD_ORGANOGRAMA%TYPE default null,
  pCOD_EVENTO	        RHFP1003.COD_EVENTO%TYPE default null,
  pCOD_MESTRE_EVENTO 	IN OUT RHFP1003.COD_MESTRE_EVENTO%TYPE,
  pNOME_MESTRE_EVENTO	RHFP1003.NOME_MESTRE_EVENTO%TYPE default null,
  pDATA_REFERENCIA	   RHFP1003.DATA_REFERENCIA%TYPE default null,
  pDATA_PAGAMENTO	    RHFP1003.DATA_PAGAMENTO%TYPE default null,
  pIND_LIB_WEB	       RHFP1003.IND_LIB_WEB%TYPE default 'V',
  pDATA_LIB_WEB	      RHFP1003.DATA_LIB_WEB%TYPE default null,
  pCONF_REF           CHAR DEFAULT 'N', 
  pCONF_90D           CHAR DEFAULT 'N' 
);

PROCEDURE EXEC_CALC(
  pCOD_MESTRE_EVENTO 	RHFP1003.COD_MESTRE_EVENTO%TYPE,
  pTIPO_FILTRO        RHWF0406.TIPO_FILTRO%TYPE, 
  pFILTRO_CTS         RHWF0406.FILTRO_CTS%TYPE,
  pCOD_OPERADOR       OPERADOR.COD_OPERADOR%TYPE,
  pCONF_CALC          CHAR DEFAULT 'N',
  pCONF_FIN           CHAR DEFAULT 'N'
);  

--PROCEDURE EXCLUI_CALC(
--  pCOD_MESTRE_EVENTO 	RHFP1003.COD_MESTRE_EVENTO%TYPE,
--  pCOD_PROC           RHFP1070.COD_PROC%TYPE
--);  

PROCEDURE ENCERRA_EVENTOS(
  pTIPO              CHAR default 'I',
  pCOD_MESTRE_EVENTO RHFP1003.COD_MESTRE_EVENTO%TYPE default null,
  pCOD_EVENTO        RHFP1003.COD_MESTRE_EVENTO%TYPE default null,
  pDATA_INI          DATE default null,
  pDATA_FIM          DATE default null
);  

--PROCEDURE ENCERRA_MESTRE(
--  pMe RHFP1003%ROWTYPE
--);  

--PROCEDURE CONTROLA_PERIODO_AQUISITIVO(
--  pCodProc RHFP1070.COD_PROC%TYPE,
--  pSeq     RHFP1071.SEQ%TYPE,
--  pCOD_MESTRE_EVENTO RHFP1003.COD_MESTRE_EVENTO%TYPE,
--  pDataRef DATE,
--  pIniMov  DATE,
--  pFimMov  DATE
--); 
 
END;
 
/

CREATE OR REPLACE PACKAGE BODY PK_CALC IS
PROCEDURE GRAVA_MESTRE(
  pCOD_ORGANOGRAMA	   RHFP1003.COD_ORGANOGRAMA%TYPE default null,
  pCOD_EVENTO	        RHFP1003.COD_EVENTO%TYPE default null,
  pCOD_MESTRE_EVENTO 	IN OUT RHFP1003.COD_MESTRE_EVENTO%TYPE,
  pNOME_MESTRE_EVENTO	RHFP1003.NOME_MESTRE_EVENTO%TYPE default null,
  pDATA_REFERENCIA	   RHFP1003.DATA_REFERENCIA%TYPE default null,
  pDATA_PAGAMENTO	    RHFP1003.DATA_PAGAMENTO%TYPE default null,
  pIND_LIB_WEB	       RHFP1003.IND_LIB_WEB%TYPE default 'V',
  pDATA_LIB_WEB	      RHFP1003.DATA_LIB_WEB%TYPE default null,
  pCONF_REF           CHAR DEFAULT 'N', 
  pCONF_90D           CHAR DEFAULT 'N' 
) IS
  vCont NUMBER;
  vDataRef DATE;
  vMsg VARCHAR(100);
BEGIN
  IF (pCOD_ORGANOGRAMA IS NULL) OR (pCOD_ORGANOGRAMA < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Organograma" deve ser informado.#COD_ORGANOGRAMA');
  ELSIF (pCOD_EVENTO IS NULL) OR (pCOD_EVENTO < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Evento" deve ser informado.#COD_EVENTO');
  ELSIF (pNOME_MESTRE_EVENTO IS NULL) OR (LENGTH(pNOME_MESTRE_EVENTO) < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Nome do Mestre" deve ser informado.#NOME_MESTRE_EVENTO');
  ELSIF (pDATA_REFERENCIA IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A "Data de Referência" deve ser informada.#DATA_REFERENCIA');
  ELSIF (pDATA_PAGAMENTO IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A "Data de Pagamento" deve ser informada.#DATA_PAGAMENTO');
  ELSIF ABS(pDATA_REFERENCIA - pDATA_PAGAMENTO) > 15 THEN
    RAISE_APPLICATION_ERROR(-20001, 'A diferença entre a Data de Referência e a Data de Pagamento é maior do que 15 dias, o que não é permitido!#DATA_PAGAMENTO');
  ELSIF (pIND_LIB_WEB = 'D') AND (pDATA_LIB_WEB IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A "Data de Liberação na Web" deve ser informada.#DATA_LIB_WEB');
  ELSIF (pCONF_90D = 'N') AND (ABS(SYSDATE - pDATA_REFERENCIA) > 90) THEN
    RAISE_APPLICATION_ERROR(-20002,'A diferença entre a Data Atual e a "Data de Referência" é SUPERIOR a 90 dias.'||CHR(13)||CHR(10)||'Tem CERTEZA que deseja continuar?#pCONF_90D');
  END IF;  
  
  IF pCOD_MESTRE_EVENTO = 0 THEN --Inclusão
    SELECT COUNT(*)
      INTO vCont
    FROM RHFP1015 CE, RHFP0400 ORG
    WHERE ORG.COD_ORGANOGRAMA = pCOD_ORGANOGRAMA
      AND CE.COD_ORGANOGRAMA = ORG.COD_ORGANOGRAMA
      AND CE.COD_EVENTO = pCOD_EVENTO
      AND ORG.COD_NIVEL_ORG IN (1, 2);
    IF vCont < 1 THEN
      RAISE_APPLICATION_ERROR(-20001, 'Não é possível inserir o Mestre!'||CHR(13)||CHR(10)||'Não existem Cálculos para esse Evento.#COD_EVENTO');
    END IF;
    
    vDataRef := CASE WHEN pCOD_EVENTO IN (1, 21) THEN LAST_DAY(pDATA_REFERENCIA) ELSE pDATA_REFERENCIA END;
    SELECT MAX(COD_MESTRE_EVENTO||' - '||NOME_MESTRE_EVENTO)
      INTO vMsg
    FROM RHFP1003
    WHERE COD_EVENTO      = pCOD_EVENTO
      AND DATA_REFERENCIA = vDataRef
      AND COD_ORGANOGRAMA = pCOD_ORGANOGRAMA
      AND DATA_PAGAMENTO  = pDATA_PAGAMENTO;
    IF vMsg IS NOT NULL THEN
      RAISE_APPLICATION_ERROR(-20001, 'Existe outro Mestre para este Evento com as mesmas informações'||CHR(13)||CHR(10)||
                                      'de "Data de Referência" e "Data de Pagamento"!'||CHR(13)||CHR(10)||
                                      'Mestre: '||vMsg||CHR(13)||CHR(10)||
                                      'Isto não é permitido!#DATA_REFERENCIA');
    END IF;

    FOR vUlt IN 
      (SELECT ME.COD_MESTRE_EVENTO, ME.NOME_MESTRE_EVENTO, ME.DATA_REFERENCIA, ME.DATA_FIM_MOV, ME.SITUACAO_PROCESSO, EV.IND_PROCESSO, EV.IND_EVENTO_SIS
       FROM RHFP1002 EV, RHFP1003 ME
       WHERE ME.COD_EVENTO = pCOD_EVENTO
         AND ME.COD_ORGANOGRAMA = pCOD_ORGANOGRAMA
         AND EV.COD_EVENTO = ME.COD_EVENTO
         AND ME.COD_MESTRE_EVENTO IN (SELECT MAX(COD_MESTRE_EVENTO)
                                      FROM RHFP1003
                                      WHERE COD_EVENTO = ME.COD_EVENTO
                                        AND COD_ORGANOGRAMA = ME.COD_ORGANOGRAMA
                                     ))
    LOOP
      IF (vUlt.IND_PROCESSO <> 'N') AND (vUlt.DATA_REFERENCIA = vDataRef) THEN
        RAISE_APPLICATION_ERROR(-20001, 'Já existe um outro Mestre para este Evento com a mesma "Data de Referência"!.#DATA_REFERENCIA');
      ELSIF (pCONF_REF <> 'S') AND (vUlt.DATA_REFERENCIA = vDataRef) THEN
        RAISE_APPLICATION_ERROR(-20002,'Existe outro Mestre para este Evento com a mesma ''Data de Referência''!'||CHR(13)||CHR(10)||
                                       'Mestre: '||vUlt.COD_MESTRE_EVENTO||' - '||vUlt.NOME_MESTRE_EVENTO||CHR(13)||CHR(10)||
                                       'Tem CERTEZA que deseja continuar?#pCONF_REF');
      ELSIF (vUlt.IND_PROCESSO <> 'N') AND vDataRef <= vUlt.DATA_REFERENCIA THEN
        RAISE_APPLICATION_ERROR(-20001, 'A "Referência" deve ser maior que a "Referência" anterior!!.#DATA_REFERENCIA');
      ELSIF (vUlt.IND_PROCESSO <> 'N') AND vUlt.SITUACAO_PROCESSO <> 'I' THEN
        RAISE_APPLICATION_ERROR(-20001, 'O mestre anterior deste evento não foi incorporado ao financeiro!!#COD_EVENTO');
      END IF;
    END LOOP;
  
    IF pCOD_EVENTO = 1 THEN
      SELECT COUNT(*), MIN(ME.COD_MESTRE_EVENTO)
        INTO vCont, vMsg
      FROM RHFP1003 ME
      WHERE ME.COD_EVENTO = pCOD_EVENTO
        AND ME.COD_ORGANOGRAMA = pCOD_ORGANOGRAMA
        AND ME.DATA_REFERENCIA < pDATA_REFERENCIA
        AND ME.SITUACAO_PROCESSO <> 'I';
      IF vCont > 0 THEN    
        RAISE_APPLICATION_ERROR(-20001, 'Existe um mestre anterior que ainda não foi incorporado ao financeiro!'||CHR(13)||CHR(10)||
                                        'Por favor, faça o Encerramento do Mestre "'||vMsg||'" antes de continuar.#COD_EVENTO');
      END IF;
    END IF;

    SELECT NVL(MAX(COD_MESTRE_EVENTO), 0) + 1
      INTO pCOD_MESTRE_EVENTO
    FROM RHFP1003;
    INSERT INTO RHFP1003 (COD_ORGANOGRAMA, COD_EVENTO, COD_MESTRE_EVENTO, NOME_MESTRE_EVENTO, DATA_REFERENCIA, DATA_PAGAMENTO, 
        IND_LIB_WEB, DATA_LIB_WEB, SITUACAO_PROCESSO, DATA_APROPRIACAO, DATA_INI_MOV, DATA_FIM_MOV, IND_CONTABIL, ORIGEM_FINANCEIRO) VALUES 
      (pCOD_ORGANOGRAMA, pCOD_EVENTO, pCOD_MESTRE_EVENTO, pNOME_MESTRE_EVENTO, vDataRef, pDATA_PAGAMENTO,  
       pIND_LIB_WEB, pDATA_LIB_WEB, 'A', pDATA_REFERENCIA, TRUNC(pDATA_REFERENCIA, 'MONTH'), LAST_DAY(pDATA_REFERENCIA), 'N', '1');  
  ELSE
    UPDATE RHFP1003 SET NOME_MESTRE_EVENTO = pNOME_MESTRE_EVENTO, DATA_PAGAMENTO = pDATA_PAGAMENTO, IND_LIB_WEB = pIND_LIB_WEB, DATA_LIB_WEB = pDATA_LIB_WEB
    WHERE COD_MESTRE_EVENTO = pCOD_MESTRE_EVENTO;  
  END IF;
END;

PROCEDURE EXEC_CALC(
  pCOD_MESTRE_EVENTO 	RHFP1003.COD_MESTRE_EVENTO%TYPE,
  pTIPO_FILTRO        RHWF0406.TIPO_FILTRO%TYPE, 
  pFILTRO_CTS         RHWF0406.FILTRO_CTS%TYPE,
  pCOD_OPERADOR       OPERADOR.COD_OPERADOR%TYPE,
  pCONF_CALC          CHAR DEFAULT 'N',
  pCONF_FIN           CHAR DEFAULT 'N'
) IS
  vCodProc   RHWF0405.COD_PROCESSO%TYPE;
  vEmail     FISICA.EMAIL%TYPE;
  vTipo      OPERADOR.TIPO%TYPE;
  vCodEvento RHFP1003.COD_EVENTO%TYPE;
  vSituacao  RHFP1003.SITUACAO_PROCESSO%TYPE;
  vCliente   EMPRESA.COD_CLIENTE%TYPE;
  vMsg VARCHAR(100);
BEGIN
  SELECT MAX(F.EMAIL), MAX(O.TIPO)
    INTO vEmail, vTipo
  FROM FISICA F, OPERADOR O
  WHERE O.COD_OPERADOR = pCOD_OPERADOR
    AND F.COD_PESSOA = O.COD_PESSOA;
  IF vEmail IS NULL THEN
    RAISE_APPLICATION_ERROR(-20001, 'O usuário "'||pCOD_OPERADOR||'" deve ter e-mail cadastrado.#COD_OPERADOR');
  END IF;  

  SELECT MAX(COD_EVENTO), MAX(SITUACAO_PROCESSO), MAX((SELECT MAX(COD_CLIENTE) FROM EMPRESA))
    INTO vCodEvento, vSituacao, vCliente
  FROM RHFP1003
  WHERE COD_MESTRE_EVENTO = pCOD_MESTRE_EVENTO
    AND ORIGEM_FINANCEIRO <> '3';
    
  IF vCodEvento IS NULL THEN
    RAISE_APPLICATION_ERROR(-20001, 'Mestre de Cálculo NÃO inválido!#COD_MESTRE_EVENTO');
  ELSIF (vSituacao = 'I') AND (vCliente = 333) THEN
    RAISE_APPLICATION_ERROR(-20001, 'Este mestre já foi encerrado e NÃO poderá ser recalculado!!!#COD_MESTRE_EVENTO');
  ELSIF (vSituacao = 'I') AND (vTipo <> 'A') THEN
    RAISE_APPLICATION_ERROR(-20001, 'Este mestre já foi encerrado. Somente usuários do tipo "Administrador" podem recalcular mestres encerrados.!#COD_MESTRE_EVENTO');
  ELSIF (vSituacao = 'I') AND (pCONF_FIN <> 'S') THEN
    RAISE_APPLICATION_ERROR(-20002,'CUIDADO: Este mestre já foi encerrado.!'||CHR(13)||CHR(10)||
                                   'Tem CERTEZA que deseja continuar?#pCONF_FIN');
  ELSIF (vSituacao = 'C') AND (pCONF_CALC <> 'S') THEN
    RAISE_APPLICATION_ERROR(-20002,'Este mestre já foi calculado!'||CHR(13)||CHR(10)||
                                   'Tem CERTEZA que deseja continuar?#pCONF_CALC');
  ELSIF vCodEvento = 21 THEN
    SELECT MAX(ME.COD_MESTRE_EVENTO||' - '||ME.NOME_MESTRE_EVENTO)
      INTO vMsg
    FROM RHFP1003 ME, RHFP1003 C
    WHERE C.COD_MESTRE_EVENTO = pCOD_MESTRE_EVENTO
      AND ME.COD_EVENTO = 1
      AND TRUNC(ME.DATA_REFERENCIA, 'MM') = TRUNC(C.DATA_REFERENCIA, 'MM')
      AND ME.COD_ORGANOGRAMA = C.COD_ORGANOGRAMA
      AND ME.SITUACAO_PROCESSO <> 'I';
    IF vMsg IS NOT NULL THEN
      RAISE_APPLICATION_ERROR(-20001, 'A Execução do Cálculo será INTERROMPIDA!'||CHR(13)||CHR(10)||
                                      'Motivo: Existe um Mestre de Mensal aberto para o mesmo período.'||CHR(13)||CHR(10)||
                                      'Solução: Encerrar o Mestre: "'||vMsg||'".#COD_MESTRE_EVENTO');
    END IF;                                     
  END IF;  

  SELECT NVL(MAX(COD_PROCESSO),0) + 1
    INTO vCodProc
  FROM RHWF0405;
  INSERT INTO RHWF0405 (COD_PROCESSO, NOME_PROCESSO, TIPO_PROCESSO, PASTA_LOG, EMAIL_LOG, DATA_AGENDAMENTO, PROX_EXECUCAO, 
      PERIODICIDADE, IND_TERMINO, IND_PDF, IND_EXCEL, PASTA_RESULT, IND_ORIGEM, COD_MESTRE_EVENTO, COD_EVENTO) VALUES
    (vCodProc, 'Exec Calc WEB - '||pCOD_MESTRE_EVENTO, 'CA', 'C:\Temp\ProcAuto', vEmail, SYSDATE, SYSDATE, 
     'N', 'N', 'N', 'N', 'C:\Temp\ProcAuto', 'W', pCOD_MESTRE_EVENTO, vCodEvento);

  INSERT INTO RHWF0406 (COD_PROCESSO, COD_SEQ, TIPO_FILTRO, FILTRO_CTS, DESTINATARIOS) VALUES
     (vCodProc, 1, pTIPO_FILTRO, pFILTRO_CTS, vEmail);
END;  

/*PROCEDURE EXCLUI_CALC(
  pCOD_MESTRE_EVENTO 	RHFP1003.COD_MESTRE_EVENTO%TYPE,
  pCOD_PROC           RHFP1070.COD_PROC%TYPE
) IS
  vCodEvento RHFP1003.COD_EVENTO%TYPE;
  vSituacao  RHFP1003.SITUACAO_PROCESSO%TYPE;
  vDataRef   RHFP1003.DATA_REFERENCIA%TYPE;
  vCont      NUMBER;
BEGIN
  SELECT MAX(COD_EVENTO), MAX(SITUACAO_PROCESSO), MAX(DATA_REFERENCIA)
    INTO vCodEvento, vSituacao, vDataRef
  FROM RHFP1003
  WHERE COD_MESTRE_EVENTO = pCOD_MESTRE_EVENTO
    AND ORIGEM_FINANCEIRO <> '3'; -- VER SE TEM ESTE 3.
    
  -- VALIDAÇÕES
  
  IF vCodEvento IN (15, 16, 17, 18, 19, 20) THEN
    UPDATE RHFP0327 SEL SET SEL.SITUACAO_PROGRAMACAO = 1, 
                            SEL.COD_MESTRE_EVENTO    = NULL 
    WHERE SEL.DATA_PREVISTA_FERIAS = vDataRef 
      AND EXISTS (SELECT COD_CONTRATO FROM RHFP1072 WHERE COD_PROC = pCOD_PROC AND COD_CONTRATO = SEL.COD_CONTRATO)
      AND SEL.COD_CONTRATO IN 
             (SELECT SEL.COD_CONTRATO
              FROM RHFP1005 CC
              WHERE CC.COD_EVENTO = vCodEvento
                AND CC.DATA_REFERENCIA = vDataRef
                AND CC.COD_CONTRATO = SEL.COD_CONTRATO 
                AND CC.COD_MESTRE_EVENTO = pCOD_MESTRE_EVENTO) ;
            
    UPDATE RHFP0325 SEL SET SEL.DATA_ENCERRAMENTO = NULL
    WHERE SEL.DATA_ENCERRAMENTO = vDataRef
      AND EXISTS (SELECT COD_CONTRATO FROM RHFP1072 WHERE COD_PROC = pCOD_PROC AND COD_CONTRATO = SEL.COD_CONTRATO)
      AND SEL.COD_CONTRATO IN 
             (SELECT SEL.COD_CONTRATO
              FROM RHFP1005 CC
              WHERE CC.COD_EVENTO = vCodEvento
                AND CC.DATA_REFERENCIA = vDataRef
                AND CC.COD_CONTRATO = SEL.COD_CONTRATO 
                AND CC.COD_MESTRE_EVENTO = pCOD_MESTRE_EVENTO) ;
  END IF;
  
  IF vCodEvento IN (17, 18) THEN
    UPDATE RHFP0350 SEL SET SEL.SITUACAO = 1, 
                            SEL.COD_MESTRE_EVENTO = NULL 
    WHERE SEL.DATA_RESCISAO = vDataRef 
      AND EXISTS (SELECT COD_CONTRATO FROM RHFP1072 WHERE COD_PROC = pCOD_PROC AND COD_CONTRATO = SEL.COD_CONTRATO)
      AND SEL.COD_CONTRATO IN 
             (SELECT SEL.COD_CONTRATO
              FROM RHFP1005 CC
              WHERE CC.COD_EVENTO = vCodEvento
                AND CC.DATA_REFERENCIA = vDataRef
                AND CC.COD_CONTRATO = SEL.COD_CONTRATO 
                AND CC.COD_MESTRE_EVENTO = pCOD_MESTRE_EVENTO)  ;
  ELSIF vCodEvento IN (19, 20) THEN
    UPDATE RHFP0351 SEL SET SEL.SITUACAO = 1, 
                            SEL.COD_MESTRE_EVENTO = NULL 
    WHERE SEL.DATA_COMPLEMENTO = vDataRef 
      AND EXISTS (SELECT COD_CONTRATO FROM RHFP1072 WHERE COD_PROC = pCOD_PROC AND COD_CONTRATO = SEL.COD_CONTRATO)
      AND SEL.COD_CONTRATO IN 
             (SELECT SEL.COD_CONTRATO
              FROM RHFP1005 CC
              WHERE CC.COD_EVENTO = vCodEvento
                AND CC.DATA_REFERENCIA = vDataRef
                AND CC.COD_CONTRATO = SEL.COD_CONTRATO 
                AND CC.COD_MESTRE_EVENTO = pCOD_MESTRE_EVENTO) ;
  END IF;
  
  IF vCodEvento = 16 THEN
    UPDATE RHFP0370 PR SET SITUACAO_PROGRAMACAO = 1
    WHERE PR.DATA_FERIAS = vDataRef
      AND PR.NRO_PROGRAMACAO NOT IN (SELECT NRO_PROGRAMACAO
                                     FROM RHFP0327
                                     WHERE NRO_PROGRAMACAO = PR.NRO_PROGRAMACAO
                                       AND SITUACAO_PROGRAMACAO = '2');
  ELSIF vCodEvento = 18 THEN
    UPDATE RHFP0358 SEL SET SEL.SITUACAO = 1 
    WHERE SEL.DATA_RESCISAO = vDataRef 
      AND SEL.NRO_PROGRAMACAO NOT IN (SELECT NRO_PROGRAMACAO
                                      FROM RHFP0350
                                      WHERE NRO_PROGRAMACAO = SEL.NRO_PROGRAMACAO
                                        AND SITUACAO = 2) ;
  ELSIF vCodEvento = 20 THEN
    UPDATE RHFP0359 SEL SET SEL.SITUACAO = 1 
    WHERE SEL.DATA_COMPLEMENTO = vDataRef 
      AND SEL.NRO_PROGRAMACAO NOT IN (SELECT NRO_PROGRAMACAO
                                     FROM RHFP0350
                                      WHERE NRO_PROGRAMACAO = SEL.NRO_PROGRAMACAO
                         AND SITUACAO = 2) ;
  END IF;
  
  DELETE FROM RHFP1005 SEL
  WHERE SEL.COD_EVENTO      = vCodEvento
    AND SEL.DATA_REFERENCIA = vDataRef
    AND EXISTS (SELECT COD_CONTRATO FROM RHFP1072 WHERE COD_PROC = pCOD_PROC AND COD_CONTRATO = SEL.COD_CONTRATO)
    AND COD_MESTRE_EVENTO   = pCOD_MESTRE_EVENTO; 

  DELETE FROM RHFP1009 SEL
  WHERE SEL.COD_EVENTO      = vCodEvento
    AND SEL.DATA_REFERENCIA = vDataRef
    AND COD_MESTRE_EVENTO   = pCOD_MESTRE_EVENTO 
    AND EXISTS (SELECT COD_CONTRATO FROM RHFP1072 WHERE COD_PROC = pCOD_PROC AND COD_CONTRATO = SEL.COD_CONTRATO);

  DELETE FROM RHFP1014 SEL
  WHERE SEL.COD_EVENTO      = vCodEvento
    AND SEL.DATA_REFERENCIA = vDataRef
    AND COD_MESTRE_EVENTO   = pCOD_MESTRE_EVENTO 
    AND EXISTS (SELECT COD_CONTRATO FROM RHFP1072 WHERE COD_PROC = pCOD_PROC AND COD_CONTRATO = SEL.COD_CONTRATO);

  DELETE FROM RHBE0070 SEL
  WHERE COD_MESTRE_EVENTO   = pCOD_MESTRE_EVENTO 
    AND EXISTS (SELECT COD_CONTRATO FROM RHFP1072 WHERE COD_PROC = pCOD_PROC AND COD_CONTRATO = SEL.COD_CONTRATO)
    AND SEL.COD_ORIGEM_MOV = 3;

  SELECT COUNT(*) 
    INTO vCont
  FROM RHFP1005
  WHERE COD_MESTRE_EVENTO = pCOD_MESTRE_EVENTO;
  
  IF vCont = 0 THEN
    UPDATE RHFP1003 SET SITUACAO_PROCESSO = 'A'
    WHERE COD_MESTRE_EVENTO = pCOD_MESTRE_EVENTO
      AND NOT EXISTS (SELECT COD_MESTRE_EVENTO
                      FROM RHFP1006
                      WHERE COD_MESTRE_EVENTO = pCOD_MESTRE_EVENTO ) ;

    DELETE RHFP1047
    WHERE COD_MESTRE_EVENTO = pCOD_MESTRE_EVENTO;
  END IF;

  UPDATE RHFP1070 SET TERMINO = SYSDATE
  WHERE COD_PROC = pCOD_PROC;
END;  
*/

PROCEDURE ENCERRA_EVENTOS(
  pTIPO              CHAR default 'I',
  pCOD_MESTRE_EVENTO RHFP1003.COD_MESTRE_EVENTO%TYPE default null,
  pCOD_EVENTO        RHFP1003.COD_MESTRE_EVENTO%TYPE default null,
  pDATA_INI          DATE default null,
  pDATA_FIM          DATE default null
) IS
  CURSOR cMestres IS 
    SELECT ME.*
    FROM RHFP1003 ME
    WHERE ((pTipo = 'I' AND ME.COD_MESTRE_EVENTO = pCOD_MESTRE_EVENTO)
           OR
           (pTipo = 'G' AND ME.COD_EVENTO = pCOD_EVENTO AND ME.DATA_REFERENCIA BETWEEN pDATA_INI AND pDATA_FIM) 
          )
      AND ME.SITUACAO_PROCESSO = 'C'
    ORDER BY ME.DATA_REFERENCIA, ME.COD_MESTRE_EVENTO;          
BEGIN
  IF pTipo = 'I' AND pCOD_MESTRE_EVENTO IS NULL THEN
    RAISE_APPLICATION_ERROR(-20001, 'Mestre de Cálculo deve ser informado!#COD_MESTRE_EVENTO');
  ELSIF pTipo = 'G' AND pCOD_EVENTO NOT IN (15, 17) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O Encerragmento em GRUPO só é permitido para FÉRIAS e RESCISÃO!#COD_EVENTO');
  ELSIF pTipo = 'G' AND pDATA_INI IS NULL THEN
    RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser informada!#DATA_INI');
  ELSIF pTipo = 'G' AND pDATA_FIM IS NULL THEN
    RAISE_APPLICATION_ERROR(-20001, 'A "Data Final" deve ser informada!#DATA_FIM');
  ELSIF pTipo = 'G' AND pDATA_FIM < pDATA_INI THEN
    RAISE_APPLICATION_ERROR(-20001, 'A "Data Final" deve ser igual ou posterior a Data Inicial!#DATA_FIM');
  END IF;

-- demais validações

--  FOR vM IN cMestres LOOP
    --PK_CALC.ENCERRA_MESTRE(vM);
--  END LOOP;
END;  

/* PROCEDURE ENCERRA_MESTRE(
  pMe RHFP1003%ROWTYPE
) IS
  vCodProc RHFP1070.COD_PROC%TYPE;
  vSeq     RHFP1071.SEQ%TYPE := 1;
BEGIN
  vCodProc := RHFP1070_PROX.NEXTVAL;
  INSERT INTO RHFP1070 VALUES (vCodProc, SYSDATE, NULL, 'VI');
  INSERT INTO RHFP1071 VALUES (vCodProc, vSeq, SYSDATE, '-> Iniciando Encerramento do Mestre: '||pMe.COD_MESTRE_EVENTO); vSeq := vSeq + 1;
  IF (pMe.DATA_INCORPORACAO IS NOT NULL) OR (pMe.COD_EVENTO <> 1) THEN -- reprocesso
    INSERT INTO RHFP1072(SELECT DISTINCT vCodProc, COD_CONTRATO FROM RHFP1005 WHERE COD_MESTRE_EVENTO = pMe.COD_MESTRE_EVENTO);  
  ELSIF pMe.COD_EVENTO = 1 THEN
    --    selMov := 'SELECT SEL.COD_CONTRATO FROM RHFP0300 SEL WHERE 1=1 ' + selecaoContratos
    INSERT INTO RHFP1072(SELECT DISTINCT vCodProc, COD_CONTRATO FROM RHFP1005 WHERE COD_MESTRE_EVENTO = pMe.COD_MESTRE_EVENTO);  
  END IF;
  
  INSERT INTO RHFP1071 VALUES (vCodProc, vSeq, SYSDATE, '1 - Eliminando registros anteriores ...'); vSeq := vSeq + 1;
  IF pMe.DATA_INCORPORACAO IS NOT NULL THEN -- reprocesso
    DELETE FROM RHFP1004 SEL WHERE SEL.COD_EVENTO = pMe.COD_EVENTO AND SEL.COD_CONTRATO IN (SELECT COD_CONTRATO FROM RHFP1005 CC WHERE CC.COD_EVENTO = pMe.COD_EVENTO AND CC.DATA_REFERENCIA = pMe.DATA_REFERENCIA AND CC.COD_CONTRATO = SEL.COD_CONTRATO AND CC.COD_MESTRE_EVENTO = pMe.COD_MESTRE_EVENTO) AND SEL.COD_MESTRE_EVENTO = pMe.COD_MESTRE_EVENTO; 
    DELETE FROM RHFP1006 FIN WHERE FIN.COD_MESTRE_EVENTO = pMe.COD_MESTRE_EVENTO AND FIN.COD_CONTRATO IN (SELECT COD_CONTRATO FROM RHFP1005 CC WHERE CC.COD_EVENTO = pMe.COD_EVENTO AND CC.DATA_REFERENCIA = pMe.DATA_REFERENCIA AND CC.COD_CONTRATO = FIN.COD_CONTRATO AND CC.COD_MESTRE_EVENTO = FIN.COD_MESTRE_EVENTO);  
  ELSE
    DELETE FROM RHFP1006 WHERE COD_MESTRE_EVENTO = pMe.COD_MESTRE_EVENTO; 
  END IF;
  
  DELETE FROM RHFP1014 WHERE COD_MESTRE_EVENTO = pMe.COD_MESTRE_EVENTO; -- elimina VL's
  DELETE FROM RHFP1047 WHERE COD_MESTRE_EVENTO = pMe.COD_MESTRE_EVENTO; -- elimina VC's 

  INSERT INTO RHFP1071 VALUES (vCodProc, vSeq, SYSDATE, '2 - Inserindo registros no Financeiro ...'); vSeq := vSeq + 1;
  INSERT INTO RHFP1006 (SELECT CC.COD_MESTRE_EVENTO, CC.COD_CONTRATO, CC.COD_VD, CC.TIPO_INF_VD, CC.PRESTACAO_VD, CC.QTDE_VD, CC.VALOR_VD, CC.COD_ORIGEM_MOV FROM RHFP1005 CC, RHFP1000 VD WHERE CC.COD_VD = VD.COD_VD AND VD.TIPO_VD <> 'C' AND CC.COD_MESTRE_EVENTO = pMe.COD_MESTRE_EVENTO );
  
  INSERT INTO RHFP1071 VALUES (vCodProc, vSeq, SYSDATE, '3 - Inserindo registros no Movimento ...'); vSeq := vSeq + 1;
  INSERT INTO RHFP1004 (COD_EVENTO, COD_CONTRATO, DATA_MOV, COD_VD, TIPO_INF_VD, PRESTACAO_VD, QTDE_VD, VALOR_VD, COD_ORIGEM_MOV, COD_MESTRE_EVENTO, DATA_DIGITACAO) 
  SELECT * FROM (
  SELECT MOV.COD_EVENTO, MOV.COD_CONTRATO, ADD_MONTHS(MOV.DATA_MOV,1) AS DATA_MOV, MOV.COD_VD, MOV.TIPO_INF_VD, 
         DECODE(MOV.PRESTACAO_VD,99,MOV.PRESTACAO_VD,(MOV.PRESTACAO_VD - 1)) AS PRESTACAO_VD, 
         MOV.QTDE_VD, MOV.VALOR_VD, 7 AS COD_ORIGEM_MOV, CC.COD_MESTRE_EVENTO, MOV.DATA_DIGITACAO 
  FROM RHFP0300 CT, RHFP1005 CC, RHFP1004 MOV 
  WHERE MOV.COD_EVENTO = pMe.COD_EVENTO 
    AND MOV.DATA_MOV BETWEEN pMe.DATA_INI_MOV AND pMe.DATA_FIM_MOV 
    AND MOV.PRESTACAO_VD > 1 
    AND CC.COD_EVENTO = MOV.COD_EVENTO 
    AND CC.DATA_REFERENCIA = pMe.DATA_REFERENCIA 
    AND CC.COD_CONTRATO = MOV.COD_CONTRATO 
    AND CC.COD_VD = MOV.COD_VD 
    AND CC.COD_MESTRE_EVENTO = pMe.COD_MESTRE_EVENTO 
    AND CT.COD_CONTRATO = MOV.COD_CONTRATO 
    AND (CT.DATA_FIM IS NULL OR (CT.DATA_FIM IS NOT NULL AND TRUNC(CT.DATA_FIM,'MONTH') > TRUNC(MOV.DATA_MOV,'MONTH'))) 
  UNION ALL  
  SELECT MOV.COD_EVENTO, MOV.COD_CONTRATO, ADD_MONTHS(MOV.DATA_MOV,1) AS DATA_MOV, MOV.COD_VD, MOV.TIPO_INF_VD, 
         MOV.PRESTACAO_VD, MOV.QTDE_VD, MOV.VALOR_VD, 7 AS COD_ORIGEM_MOV, pMe.COD_MESTRE_EVENTO AS COD_MESTRE_EVENTO, MOV.DATA_DIGITACAO 
  FROM RHFP0300 CT, RHFP1004 MOV, 
       ( SELECT COD_CONTRATO FROM RHFP1072 WHERE COD_PROC = vCodProc 
       ) SEL 
  WHERE MOV.COD_EVENTO = pMe.COD_EVENTO 
    AND MOV.COD_CONTRATO = SEL.COD_CONTRATO 
    AND MOV.DATA_MOV BETWEEN pMe.DATA_INI_MOV AND pMe.DATA_FIM_MOV 
    AND MOV.PRESTACAO_VD >= 1 
    AND CT.COD_CONTRATO = MOV.COD_CONTRATO 
    AND (CT.DATA_FIM IS NULL OR (CT.DATA_FIM IS NOT NULL AND TRUNC(CT.DATA_FIM,'MONTH') > TRUNC(MOV.DATA_MOV,'MONTH'))) 
    AND (MOV.COD_EVENTO, MOV.COD_CONTRATO, MOV.COD_VD) NOT IN (SELECT CC.COD_EVENTO, CC.COD_CONTRATO, CC.COD_VD FROM RHFP1005 CC WHERE CC.COD_EVENTO = pMe.COD_EVENTO AND CC.DATA_REFERENCIA = pMe.DATA_REFERENCIA AND CC.COD_CONTRATO = MOV.COD_CONTRATO AND CC.COD_VD = MOV.COD_VD AND CC.COD_MESTRE_EVENTO = pMe.COD_MESTRE_EVENTO) 
  UNION ALL 
  SELECT MOV.COD_EVENTO, MOV.COD_CONTRATO, ADD_MONTHS(MOV.DATA_MOV,1) AS DATA_MOV, MOV.COD_VD, MOV.TIPO_INF_VD, 1 AS PRESTACAO_VD, 
         MOV.QTDE_VD, MOV.VALOR_VD, 7 AS COD_ORIGEM_MOV, pMe.COD_MESTRE_EVENTO AS COD_MESTRE_EVENTO, MOV.DATA_DIGITACAO 
  FROM RHFP0300 CT, RHFP1004 MOV, 
       ( SELECT COD_CONTRATO FROM RHFP1072 WHERE COD_PROC = vCodProc 
       ) SEL, 
       RHFP0306 CA 
  WHERE pMe.DATA_REFERENCIA BETWEEN CA.DATA_INICIO AND CA.DATA_FIM 
    AND CA.IND_SUSP_MOV = 'S' 
    AND SEL.COD_CONTRATO = CA.COD_CONTRATO 
    AND MOV.COD_EVENTO = pMe.COD_EVENTO 
    AND MOV.COD_CONTRATO = CA.COD_CONTRATO 
    AND MOV.DATA_MOV BETWEEN pMe.DATA_INI_MOV AND pMe.DATA_FIM_MOV 
    AND MOV.PRESTACAO_VD IS NULL 
    AND CT.COD_CONTRATO = MOV.COD_CONTRATO 
    AND (CT.DATA_FIM IS NULL OR (CT.DATA_FIM IS NOT NULL AND TRUNC(CT.DATA_FIM,'MONTH') > TRUNC(MOV.DATA_MOV,'MONTH'))) 
    AND (MOV.COD_EVENTO, MOV.COD_CONTRATO, MOV.COD_VD) NOT IN (SELECT CC.COD_EVENTO, CC.COD_CONTRATO, CC.COD_VD FROM RHFP1005 CC WHERE CC.COD_EVENTO = pMe.COD_EVENTO AND CC.DATA_REFERENCIA = pMe.DATA_REFERENCIA 
    AND CC.COD_CONTRATO = MOV.COD_CONTRATO AND CC.COD_VD = MOV.COD_VD AND CC.COD_MESTRE_EVENTO = pMe.COD_MESTRE_EVENTO) 
  ) SEL WHERE (SEL.COD_EVENTO, SEL.COD_CONTRATO, SEL.DATA_MOV, SEL.COD_VD) NOT IN (SELECT COD_EVENTO, COD_CONTRATO, DATA_MOV, COD_VD FROM RHFP1004 WHERE COD_EVENTO = SEL.COD_EVENTO AND COD_CONTRATO = SEL.COD_CONTRATO AND DATA_MOV = SEL.DATA_MOV AND COD_VD = SEL.COD_VD);

  INSERT INTO RHFP1071 VALUES (vCodProc, vSeq, SYSDATE, '4 - Inserindo registros de Contrapartida ...'); vSeq := vSeq + 1;
  INSERT INTO RHFP1004 (COD_EVENTO, COD_CONTRATO, DATA_MOV, COD_VD, TIPO_INF_VD, PRESTACAO_VD, QTDE_VD, VALOR_VD, COD_ORIGEM_MOV, COD_MESTRE_EVENTO, DATA_DIGITACAO) (SELECT * FROM (SELECT CC.COD_EVENTO, CC.COD_CONTRATO, pMe.DATA_FIM_MOV + 1 AS DATA_MOV, VD.COD_VD_CONTRA AS COD_VD, CC.TIPO_INF_VD, CC.PRESTACAO_VD AS PRESTACAO_VD, CC.QTDE_VD, CC.VALOR_VD, 7 AS COD_ORIGEM_MOV, CC.COD_MESTRE_EVENTO, SYSDATE AS DATA_DIGITACAO FROM RHFP1000 VD, RHFP1005 CC WHERE CC.COD_MESTRE_EVENTO = pMe.COD_MESTRE_EVENTO AND VD.COD_VD = CC.COD_VD AND VD.COD_VD_CONTRA IS NOT NULL) MOV WHERE (MOV.COD_EVENTO, MOV.COD_CONTRATO, MOV.DATA_MOV, MOV.COD_VD) NOT IN (SELECT COD_EVENTO, COD_CONTRATO, DATA_MOV, COD_VD FROM RHFP1004 WHERE COD_EVENTO = MOV.COD_EVENTO AND COD_CONTRATO = MOV.COD_CONTRATO AND DATA_MOV = MOV.DATA_MOV AND COD_VD = MOV.COD_VD)); 

  INSERT INTO RHFP1071 VALUES (vCodProc, vSeq, SYSDATE, '5 - Eliminando registros desnecessários ...'); vSeq := vSeq + 1;
  DELETE FROM RHFP1005 CC WHERE CC.COD_MESTRE_EVENTO IN (SELECT ME.COD_MESTRE_EVENTO FROM RHFP1002 EV, RHFP1003 ME, (SELECT DISTINCT COD_MESTRE_EVENTO FROM RHFP1005) MC WHERE ME.COD_MESTRE_EVENTO = MC.COD_MESTRE_EVENTO AND ME.SITUACAO_PROCESSO = 'I' AND EV.COD_EVENTO = ME.COD_EVENTO AND ADD_MONTHS(ME.DATA_REFERENCIA, EV.MESES_CALCULADO) <= pMe.DATA_REFERENCIA) ;

  IF pMe.COD_EVENTO = 1 THEN
    INSERT INTO RHFP1071 VALUES (vCodProc, vSeq, SYSDATE, '6 - Atualizando os Períodos Aquisitivos ...'); vSeq := vSeq + 1;
    Controla_Periodo_Aquisitivo(vCodProc, vSeq, pMe.COD_MESTRE_EVENTO, pMe.DATA_REFERENCIA, pMe.DATA_INI_MOV, pMe.DATA_FIM_MOV);


    INSERT INTO RHFP1071 VALUES (vCodProc, vSeq, SYSDATE, '7 - Eliminando Logs antigos do Auditoria ...'); vSeq := vSeq + 1;
    --  EliminaAuditoria;

    INSERT INTO RHFP1071 VALUES (vCodProc, vSeq, SYSDATE, '8 - Eliminando dados temporários ...'); vSeq := vSeq + 1;
    -- Apagar os "Web" de RHWF0405 após 30d
  END IF;  

  INSERT INTO RHFP1071 VALUES (vCodProc, vSeq, SYSDATE, 'Atualizando a situação do Mestre ...'); vSeq := vSeq + 1;
  UPDATE RHFP1003 ME SET ME.SITUACAO_PROCESSO = 'I' , ME.DATA_INCORPORACAO = SYSDATE 
  WHERE ME.COD_MESTRE_EVENTO = pMe.COD_MESTRE_EVENTO ;

  INSERT INTO RHFP1071 VALUES (vCodProc, vSeq, SYSDATE, '-> SUCESSO no encerramento do Mestre: '||pMe.COD_MESTRE_EVENTO );
  UPDATE RHFP1070 SET TERMINO = SYSDATE
  WHERE COD_PROC = vCodProc; 
END;  

PROCEDURE CONTROLA_PERIODO_AQUISITIVO(
  pCodProc RHFP1070.COD_PROC%TYPE,
  pSeq     RHFP1071.SEQ%TYPE,
  pCOD_MESTRE_EVENTO RHFP1003.COD_MESTRE_EVENTO%TYPE,
  pDataRef DATE,
  pIniMov  DATE,
  pFimMov  DATE
) IS
  vSeq RHFP1071.SEQ%TYPE;
  vCliente EMPRESA.COD_CLIENTE%TYPE;
  vRef    DATE := pDataRef;
  vIniMov DATE := ADD_MONTHS(pIniMov, -1);
BEGIN
  vSeq := pSeq;
  INSERT INTO RHFP1071 VALUES (pCodProc, vSeq, SYSDATE, '6.1 - Criando Períodos Aquisitivos ...'); vSeq := vSeq + 1;
  INSERT INTO RHFP0325 (COD_CONTRATO, DATA_INICIO_PERIODO, COD_ORIGEM, DATA_FIM_PERIODO, DATA_INCLUSAO, DIAS_PERIODO) (SELECT PA.COD_CONTRATO, PA.DATA_FIM_PERIODO + 1 AS DATA_INICIO_PERIODO, 8 AS COD_ORIGEM, ADD_MONTHS(PA.DATA_FIM_PERIODO + 1,12) - 1 AS DATA_FIM_PERIODO, TRUNC(SYSDATE,'DD') AS DATA_INCLUSAO, 30 AS DIAS_PERIODO FROM RHFP0325 PA, RHFP0300 SEL WHERE EXISTS ( SELECT COD_CONTRATO FROM RHFP1072 WHERE COD_PROC = pCodProc AND COD_CONTRATO = SEL.COD_CONTRATO) AND SEL.DATA_FIM IS NULL AND PA.COD_CONTRATO = SEL.COD_CONTRATO AND PA.DATA_FIM_PERIODO IN (SELECT MAX(PA2.DATA_FIM_PERIODO) FROM RHFP0325 PA2 WHERE PA2.COD_CONTRATO = PA.COD_CONTRATO AND pDataRef + 45 >= PA.DATA_FIM_PERIODO) AND PA.COD_CONTRATO NOT IN (SELECT COD_CONTRATO FROM RHFP0306 WHERE COD_CONTRATO = PA.COD_CONTRATO AND COD_CAUSA_AFAST IN (SELECT COD_CAUSA_AFAST FROM RHFP0100 WHERE IND_ENIBE_CRIACAO = 'S') AND pDataRef BETWEEN DATA_INICIO AND DATA_FIM) AND (PA.COD_MOTIVO IS NULL OR PA.COD_MOTIVO <> 1001));

  SELECT MAX(COD_CLIENTE)
    INTO vCliente
  FROM EMPRESA;

  IF vCliente = 333 THEN
    vIniMov  := ADD_MONTHS(pIniMov, -2);
    vRef := ADD_MONTHS(pDataRef, -1); --usada por enquanto somente no SQL 6.2 - Encerramento por Afast > 180 dias.
  END IF;

  INSERT INTO RHFP1071 VALUES (pCodProc, vSeq, SYSDATE, '6.2 - Encerramento por Afastamentos > 180 dias ...'); vSeq := vSeq + 1;
  UPDATE RHFP0325 SEL SET SEL.DATA_ENCERRAMENTO = pDataRef, SEL.COD_MOTIVO = 1001, SEL.COD_MESTRE_EVENTO = pCOD_MESTRE_EVENTO WHERE EXISTS (SELECT COD_CONTRATO FROM RHFP1072 WHERE COD_PROC = pCodProc AND COD_CONTRATO = SEL.COD_CONTRATO) AND SEL.DATA_INICIO_PERIODO < vRef AND SEL.DATA_ENCERRAMENTO IS NULL AND SEL.COD_CONTRATO IN (SELECT CA.COD_CONTRATO FROM RHFP0306 CA WHERE CA.COD_CONTRATO = SEL.COD_CONTRATO AND CA.COD_CAUSA_AFAST IN (SELECT COD_CAUSA_AFAST FROM RHFP0100 WHERE IND_ENCERRA_180DIAS = 'S') AND (CA.DATA_INICIO BETWEEN SEL.DATA_INICIO_PERIODO AND RHYKUTILS.MENOR_DATA(SEL.DATA_FIM_PERIODO,vRef) OR CA.DATA_FIM BETWEEN SEL.DATA_INICIO_PERIODO AND RHYKUTILS.MENOR_DATA(SEL.DATA_FIM_PERIODO,vRef) OR (CA.DATA_INICIO < SEL.DATA_INICIO_PERIODO AND CA.DATA_FIM > SEL.DATA_FIM_PERIODO)) GROUP BY CA.COD_CONTRATO HAVING SUM(RHYKUTILS.MENOR_DATA(CA.DATA_FIM, RHYKUTILS.MENOR_DATA(SEL.DATA_FIM_PERIODO,vRef)) - RHYKUTILS.MAIOR_DATA(CA.DATA_INICIO, SEL.DATA_INICIO_PERIODO)+1) > 180);

  INSERT INTO RHFP1071 VALUES (pCodProc, vSeq, SYSDATE, '6.3 - Encerramento por Afastamentos > 180 dias (data perda) ...'); vSeq := vSeq + 1;
  RHYP0099(pCOD_MESTRE_EVENTO, pDataRef);

  INSERT INTO RHFP1071 VALUES (pCodProc, vSeq, SYSDATE, '6.4 - Encerramento por Afastamentos > 180 dias ...'); vSeq := vSeq + 1;
  FOR vElim IN 
    (SELECT SEL.COD_CONTRATO, SEL.DATA_INICIO_PERIODO
     FROM RHFP0325 SEL
     WHERE SEL.DATA_ENCERRAMENTO = pDataRef
       AND SEL.COD_MOTIVO = 1001
       AND EXISTS (SELECT COD_CONTRATO FROM RHFP1072 WHERE COD_PROC = pCodProc AND COD_CONTRATO = SEL.COD_CONTRATO)
     ORDER BY SEL.COD_CONTRATO, SEL.DATA_INICIO_PERIODO
    ) LOOP
      DELETE FROM RHFP0325 SEL
      WHERE SEL.COD_CONTRATO = vElim.COD_CONTRATO
        AND SEL.DATA_INICIO_PERIODO > vElim.DATA_INICIO_PERIODO
        AND SEL.COD_CONTRATO NOT IN (SELECT COD_CONTRATO FROM RHFP0328 WHERE COD_CONTRATO = SEL.COD_CONTRATO AND DATA_INICIO_PERIODO = SEL.DATA_INICIO_PERIODO);   
  END LOOP;

  INSERT INTO RHFP1071 VALUES (pCodProc, vSeq, SYSDATE, '6.5 - Encerramento por Afastamentos > 180 dias ...'); vSeq := vSeq + 1;
  FOR vAlt IN 
    (SELECT SEL.COD_CONTRATO, MIN(SEL.DATA_FIM) AS DATA_FIM, PA.DATA_INICIO_PERIODO
     FROM RHFP0325 PA, RHFP0306 SEL
     WHERE SEL.DATA_FIM BETWEEN vIniMov AND pFimMov
       AND EXISTS (SELECT COD_CONTRATO FROM RHFP1072 WHERE COD_PROC = pCodProc AND COD_CONTRATO = SEL.COD_CONTRATO)
       AND SEL.COD_CAUSA_AFAST IN (SELECT COD_CAUSA_AFAST FROM RHFP0100 WHERE IND_ENCERRA_180DIAS = 'S')
       AND PA.COD_CONTRATO = SEL.COD_CONTRATO
       AND PA.DATA_INICIO_PERIODO < SEL.DATA_FIM
       AND PA.DATA_FIM_PERIODO > SEL.DATA_FIM
       AND PA.DATA_ENCERRAMENTO IS NOT NULL
       AND PA.COD_MOTIVO = 1001
       AND (PA.COD_MESTRE_EVENTO IS NULL OR SEL.DATA_FIM > PA.DATA_PERDA)
       AND SEL.COD_CONTRATO NOT IN (SELECT COD_CONTRATO FROM RHFP0325 WHERE COD_CONTRATO = SEL.COD_CONTRATO AND DATA_INICIO_PERIODO > SEL.DATA_FIM)
       AND SEL.COD_CONTRATO NOT IN (SELECT AF.COD_CONTRATO FROM RHFP0306 AF WHERE AF.COD_CONTRATO = SEL.COD_CONTRATO AND AF.DATA_INICIO  = SEL.DATA_FIM + 1 AND AF.COD_CAUSA_AFAST IN (SELECT COD_CAUSA_AFAST FROM RHFP0100 WHERE IND_ENCERRA_180DIAS = 'S'))
     GROUP BY SEL.COD_CONTRATO, PA.DATA_INICIO_PERIODO)
  LOOP
    UPDATE RHFP0325 SET DATA_FIM_PERIODO = vAlt.DATA_FIM
    WHERE COD_CONTRATO = vAlt.COD_CONTRATO
      AND DATA_INICIO_PERIODO = vAlt.DATA_INICIO_PERIODO;
  END LOOP; 

  INSERT INTO RHFP1071 VALUES (pCodProc, vSeq, SYSDATE, '6.6 - Criação Períodos Retorno Afastamento ...'); vSeq := vSeq + 1;
  INSERT INTO RHFP0325 (COD_CONTRATO, DATA_INICIO_PERIODO, COD_ORIGEM, DATA_FIM_PERIODO, DATA_INCLUSAO) SELECT SEL.COD_CONTRATO, SEL.DATA_FIM + 1 AS DATA_INICIO_PERIODO, 8 AS COD_ORIGEM, ADD_MONTHS(SEL.DATA_FIM,12) AS DATA_FIM_PERIODO, TRUNC(SYSDATE,'DD') AS DATA_INCLUSAO FROM RHFP0300 CT, RHFP0306 SEL WHERE SEL.DATA_FIM BETWEEN vIniMov AND pFimMov AND EXISTS (SELECT COD_CONTRATO FROM RHFP1072 WHERE COD_PROC = pCodProc AND COD_CONTRATO = SEL.COD_CONTRATO) AND SEL.COD_CAUSA_AFAST IN (SELECT COD_CAUSA_AFAST FROM RHFP0100 WHERE IND_ENCERRA_180DIAS = 'S') AND CT.COD_CONTRATO = SEL.COD_CONTRATO AND CT.DATA_FIM IS NULL AND SEL.COD_CONTRATO NOT IN (SELECT COD_CONTRATO FROM RHFP0325 WHERE COD_CONTRATO = SEL.COD_CONTRATO AND DATA_FIM_PERIODO > SEL.DATA_FIM) AND SEL.COD_CONTRATO NOT IN (SELECT AF.COD_CONTRATO FROM RHFP0306 AF WHERE AF.COD_CONTRATO = SEL.COD_CONTRATO AND AF.DATA_INICIO  = SEL.DATA_FIM + 1 AND AF.COD_CAUSA_AFAST IN (SELECT COD_CAUSA_AFAST FROM RHFP0100 WHERE IND_ENCERRA_180DIAS = 'S'));
END; 
*/


END;
/

CREATE OR REPLACE PACKAGE PK_HIST_CONT IS

PROCEDURE RHFP0310_HI(
  pOperacao            VARCHAR2 default 'I', -- I, A ou E
  pHistorico           VARCHAR2 default 'N', -- S ou N
  pCOD_CONTRATO        RHFP0300.COD_CONTRATO%TYPE,
  pDATA_INICIO         DATE default null,
  pDATA_FIM            DATE default null,
  pCOD_ORGANOGRAMA     RHFP0310.COD_ORGANOGRAMA%TYPE default null,
  pCOD_MOTIVO          RHFP0310.COD_MOTIVO%TYPE default null);
 
PROCEDURE RHFP0340_HI(
  pOperacao            VARCHAR2 default 'I', -- I, A ou E
  pHistorico           VARCHAR2 default 'N', -- S ou N
  pCOD_CONTRATO        RHFP0300.COD_CONTRATO%TYPE,
  pDATA_INICIO         DATE default null,
  pDATA_FIM            DATE default null,
  pCOD_CLH             RHFP0340.COD_CLH%TYPE default null,
  pCOD_MOTIVO          RHFP0340.COD_MOTIVO%TYPE default null);

PROCEDURE RHFP0608_HI(
  pOperacao            VARCHAR2 default 'I', -- I, A ou E
  pHistorico           VARCHAR2 default 'N', -- S ou N
  pCOD_CONTRATO        RHFP0300.COD_CONTRATO%TYPE,
  pDATA_INICIO         DATE default null,
  pDATA_FIM            DATE default null,
  pCOD_MOTIVO          RHFP0608.COD_MOTIVO%TYPE default null,
  pCOD_INF_SALARIAL    RHFP0608.COD_INF_SALARIAL%TYPE default null,
  pCOD_TAB_SALARIAL    RHFP0608.COD_TAB_SALARIAL%TYPE default null,
  pCOD_FAIXA           RHFP0608.COD_FAIXA%TYPE default null,
  pCOD_NIVEL           RHFP0608.COD_NIVEL%TYPE default null,
  pVALOR_SALARIO       RHFP0608.VALOR_SALARIO%TYPE default null,
  pTIPO_SALARIO        RHFP0608.TIPO_SALARIO%TYPE default null);

PROCEDURE RHAF1119_HI(
  pOperacao            VARCHAR2 default 'I', -- I, A ou E
  pHistorico           VARCHAR2 default 'N', -- S ou N
  pCOD_CONTRATO        RHFP0300.COD_CONTRATO%TYPE,
  pDATA_INICIO         DATE default null,
  pDATA_FIM            DATE default null,
  pCOD_TURNO           RHAF1119.COD_TURNO%TYPE default null,
  pCOD_MOTIVO          RHAF1119.COD_MOTIVO%TYPE default null);

PROCEDURE RHFP0307_HI(
  pOperacao            VARCHAR2 default 'I', -- I, A ou E
  pHistorico           VARCHAR2 default 'N', -- S ou N
  pCOD_CONTRATO        RHFP0300.COD_CONTRATO%TYPE,
  pDATA_INICIO         DATE default null,
  pDATA_FIM            DATE default null,
  pCOD_HORAS_BASE      RHFP0307.COD_HORAS_BASE%TYPE default null,
  pCOD_MOTIVO          RHFP0307.COD_MOTIVO%TYPE default null);

PROCEDURE RHFP0312_HI(
  pOperacao            VARCHAR2 default 'I', -- I, A ou E
  pHistorico           VARCHAR2 default 'N', -- S ou N
  pCOD_CONTRATO        RHFP0300.COD_CONTRATO%TYPE,
  pDATA_INICIO         DATE default null,
  pDATA_FIM            DATE default null,
  pCOD_SINDICATO       RHFP0312.COD_SINDICATO%TYPE default null,
  pCOD_MOTIVO          RHFP0312.COD_MOTIVO%TYPE default null);

END;
 
/

CREATE OR REPLACE PACKAGE BODY PK_HIST_CONT IS

PROCEDURE RHFP0310_HI(
  pOperacao            VARCHAR2 default 'I', -- I, A ou E
  pHistorico           VARCHAR2 default 'N', -- S ou N
  pCOD_CONTRATO        RHFP0300.COD_CONTRATO%TYPE,
  pDATA_INICIO         DATE default null,
  pDATA_FIM            DATE default null,
  pCOD_ORGANOGRAMA     RHFP0310.COD_ORGANOGRAMA%TYPE default null,
  pCOD_MOTIVO          RHFP0310.COD_MOTIVO%TYPE default null)
IS
  vDataAdm     DATE;
  vDataResc    DATE;
  vDataIniAnt  DATE;
  vDataFimAnt  DATE;
  vEmpresaAnt  RHFP0310.COD_ORGANOGRAMA%TYPE;
  vSeqAnt      RHFP0310.SEQ%TYPE;

  vDataFim     DATE;
  vDataIniOrg  DATE;
  vDataFimOrg  DATE;
  vCodEmp      RHFP0400.COD_ORGANOGRAMA%TYPE;
  vCodFilial   RHFP0400.COD_ORGANOGRAMA%TYPE;
  vSeq         RHFP0310.SEQ%TYPE;
  vCodCausaDem RHFP0310.COD_CAUSA_DEMISSAO%TYPE DEFAULT NULL;

  vNivelOrg RHFP0400.COD_NIVEL_ORG%TYPE;
  vQtdeEmp  NUMBER;
BEGIN
  IF pOperacao NOT IN ('I', 'A', 'E') THEN
    RAISE_APPLICATION_ERROR(-20001, '"Operação" inválida!#OPERACAO');
  END IF;

  SELECT CT.DATA_INICIO, CT.DATA_FIM, 
         CO.DATA_INICIO AS DATA_INI_ANT,
         CO.DATA_FIM    AS DATA_FIM_ANT,
         CO.COD_NIVEL2, CO.SEQ
    INTO vDataAdm, vDataResc, vDataIniAnt, vDataFimAnt, vEmpresaAnt, vSeqAnt
  FROM (SELECT COD_CONTRATO, DATA_INICIO, DATA_FIM, COD_NIVEL2, SEQ
        FROM RHFP0310 CO
        WHERE CO.COD_CONTRATO = pCOD_CONTRATO
          AND CO.DATA_INICIO  = (SELECT MAX(DATA_INICIO) FROM RHFP0310 WHERE COD_CONTRATO = pCOD_CONTRATO)  
       ) CO,
       RHFP0300 CT
  WHERE CT.COD_CONTRATO = pCOD_CONTRATO 
    AND CO.COD_CONTRATO (+) = CT.COD_CONTRATO; 
  
  -- Validações
  IF pOperacao = 'I' THEN
    IF pDATA_INICIO IS NULL THEN -- validação YSHI1001
       RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser informada.#DATA_INICIO');
    ELSIF pDATA_INICIO = vDataIniAnt THEN
      RAISE_APPLICATION_ERROR(-20001, '"Data Início" inváilda, pois já existe".#DATA_INICIO');
    ELSIF pDATA_INICIO > TO_DATE('31/12/2999', 'DD/MM/YYYY') THEN -- YSHI1001
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser menor que "31/12/2999"!#DATA_INICIO');
    ELSIF (pCOD_ORGANOGRAMA IS NULL) OR (pCOD_ORGANOGRAMA < 1) THEN --início das validações Fpct0110
      RAISE_APPLICATION_ERROR(-20001, 'O "Organograma" deve ser informado.#COD_ORGANOGRAMA');
    ELSIF (pCOD_MOTIVO IS NULL) OR (pCOD_MOTIVO < 1) THEN 
      RAISE_APPLICATION_ERROR(-20001, 'O "Motivo" deve ser informado.#COD_MOTIVO');
    ELSIF vDataAdm > pDATA_INICIO THEN
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser igual ou posterior a Admissão do Contrato.#DATA_INICIO');
    ELSIF pDATA_INICIO > vDataResc THEN
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser anterior a Rescisão do Contrato.#DATA_INICIO');
    ELSIF pDATA_INICIO < vDataIniAnt THEN
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser posterior a data anterior, que é: '||to_char(vDataIniAnt, 'DD/MM/YYYY')||'.#DATA_INICIO');
    END IF;
    
    SELECT MIN(DATA_INICIO), MAX(DATA_FIM)
      INTO vDataIniOrg, vDataFimOrg
    FROM RHFP0401 EST
    WHERE EST.COD_ORGANOGRAMA = pCOD_ORGANOGRAMA;

    IF vDataIniOrg IS NULL THEN
      RAISE_APPLICATION_ERROR(-20001, 'Organograma "sem vigência" na Estrutura.#COD_ORGANOGRAMA');
    ELSIF pDATA_INICIO < vDataIniOrg THEN
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" informada deve ser posterior a Data Início do Organograma.#COD_ORGANOGRAMA');
    ELSIF pDATA_INICIO > vDataFimOrg THEN
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" informada deve ser anterior a Data Fim do Organograma.#COD_ORGANOGRAMA');
    END IF;

    SELECT nvl(MAX(EST.COD_NIVEL2),0), nvl(MAX(EST.COD_NIVEL3),0)
      INTO vCodEmp, vCodFilial
    FROM RHFP0401 N2, RHFP0401 N3, RHFP0401 EST
    WHERE EST.COD_ORGANOGRAMA = pCOD_ORGANOGRAMA
      AND pDATA_INICIO BETWEEN EST.DATA_INICIO AND EST.DATA_FIM
      AND N3.COD_ORGANOGRAMA = EST.COD_NIVEL3
      AND pDATA_INICIO BETWEEN N3.DATA_INICIO AND N3.DATA_FIM
      AND N2.COD_ORGANOGRAMA = EST.COD_NIVEL2
      AND pDATA_INICIO BETWEEN N2.DATA_INICIO AND N2.DATA_FIM;
      
    IF (vCodEmp < 1) or (vCodFilial < 1) THEN
      RAISE_APPLICATION_ERROR(-20001, 'Organograma "sem Empresa / Filial" vigente.#COD_ORGANOGRAMA');
    END IF;  

    --#vIndQlNew 
  
    -- eSocial - Transferência entre Empresas
    IF vSeqAnt IS NULL THEN
      vSeq := 1;
    ELSIF vEmpresaAnt = vCodEmp THEN
      vSeq := vSeqAnt;
    ELSE
      vSeq := vSeqAnt + 1;
      vCodCausaDem := 31;
      SELECT MAX(ORG.COD_NIVEL_ORG), COUNT(ME.COD_ORGANOGRAMA)
        INTO vNivelOrg, vQtdeEmp
      FROM RHFP0400 ORG, 
           (SELECT DISTINCT COD_ORGANOGRAMA
            FROM RHFP1003
           ) ME
      WHERE ORG.COD_ORGANOGRAMA = ME.COD_ORGANOGRAMA;
      IF (vNivelOrg >= 2) and (vQtdeEmp > 1) THEN
        FOR vCalc IN (SELECT ME.COD_MESTRE_EVENTO, ME.NOME_MESTRE_EVENTO, ME.DATA_REFERENCIA,
                             ME.COD_EVENTO, EV.NOME_EVENTO
                      FROM RHFP1002 EV, RHFP1003 ME
                      WHERE ME.DATA_REFERENCIA >= pDATA_INICIO
                        AND ME.COD_ORGANOGRAMA = vEmpresaAnt
                        AND ME.SITUACAO_PROCESSO = 'C'
                        AND EV.COD_EVENTO = ME.COD_EVENTO
                        AND EV.IND_EVENTO_SIS = 'S'
                        AND EXISTS (SELECT COD_CONTRATO
                                    FROM RHFP1005
                                    WHERE COD_EVENTO = ME.COD_EVENTO
                                      AND DATA_REFERENCIA = ME.DATA_REFERENCIA
                                      AND COD_CONTRATO = pCOD_CONTRATO
                                      AND COD_MESTRE_EVENTO = ME.COD_MESTRE_EVENTO
                                   )
                      ORDER BY ME.DATA_REFERENCIA
        ) LOOP
          RAISE_APPLICATION_ERROR(-20001,'Não será possível realizar a transferência.' || CHR(13) || CHR(10) ||
                       'Motivo: já existe cálculo na empresa de origem.' || CHR(13) || CHR(10) ||
                       'Evento: ' || vCalc.COD_EVENTO || ' - ' || vCalc.NOME_EVENTO || CHR(13) || CHR(10) ||
                       'Mestre: ' || vCalc.COD_MESTRE_EVENTO || ' - ' || vCalc.NOME_MESTRE_EVENTO || CHR(13) || CHR(10) ||
                       'Referência: ' || to_char(vCalc.DATA_REFERENCIA, 'DD/MM/YYYY') ||'.#COD_ORGANOGRAMA');
        END LOOP;    
      END IF;
    END IF;
  ELSIF pOperacao = 'A' THEN
    IF (pCOD_MOTIVO IS NULL) OR (pCOD_MOTIVO < 1) THEN 
      RAISE_APPLICATION_ERROR(-20001, 'O "Motivo" deve ser informado.#COD_MOTIVO');
    END IF;
  ELSIF pOperacao = 'E' THEN
    IF pDATA_INICIO <> vDataIniAnt THEN
      RAISE_APPLICATION_ERROR(-20001, 'Só pode ser excluído o "ultimo" registro, que é: '||to_char(vDataIniAnt, 'DD/MM/YYYY')||'.#DATA_INICIO');
    END IF;
  END IF;
  
  IF (pOperacao IN ('I', 'E')) /*AND (pHistorico = 'N')*/ THEN
    vDataFim := TO_DATE('31/12/2999', 'DD/MM/YYYY');
  END IF; 

  -- Efetiva a operação correspondente no BD.
  IF pOperacao = 'I' THEN  
    IF vDataIniAnt IS NOT NULL THEN
      UPDATE RHFP0310 SET DATA_FIM = pDATA_INICIO - 1
      WHERE COD_CONTRATO = pCOD_CONTRATO
        AND DATA_INICIO  = vDataIniAnt;   
    END IF; 
    INSERT INTO RHFP0310 (COD_CONTRATO, DATA_INICIO, DATA_FIM, COD_ORGANOGRAMA, COD_MOTIVO, COD_CAUSA_DEMISSAO, COD_NIVEL2, SEQ, DATA_INCLUSAO)
      VALUES (pCOD_CONTRATO, pDATA_INICIO, vDataFim, pCOD_ORGANOGRAMA, pCOD_MOTIVO, vCodCausaDem, vCodEmp, vSeq, sysdate);
  ELSIF pOperacao = 'A' THEN
    UPDATE RHFP0310 SET COD_MOTIVO = pCOD_MOTIVO
    WHERE COD_CONTRATO = pCOD_CONTRATO
      AND DATA_INICIO  = pDATA_INICIO;
  ELSIF pOperacao = 'E' THEN
    DELETE RHFP0310
    WHERE COD_CONTRATO = pCOD_CONTRATO
      AND DATA_INICIO  = pDATA_INICIO;
    UPDATE RHFP0310 SET DATA_FIM = vDataFim
    WHERE COD_CONTRATO = pCOD_CONTRATO
      AND DATA_INICIO  = (SELECT MAX(DATA_INICIO) FROM RHFP0310 WHERE COD_CONTRATO = pCOD_CONTRATO AND DATA_INICIO < pDATA_INICIO);   
  END IF;
END; 
 
PROCEDURE RHFP0340_HI(
  pOperacao     VARCHAR2 default 'I', -- I, A ou E
  pHistorico    VARCHAR2 default 'N', -- S ou N
  pCOD_CONTRATO RHFP0300.COD_CONTRATO%TYPE,
  pDATA_INICIO  DATE default null,
  pDATA_FIM     DATE default null,
  pCOD_CLH      RHFP0340.COD_CLH%TYPE default null,
  pCOD_MOTIVO   RHFP0340.COD_MOTIVO%TYPE default null)
IS
  vDataAdm     DATE;
  vDataResc    DATE;
  vDataIniAnt  DATE;
  vDataFimAnt  DATE;

  vDataFim     DATE;
  vDataIniClh  DATE;
  vDataFimClh  DATE;
  vTot         NUMBER;

BEGIN
  IF pOperacao NOT IN ('I', 'A', 'E') THEN
    RAISE_APPLICATION_ERROR(-20001, '"Operação" inválida!#OPERACAO');
  END IF;

  SELECT CT.DATA_INICIO, CT.DATA_FIM, 
         CO.DATA_INICIO AS DATA_INI_ANT,
         CO.DATA_FIM    AS DATA_FIM_ANT
    INTO vDataAdm, vDataResc, vDataIniAnt, vDataFimAnt
  FROM (SELECT COD_CONTRATO, DATA_INICIO, DATA_FIM
        FROM RHFP0340 CO
        WHERE CO.COD_CONTRATO = pCOD_CONTRATO
          AND CO.DATA_INICIO  = (SELECT MAX(DATA_INICIO) FROM RHFP0340 WHERE COD_CONTRATO = pCOD_CONTRATO)  
       ) CO,
       RHFP0300 CT
  WHERE CT.COD_CONTRATO = pCOD_CONTRATO 
    AND CO.COD_CONTRATO (+) = CT.COD_CONTRATO; 
  
  -- Validações
  IF pOperacao = 'I' THEN
    IF pDATA_INICIO IS NULL THEN -- validação YSHI1001
       RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser informada.#DATA_INICIO');
    ELSIF pDATA_INICIO = vDataIniAnt THEN
      RAISE_APPLICATION_ERROR(-20001, '"Data Início" inváilda, pois já existe".#DATA_INICIO');
    ELSIF pDATA_INICIO > TO_DATE('31/12/2999', 'DD/MM/YYYY') THEN -- YSHI1001
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser menor que "31/12/2999"!#DATA_INICIO');
    ELSIF (pCOD_CLH IS NULL) OR (pCOD_CLH < 1) THEN --início das validações Fpct0110
      RAISE_APPLICATION_ERROR(-20001, 'O "Cargo" deve ser informado.#COD_CLH');
    ELSIF (pCOD_MOTIVO IS NULL) OR (pCOD_MOTIVO < 1) THEN 
      RAISE_APPLICATION_ERROR(-20001, 'O "Motivo" deve ser informado.#COD_MOTIVO');
    ELSIF vDataAdm > pDATA_INICIO THEN
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser igual ou posterior a Admissão do Contrato.#DATA_INICIO');
    ELSIF pDATA_INICIO > vDataResc THEN
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser anterior a Rescisão do Contrato.#DATA_INICIO');
    ELSIF pDATA_INICIO < vDataIniAnt THEN
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser posterior a data anterior, que é: '||to_char(vDataIniAnt, 'DD/MM/YYYY')||'.#DATA_INICIO');
    END IF;
    SELECT COUNT(*) INTO vTot 
    FROM RHFP0500 CLH, RHFP0502 EC 
    WHERE CLH.COD_CLH = pCOD_CLH 
      AND EC.COD_CLH = pCOD_CLH 
      AND pDATA_INICIO BETWEEN EC.DATA_INICIO AND EC.DATA_FIM 
      AND EC.IND_LANCAMENTO = 'S';
    IF vTot <= 0 THEN
      RAISE_APPLICATION_ERROR(-20001, '"Cargo" inválido.' || CHR(13) || CHR(10) ||
               'O cargo deve existir na tabela de cargos, estar vigente na estrutura e permitir lançamentos.#COD_CLH');
    END IF;
  ELSIF pOperacao = 'A' THEN
    IF (pCOD_MOTIVO IS NULL) OR (pCOD_MOTIVO < 1) THEN 
      RAISE_APPLICATION_ERROR(-20001, 'O "Motivo" deve ser informado.#COD_MOTIVO');
    END IF;
  ELSIF pOperacao = 'E' THEN
    IF pDATA_INICIO <> vDataIniAnt THEN
      RAISE_APPLICATION_ERROR(-20001, 'Só pode ser excluído o "ultimo" registro, que é: '||to_char(vDataIniAnt, 'DD/MM/YYYY')||'.#DATA_INICIO');
    END IF;
  END IF;
    
  IF (pOperacao IN ('I', 'E')) /*AND (pHistorico = 'N')*/ THEN
    vDataFim := TO_DATE('31/12/2999', 'DD/MM/YYYY');
  END IF; 

  -- Efetiva a operação correspondente no BD.
  IF pOperacao = 'I' THEN  
    IF vDataIniAnt IS NOT NULL THEN
      UPDATE RHFP0340 SET DATA_FIM = pDATA_INICIO - 1
      WHERE COD_CONTRATO = pCOD_CONTRATO
        AND DATA_INICIO  = vDataIniAnt;   
    END IF; 
    INSERT INTO RHFP0340 (COD_CONTRATO, DATA_INICIO, DATA_FIM, COD_CLH, COD_MOTIVO)
      VALUES (pCOD_CONTRATO, pDATA_INICIO, vDataFim, pCOD_CLH, pCOD_MOTIVO);
  ELSIF pOperacao = 'A' THEN
    UPDATE RHFP0340 SET COD_MOTIVO = pCOD_MOTIVO
    WHERE COD_CONTRATO = pCOD_CONTRATO
      AND DATA_INICIO  = pDATA_INICIO;
  ELSIF pOperacao = 'E' THEN
    DELETE RHFP0340
    WHERE COD_CONTRATO = pCOD_CONTRATO
      AND DATA_INICIO  = pDATA_INICIO;
      
    UPDATE RHFP0340 SET DATA_FIM = vDataFim
    WHERE COD_CONTRATO = pCOD_CONTRATO
      AND DATA_INICIO  = (SELECT MAX(DATA_INICIO) FROM RHFP0340 WHERE COD_CONTRATO = pCOD_CONTRATO AND DATA_INICIO < pDATA_INICIO);   
  END IF;
END;  

PROCEDURE RHFP0608_HI(
  pOperacao            VARCHAR2 default 'I', -- I, A ou E
  pHistorico           VARCHAR2 default 'N', -- S ou N
  pCOD_CONTRATO        RHFP0300.COD_CONTRATO%TYPE,
  pDATA_INICIO         DATE default null,
  pDATA_FIM            DATE default null,
  pCOD_MOTIVO          RHFP0608.COD_MOTIVO%TYPE default null,
  pCOD_INF_SALARIAL    RHFP0608.COD_INF_SALARIAL%TYPE default null,
  pCOD_TAB_SALARIAL    RHFP0608.COD_TAB_SALARIAL%TYPE default null,
  pCOD_FAIXA           RHFP0608.COD_FAIXA%TYPE default null,
  pCOD_NIVEL           RHFP0608.COD_NIVEL%TYPE default null,
  pVALOR_SALARIO       RHFP0608.VALOR_SALARIO%TYPE default null,
  pTIPO_SALARIO        RHFP0608.TIPO_SALARIO%TYPE default null)
IS
  vDataAdm     DATE;
  vDataResc    DATE;
  vDataIniAnt  DATE;
  vDataFimAnt  DATE;
  vInfSalAnt   RHFP0608.COD_INF_SALARIAL%TYPE;
  vTipoSalAnt  RHFP0608.TIPO_SALARIO%TYPE;
  vTipoSalAtu  RHFP0608.TIPO_SALARIO%TYPE;
  vSalAnt      RHFP0608.VALOR_SALARIO%TYPE;
  vSalAtu      RHFP0608.VALOR_SALARIO%TYPE;
  vDataFim  DATE;
BEGIN
  IF pOperacao NOT IN ('I', 'A', 'E') THEN
    RAISE_APPLICATION_ERROR(-20001, '"Operação" inválida!#OPERACAO');
  END IF;
  vTipoSalAtu := pTIPO_SALARIO;
  SELECT CT.DATA_INICIO, CT.DATA_FIM, 
         CO.DATA_INICIO AS DATA_INI_ANT,
         CO.DATA_FIM    AS DATA_FIM_ANT,
         CO.COD_INF_SALARIAL, 
         CO.TIPO_SALARIO, RHYF0126(CO.COD_CONTRATO, CO.DATA_FIM) AS VALOR_SALARIO
    INTO vDataAdm, vDataResc, vDataIniAnt, vDataFimAnt, vInfSalAnt, vTipoSalAnt, vSalAnt 
  FROM (SELECT COD_CONTRATO, DATA_INICIO, DATA_FIM, COD_INF_SALARIAL, TIPO_SALARIO, VALOR_SALARIO
        FROM RHFP0608 CO
        WHERE CO.COD_CONTRATO = pCOD_CONTRATO
          AND CO.DATA_INICIO  = (SELECT MAX(DATA_INICIO) FROM RHFP0608 WHERE COD_CONTRATO = pCOD_CONTRATO)  
       ) CO,
       RHFP0300 CT
  WHERE CT.COD_CONTRATO = pCOD_CONTRATO 
    AND CO.COD_CONTRATO (+) = CT.COD_CONTRATO; 
  
  -- Validações
  IF pOperacao = 'I' THEN
    IF pDATA_INICIO IS NULL THEN -- validação YSHI1001
       RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser informada.#DATA_INICIO');
    ELSIF pDATA_INICIO = vDataIniAnt THEN
      RAISE_APPLICATION_ERROR(-20001, '"Data Início" inváilda, pois já existe".#DATA_INICIO');
    ELSIF pDATA_INICIO > TO_DATE('31/12/2999', 'DD/MM/YYYY') THEN -- YSHI1001
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser menor que "31/12/2999"!#DATA_INICIO');
    ELSIF (pCOD_INF_SALARIAL IS NULL) OR (pCOD_INF_SALARIAL < 1) THEN 
      RAISE_APPLICATION_ERROR(-20001, 'O "Inf. Salarial" deve ser informado.#COD_INF_SALARIAL');
    ELSIF (pTIPO_SALARIO IS NULL) THEN
      RAISE_APPLICATION_ERROR(-20001, 'O "Tipo Salário" é obrigatório.#TIPO_SALARIO');
    ELSIF (pTIPO_SALARIO <> 'M') AND (pTIPO_SALARIO <> 'H') THEN
      RAISE_APPLICATION_ERROR(-20001, 'O "Tipo Salário" é inválido.#TIPO_SALARIO');
    ELSIF (pCOD_MOTIVO IS NULL) OR (pCOD_MOTIVO < 1) THEN 
      RAISE_APPLICATION_ERROR(-20001, 'O "Motivo" deve ser informado.#COD_MOTIVO');
    ELSIF vDataAdm > pDATA_INICIO THEN
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser igual ou posterior a Admissão do Contrato.#DATA_INICIO');
    ELSIF pDATA_INICIO > vDataResc THEN
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser anterior a Rescisão do Contrato.#DATA_INICIO');
    ELSIF pDATA_INICIO < vDataIniAnt THEN
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser posterior a data anterior, que é: '||to_char(vDataIniAnt, 'DD/MM/YYYY')||'.#DATA_INICIO');
    END IF;
    -- Validações específicas do Histórico de Salários
    IF pCOD_INF_SALARIAL = 3 THEN
      IF NVL(pVALOR_SALARIO,-1) <= 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Campo "Valor Salário" deve ser informado.#VALOR_SALARIO');
      END IF;
      vSalAtu := pVALOR_SALARIO;
      IF vSalAtu < vSalAnt AND vTipoSalAnt = pTIPO_SALARIO THEN
        RAISE_APPLICATION_ERROR(-20001, 'O valor do salário informado é menor que o valor do salário anterior.' || CHR(13) || CHR(10) ||
                                        'REDUZIR SALÁRIO É PROIBIDO POR LEI!.#VALOR_SALARIO');
      END IF;
    ELSE
      IF NVL(pCOD_TAB_SALARIAL,-1) <= 0 OR NVL(pCOD_FAIXA,-1) <= 0 OR NVL(pCOD_NIVEL,-1) <= 0 THEN
        RAISE_APPLICATION_ERROR(-20001, '"Tabela Salarial" deve ser informada.#DATA_INICIO');
      END IF;
      SELECT NVL(MAX(TIPO_SALARIO),'M') INTO vTipoSalAtu
      FROM RHFP0603
      WHERE COD_TAB_SALARIAL = pCOD_TAB_SALARIAL
        AND pDATA_INICIO BETWEEN DATA_INICIO AND DATA_FIM;
      SELECT NVL(MAX(VALOR_QUARTIL),0) INTO vSalAtu
      FROM RHFP0607
      WHERE COD_TAB_SALARIAL = pCOD_TAB_SALARIAL
        AND COD_FAIXA = pCOD_FAIXA
        AND COD_NIVEL = pCOD_NIVEL
        AND pDATA_INICIO BETWEEN DATA_INICIO AND DATA_FIM;
      IF vSalAtu < vSalAnt AND vTipoSalAnt = vTipoSalAtu THEN
        RAISE_APPLICATION_ERROR(-20001, 'O valor do salário informado é menor que o valor do salário anterior.' || CHR(13) || CHR(10) ||
                                        'REDUZIR SALÁRIO É PROIBIDO POR LEI!.#DATA_INICIO');
      END IF;
    END IF;
  ELSIF pOperacao = 'A' THEN
    IF (pCOD_MOTIVO IS NULL) OR (pCOD_MOTIVO < 1) THEN 
      RAISE_APPLICATION_ERROR(-20001, 'O "Motivo" deve ser informado.#COD_MOTIVO');
    END IF;
  ELSIF pOperacao = 'E' THEN
    IF pDATA_INICIO <> vDataIniAnt THEN
      RAISE_APPLICATION_ERROR(-20001, 'Só pode ser excluído o "ultimo" registro, que é: '||to_char(vDataIniAnt, 'DD/MM/YYYY')||'.#DATA_INICIO');
    END IF;
  END IF;
    
  IF (pOperacao IN ('I', 'E')) /*AND (pHistorico = 'N')*/ THEN
    vDataFim := TO_DATE('31/12/2999', 'DD/MM/YYYY');
  END IF; 

  -- Efetiva a operação correspondente no BD.
  IF pOperacao = 'I' THEN  
    IF vDataIniAnt IS NOT NULL THEN
      UPDATE RHFP0608 SET DATA_FIM = pDATA_INICIO - 1
      WHERE COD_CONTRATO = pCOD_CONTRATO
        AND DATA_INICIO  = vDataIniAnt;   
    END IF; 
    INSERT INTO RHFP0608 (COD_CONTRATO, DATA_INICIO, DATA_FIM, COD_MOTIVO, COD_INF_SALARIAL, COD_TAB_SALARIAL, COD_FAIXA, COD_NIVEL, TIPO_SALARIO, VALOR_SALARIO, IND_SALARIO)
      VALUES (pCOD_CONTRATO, pDATA_INICIO, vDataFim, pCOD_MOTIVO, pCOD_INF_SALARIAL, pCOD_TAB_SALARIAL, pCOD_FAIXA, pCOD_NIVEL, vTipoSalAtu, pVALOR_SALARIO, 'N');
  ELSIF pOperacao = 'A' THEN
    UPDATE RHFP0608 SET COD_MOTIVO = pCOD_MOTIVO
    WHERE COD_CONTRATO = pCOD_CONTRATO
      AND DATA_INICIO  = pDATA_INICIO;
  ELSIF pOperacao = 'E' THEN
    DELETE RHFP0608
    WHERE COD_CONTRATO = pCOD_CONTRATO
      AND DATA_INICIO  = pDATA_INICIO;
      
    UPDATE RHFP0608 SET DATA_FIM = vDataFim
    WHERE COD_CONTRATO = pCOD_CONTRATO
      AND DATA_INICIO  = (SELECT MAX(DATA_INICIO) FROM RHFP0608 WHERE COD_CONTRATO = pCOD_CONTRATO AND DATA_INICIO < pDATA_INICIO);   
  END IF;
END;

PROCEDURE RHAF1119_HI(
  pOperacao     VARCHAR2 default 'I', -- I, A ou E
  pHistorico    VARCHAR2 default 'N', -- S ou N
  pCOD_CONTRATO RHFP0300.COD_CONTRATO%TYPE,
  pDATA_INICIO  DATE default null,
  pDATA_FIM     DATE default null,
  pCOD_TURNO    RHAF1119.COD_TURNO%TYPE default null,
  pCOD_MOTIVO   RHAF1119.COD_MOTIVO%TYPE default null)
IS
  vDataAdm     DATE;
  vDataResc    DATE;
  vDataIniAnt  DATE;
  vDataFimAnt  DATE;

  vDataFim     DATE;
  vTipoTur     VARCHAR2(1);

BEGIN
  IF pOperacao NOT IN ('I', 'A', 'E') THEN
    RAISE_APPLICATION_ERROR(-20001, '"Operação" inválida!#OPERACAO');
  END IF;

  SELECT CT.DATA_INICIO, CT.DATA_FIM, 
         CO.DATA_INICIO AS DATA_INI_ANT,
         CO.DATA_FIM    AS DATA_FIM_ANT
    INTO vDataAdm, vDataResc, vDataIniAnt, vDataFimAnt
  FROM (SELECT COD_CONTRATO, DATA_INICIO, DATA_FIM
        FROM RHAF1119 CO
        WHERE CO.COD_CONTRATO = pCOD_CONTRATO
          AND CO.DATA_INICIO  = (SELECT MAX(DATA_INICIO) FROM RHAF1119 WHERE COD_CONTRATO = pCOD_CONTRATO)  
       ) CO,
       RHFP0300 CT
  WHERE CT.COD_CONTRATO = pCOD_CONTRATO 
    AND CO.COD_CONTRATO (+) = CT.COD_CONTRATO; 
  
  -- Validações
  IF pOperacao = 'I' THEN
    IF pDATA_INICIO IS NULL THEN -- validação YSHI1001
       RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser informada.#DATA_INICIO');
    ELSIF pDATA_INICIO = vDataIniAnt THEN
      RAISE_APPLICATION_ERROR(-20001, '"Data Início" inváilda, pois já existe".#DATA_INICIO');
    ELSIF pDATA_INICIO > TO_DATE('31/12/2999', 'DD/MM/YYYY') THEN -- YSHI1001
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser menor que "31/12/2999"!#DATA_INICIO');
    ELSIF (pCOD_TURNO IS NULL) OR (pCOD_TURNO < 1) THEN --início das validações Fpct0110
      RAISE_APPLICATION_ERROR(-20001, 'O "Turno" deve ser informado.#COD_TURNO');
    ELSIF (pCOD_MOTIVO IS NULL) OR (pCOD_MOTIVO < 1) THEN 
      RAISE_APPLICATION_ERROR(-20001, 'O "Motivo" deve ser informado.#COD_MOTIVO');
    ELSIF vDataAdm > pDATA_INICIO THEN
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser igual ou posterior a Admissão do Contrato.#DATA_INICIO');
    ELSIF pDATA_INICIO > vDataResc THEN
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser anterior a Rescisão do Contrato.#DATA_INICIO');
    ELSIF pDATA_INICIO < vDataIniAnt THEN
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser posterior a data anterior, que é: '||to_char(vDataIniAnt, 'DD/MM/YYYY')||'.#DATA_INICIO');
    END IF;
  ELSIF pOperacao = 'A' THEN
    IF (pCOD_MOTIVO IS NULL) OR (pCOD_MOTIVO < 1) THEN 
      RAISE_APPLICATION_ERROR(-20001, 'O "Motivo" deve ser informado.#COD_MOTIVO');
    END IF;
  ELSIF pOperacao = 'E' THEN
    IF pDATA_INICIO <> vDataIniAnt THEN
      RAISE_APPLICATION_ERROR(-20001, 'Só pode ser excluído o "ultimo" registro, que é: '||to_char(vDataIniAnt, 'DD/MM/YYYY')||'.#DATA_INICIO');
    END IF;
  END IF;
    
  IF (pOperacao IN ('I', 'E')) /*AND (pHistorico = 'N')*/ THEN
    vDataFim := TO_DATE('31/12/2999', 'DD/MM/YYYY');
  END IF; 

  -- Efetiva a operação correspondente no BD.
  IF pOperacao = 'I' THEN  
    IF vDataIniAnt IS NOT NULL THEN
      UPDATE RHAF1119 SET DATA_FIM = pDATA_INICIO - 1
      WHERE COD_CONTRATO = pCOD_CONTRATO
        AND DATA_INICIO  = vDataIniAnt;   
    END IF; 
    SELECT NVL(MAX(TIPO_TURNO),'S') INTO vTipoTur FROM RHAF1145 WHERE COD_TURNO = pCOD_TURNO;
    IF vTipoTur = 'D' THEN
      INSERT INTO RHAF1119 (COD_CONTRATO, DATA_INICIO, DATA_FIM, COD_TURNO, COD_MOTIVO, TIPO_TURNO, COD_SEQ_JORNADA, IND_REVEZAMENTO)
        VALUES (pCOD_CONTRATO, pDATA_INICIO, vDataFim, pCOD_TURNO, pCOD_MOTIVO, 'D', 1, 'N');
    ELSE
      INSERT INTO RHAF1119 (COD_CONTRATO, DATA_INICIO, DATA_FIM, COD_TURNO, COD_MOTIVO, TIPO_TURNO, IND_REVEZAMENTO)
        VALUES (pCOD_CONTRATO, pDATA_INICIO, vDataFim, pCOD_TURNO, pCOD_MOTIVO, 'S', 'N');
    END IF;
  ELSIF pOperacao = 'A' THEN
    UPDATE RHAF1119 SET COD_MOTIVO = pCOD_MOTIVO
    WHERE COD_CONTRATO = pCOD_CONTRATO
      AND DATA_INICIO  = pDATA_INICIO;
  ELSIF pOperacao = 'E' THEN
    DELETE RHAF1119
    WHERE COD_CONTRATO = pCOD_CONTRATO
      AND DATA_INICIO  = pDATA_INICIO;
      
    UPDATE RHAF1119 SET DATA_FIM = vDataFim
    WHERE COD_CONTRATO = pCOD_CONTRATO
      AND DATA_INICIO  = (SELECT MAX(DATA_INICIO) FROM RHAF1119 WHERE COD_CONTRATO = pCOD_CONTRATO AND DATA_INICIO < pDATA_INICIO);   
  END IF;
END;  

PROCEDURE RHFP0307_HI(
  pOperacao            VARCHAR2 default 'I', -- I, A ou E
  pHistorico           VARCHAR2 default 'N', -- S ou N
  pCOD_CONTRATO        RHFP0300.COD_CONTRATO%TYPE,
  pDATA_INICIO         DATE default null,
  pDATA_FIM            DATE default null,
  pCOD_HORAS_BASE      RHFP0307.COD_HORAS_BASE%TYPE default null,
  pCOD_MOTIVO          RHFP0307.COD_MOTIVO%TYPE default null)
IS
  vDataAdm     DATE;
  vDataResc    DATE;
  vDataIniAnt  DATE;
  vDataFimAnt  DATE;

  vDataFim     DATE;

BEGIN
  IF pOperacao NOT IN ('I', 'A', 'E') THEN
    RAISE_APPLICATION_ERROR(-20001, '"Operação" inválida!#OPERACAO');
  END IF;

  SELECT CT.DATA_INICIO, CT.DATA_FIM, 
         CO.DATA_INICIO AS DATA_INI_ANT,
         CO.DATA_FIM    AS DATA_FIM_ANT
    INTO vDataAdm, vDataResc, vDataIniAnt, vDataFimAnt
  FROM (SELECT COD_CONTRATO, DATA_INICIO, DATA_FIM
        FROM RHFP0307 CO
        WHERE CO.COD_CONTRATO = pCOD_CONTRATO
          AND CO.DATA_INICIO  = (SELECT MAX(DATA_INICIO) FROM RHFP0307 WHERE COD_CONTRATO = pCOD_CONTRATO)  
       ) CO,
       RHFP0300 CT
  WHERE CT.COD_CONTRATO = pCOD_CONTRATO 
    AND CO.COD_CONTRATO (+) = CT.COD_CONTRATO; 
  
  -- Validações
  IF pOperacao = 'I' THEN
    IF pDATA_INICIO IS NULL THEN -- validação YSHI1001
       RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser informada.#DATA_INICIO');
    ELSIF pDATA_INICIO = vDataIniAnt THEN
      RAISE_APPLICATION_ERROR(-20001, '"Data Início" inváilda, pois já existe".#DATA_INICIO');
    ELSIF pDATA_INICIO > TO_DATE('31/12/2999', 'DD/MM/YYYY') THEN -- YSHI1001
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser menor que "31/12/2999"!#DATA_INICIO');
    ELSIF (pCOD_HORAS_BASE IS NULL) OR (pCOD_HORAS_BASE < 1) THEN --início das validações Fpct0110
      RAISE_APPLICATION_ERROR(-20001, 'A "Carga Horária" deve ser informado.#COD_HORAS_BASE');
    ELSIF (pCOD_MOTIVO IS NULL) OR (pCOD_MOTIVO < 1) THEN 
      RAISE_APPLICATION_ERROR(-20001, 'O "Motivo" deve ser informado.#COD_MOTIVO');
    ELSIF vDataAdm > pDATA_INICIO THEN
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser igual ou posterior a Admissão do Contrato.#DATA_INICIO');
    ELSIF pDATA_INICIO > vDataResc THEN
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser anterior a Rescisão do Contrato.#DATA_INICIO');
    ELSIF pDATA_INICIO < vDataIniAnt THEN
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser posterior a data anterior, que é: '||to_char(vDataIniAnt, 'DD/MM/YYYY')||'.#DATA_INICIO');
    END IF;
  ELSIF pOperacao = 'A' THEN
    IF (pCOD_MOTIVO IS NULL) OR (pCOD_MOTIVO < 1) THEN 
      RAISE_APPLICATION_ERROR(-20001, 'O "Motivo" deve ser informado.#COD_MOTIVO');
    END IF;
  ELSIF pOperacao = 'E' THEN
    IF pDATA_INICIO <> vDataIniAnt THEN
      RAISE_APPLICATION_ERROR(-20001, 'Só pode ser excluído o "ultimo" registro, que é: '||to_char(vDataIniAnt, 'DD/MM/YYYY')||'.#DATA_INICIO');
    END IF;
  END IF;
    
  IF (pOperacao IN ('I', 'E')) /*AND (pHistorico = 'N')*/ THEN
    vDataFim := TO_DATE('31/12/2999', 'DD/MM/YYYY');
  END IF; 

  -- Efetiva a operação correspondente no BD.
  IF pOperacao = 'I' THEN  
    IF vDataIniAnt IS NOT NULL THEN
      UPDATE RHFP0307 SET DATA_FIM = pDATA_INICIO - 1
      WHERE COD_CONTRATO = pCOD_CONTRATO
        AND DATA_INICIO  = vDataIniAnt;   
    END IF; 
    INSERT INTO RHFP0307 (COD_CONTRATO, DATA_INICIO, DATA_FIM, COD_HORAS_BASE, COD_MOTIVO, IND_CALC_PROP)
      VALUES (pCOD_CONTRATO, pDATA_INICIO, vDataFim, pCOD_HORAS_BASE, pCOD_MOTIVO, 'N');
  ELSIF pOperacao = 'A' THEN
    UPDATE RHFP0307 SET COD_MOTIVO = pCOD_MOTIVO
    WHERE COD_CONTRATO = pCOD_CONTRATO
      AND DATA_INICIO  = pDATA_INICIO;
  ELSIF pOperacao = 'E' THEN
    DELETE RHFP0307
    WHERE COD_CONTRATO = pCOD_CONTRATO
      AND DATA_INICIO  = pDATA_INICIO;
      
    UPDATE RHFP0307 SET DATA_FIM = vDataFim
    WHERE COD_CONTRATO = pCOD_CONTRATO
      AND DATA_INICIO  = (SELECT MAX(DATA_INICIO) FROM RHFP0307 WHERE COD_CONTRATO = pCOD_CONTRATO AND DATA_INICIO < pDATA_INICIO);   
  END IF;
END;  

PROCEDURE RHFP0312_HI(
  pOperacao            VARCHAR2 default 'I', -- I, A ou E
  pHistorico           VARCHAR2 default 'N', -- S ou N
  pCOD_CONTRATO        RHFP0300.COD_CONTRATO%TYPE,
  pDATA_INICIO         DATE default null,
  pDATA_FIM            DATE default null,
  pCOD_SINDICATO       RHFP0312.COD_SINDICATO%TYPE default null,
  pCOD_MOTIVO          RHFP0312.COD_MOTIVO%TYPE default null)
IS
  vDataAdm     DATE;
  vDataResc    DATE;
  vDataIniAnt  DATE;
  vDataFimAnt  DATE;

  vDataFim     DATE;

BEGIN
  IF pOperacao NOT IN ('I', 'A', 'E') THEN
    RAISE_APPLICATION_ERROR(-20001, '"Operação" inválida!#OPERACAO');
  END IF;

  SELECT CT.DATA_INICIO, CT.DATA_FIM, 
         CO.DATA_INICIO AS DATA_INI_ANT,
         CO.DATA_FIM    AS DATA_FIM_ANT
    INTO vDataAdm, vDataResc, vDataIniAnt, vDataFimAnt
  FROM (SELECT COD_CONTRATO, DATA_INICIO, DATA_FIM
        FROM RHFP0312 CO
        WHERE CO.COD_CONTRATO = pCOD_CONTRATO
          AND CO.DATA_INICIO  = (SELECT MAX(DATA_INICIO) FROM RHFP0312 WHERE COD_CONTRATO = pCOD_CONTRATO)  
       ) CO,
       RHFP0300 CT
  WHERE CT.COD_CONTRATO = pCOD_CONTRATO 
    AND CO.COD_CONTRATO (+) = CT.COD_CONTRATO; 
  
  -- Validações
  IF pOperacao = 'I' THEN
    IF pDATA_INICIO IS NULL THEN -- validação YSHI1001
       RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser informada.#DATA_INICIO');
    ELSIF pDATA_INICIO = vDataIniAnt THEN
      RAISE_APPLICATION_ERROR(-20001, '"Data Início" inváilda, pois já existe".#DATA_INICIO');
    ELSIF pDATA_INICIO > TO_DATE('31/12/2999', 'DD/MM/YYYY') THEN -- YSHI1001
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser menor que "31/12/2999"!#DATA_INICIO');
    ELSIF (pCOD_SINDICATO IS NULL) OR (pCOD_SINDICATO < 1) THEN --início das validações Fpct0110
      RAISE_APPLICATION_ERROR(-20001, 'O "Sindicato" deve ser informado.#COD_SINDICATO');
    ELSIF (pCOD_MOTIVO IS NULL) OR (pCOD_MOTIVO < 1) THEN 
      RAISE_APPLICATION_ERROR(-20001, 'O "Motivo" deve ser informado.#COD_MOTIVO');
    ELSIF vDataAdm > pDATA_INICIO THEN
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser igual ou posterior a Admissão do Contrato.#DATA_INICIO');
    ELSIF pDATA_INICIO > vDataResc THEN
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser anterior a Rescisão do Contrato.#DATA_INICIO');
    ELSIF pDATA_INICIO < vDataIniAnt THEN
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser posterior a data anterior, que é: '||to_char(vDataIniAnt, 'DD/MM/YYYY')||'.#DATA_INICIO');
    END IF;
  ELSIF pOperacao = 'A' THEN
    IF (pCOD_MOTIVO IS NULL) OR (pCOD_MOTIVO < 1) THEN 
      RAISE_APPLICATION_ERROR(-20001, 'O "Motivo" deve ser informado.#COD_MOTIVO');
    END IF;
  ELSIF pOperacao = 'E' THEN
    IF pDATA_INICIO <> vDataIniAnt THEN
      RAISE_APPLICATION_ERROR(-20001, 'Só pode ser excluído o "ultimo" registro, que é: '||to_char(vDataIniAnt, 'DD/MM/YYYY')||'.#DATA_INICIO');
    END IF;
  END IF;
    
  IF (pOperacao IN ('I', 'E')) /*AND (pHistorico = 'N')*/ THEN
    vDataFim := TO_DATE('31/12/2999', 'DD/MM/YYYY');
  END IF; 

  -- Efetiva a operação correspondente no BD.
  IF pOperacao = 'I' THEN  
    IF vDataIniAnt IS NOT NULL THEN
      UPDATE RHFP0312 SET DATA_FIM = pDATA_INICIO - 1
      WHERE COD_CONTRATO = pCOD_CONTRATO
        AND DATA_INICIO  = vDataIniAnt;   
    END IF; 
    INSERT INTO RHFP0312 (COD_CONTRATO, DATA_INICIO, DATA_FIM, COD_SINDICATO, COD_MOTIVO, 
        IND_CONT_SINDICAL, IND_MENS_SINDICATO, IND_CONT_ADMISSAO, IND_MANDATO_SIND) 
    VALUES (pCOD_CONTRATO, pDATA_INICIO, vDataFim, pCOD_SINDICATO, pCOD_MOTIVO,
          'N', 'N', 'N', 'N');
  ELSIF pOperacao = 'A' THEN
    UPDATE RHFP0312 SET COD_MOTIVO = pCOD_MOTIVO
    WHERE COD_CONTRATO = pCOD_CONTRATO
      AND DATA_INICIO  = pDATA_INICIO;
  ELSIF pOperacao = 'E' THEN
    DELETE RHFP0312
    WHERE COD_CONTRATO = pCOD_CONTRATO
      AND DATA_INICIO  = pDATA_INICIO;
      
    UPDATE RHFP0312 SET DATA_FIM = vDataFim
    WHERE COD_CONTRATO = pCOD_CONTRATO
      AND DATA_INICIO  = (SELECT MAX(DATA_INICIO) FROM RHFP0312 WHERE COD_CONTRATO = pCOD_CONTRATO AND DATA_INICIO < pDATA_INICIO);   
  END IF;
END;  

END;
/

CREATE OR REPLACE PACKAGE PK_RHBAS IS
PROCEDURE ADM_CONTRATO(
  pCOD_CONTRATO IN OUT RHFP0300.COD_CONTRATO%TYPE,
  pCOD_FUNC            RHFP0300.COD_FUNC%TYPE default null,
  pDATA_INICIO         DATE default null,
  pCOD_CATEGORIA_TRAB  RHFP0300.COD_CATEGORIA_TRAB%TYPE default null,
  pCOD_FORMA_PGTO      RHFP0300.COD_FORMA_PGTO%TYPE default null, 
  pCOD_BCO_PGTO        RHFP0300.COD_BCO_PGTO%TYPE default null, 
  pCOD_AGE_PGTO        RHFP0300.COD_AGE_PGTO%TYPE default null,
  pNRO_CONTA_PGTO      RHFP0300.NRO_CONTA_PGTO%TYPE default null,
  pTIPO_PIX            RHFP0300.TIPO_PIX%TYPE default null,
  pCHAVE_PIX           RHFP0300.CHAVE_PIX%TYPE default null,
  pCOD_ORGANOGRAMA     RHFP0310.COD_ORGANOGRAMA%TYPE default null,
  pCOD_CLH             RHFP0340.COD_CLH%TYPE default null,
  pCOD_INF_SALARIAL    RHFP0608.COD_INF_SALARIAL%TYPE default null,
  pCOD_TAB_SALARIAL    RHFP0608.COD_TAB_SALARIAL%TYPE default null,
  pCOD_FAIXA           RHFP0608.COD_FAIXA%TYPE default null,
  pCOD_NIVEL           RHFP0608.COD_NIVEL%TYPE default null,
  pVALOR_SALARIO       RHFP0608.VALOR_SALARIO%TYPE default null,
  pTIPO_SALARIO        RHFP0608.TIPO_SALARIO%TYPE default null,
  pCOD_TURNO           RHAF1119.COD_TURNO%TYPE default null,
  pCOD_HORAS_BASE      RHFP0307.COD_HORAS_BASE%TYPE default null,
  pCOD_SINDICATO       RHFP0312.COD_SINDICATO%TYPE default null,
  pNUM_FICHA_REG       RHFP0344.NUM_FICHA_REGISTRO%TYPE default null,
  pCOD_TP_CONTRATO     RHFP0304.COD_TP_CONTRATO%TYPE default null,
  pCOD_LINHA           RHFP0384.COD_LINHA%TYPE default null,
  pTIPO_VT_CONTRATO    RHFP0384.TIPOS_VALES_CONTRATO%TYPE default null,
  pVALOR_VT            NUMBER default null,	
  pCOD_VALE            RHFP0263.COD_VALE%TYPE default null,
  pTIPO_VR_CONTRATO    RHFP0263.TIPO_VALES_CONTRATO%TYPE default null,
  pVALOR_VR            NUMBER default null,
  pCONF_DATA           CHAR DEFAULT 'N',
  pCONF_16             CHAR DEFAULT 'N',
  pCONF_18             CHAR DEFAULT 'N',
  pCONF_CONTA          CHAR DEFAULT 'N',
  pCONF_CT             CHAR DEFAULT 'N',
  pCONF_TERC           CHAR DEFAULT 'N'
);

PROCEDURE GRAVA_DEP(
  pCOD_PESSOA  IN OUT PESSOA.COD_PESSOA%TYPE,
  pCOD_FUNC	   RHFP0202.COD_FUNC%TYPE default null,
  pNOME_PESSOA PESSOA.NOME_PESSOA%TYPE default null,
  pCPF	        FISICA.CPF%TYPE default null,
  pDT_NASC	    FISICA.DT_NASC%TYPE default null,
  pSEXO	       FISICA.SEXO%TYPE default null,
  pDATA_INICIO	RHFP0202.DATA_INICIO%TYPE default null,
  pDATA_FIM	   RHFP0202.DATA_FIM%TYPE default null,
  pCOD_GRAU_PARENTESCO	RHFP0202.COD_GRAU_PARENTESCO%TYPE default null,
  pCOD_GRAU_INSTRUCAO	 RHFP0202.COD_GRAU_INSTRUCAO%TYPE default null,
  pTIPO_DEPENDENTE	    RHFP0202.TIPO_DEPENDENTE%TYPE default null,
  pIRF	                RHFP0202.IRF%TYPE default 'N',
  pSAL_FAMILIA	        RHFP0202.SAL_FAMILIA%TYPE default 'N',
  pIND_AUX_CRECHE     	RHFP0202.IND_AUX_CRECHE%TYPE default 'N',
  pIND_SEGURO_VIDA  	  RHFP0202.IND_SEGURO_VIDA%TYPE default 'N',
  pIND_AUX_ESCOLAR	    RHFP0202.IND_AUX_ESCOLAR%TYPE default 'N',
  pIND_ASSOC_FUNC	     RHFP0202.IND_ASSOC_FUNC%TYPE default 'N',
  pCOD_PESSOA_PENSAO	  RHFP0202.COD_PESSOA_PENSAO%TYPE default null,
  pCONF_NOME            CHAR DEFAULT 'N'
);

PROCEDURE GRAVA_FUNC_PENSAO(
  pCOD_PESSOA  IN OUT PESSOA.COD_PESSOA%TYPE,
  pCOD_FUNC	   RHFP0205.COD_FUNC%TYPE default null,
  pNOME_PESSOA PESSOA.NOME_PESSOA%TYPE default null,
  pCPF	       FISICA.CPF%TYPE default null,
  pDT_NASC	   FISICA.DT_NASC%TYPE default null,
  pSEXO	       FISICA.SEXO%TYPE default null,
  pDATA_INICIO RHFP0205.DATA_INICIO%TYPE default null,
  pDATA_FIM	   RHFP0205.DATA_FIM%TYPE default null,
  pNRO_DEPENDENTES    RHFP0205.NRO_DEPENDENTES%TYPE default null,
  pCOD_FORMA_PGTO     RHFP0205.COD_FORMA_PGTO%TYPE default null,
  pCOD_BCO_PGTO       RHFP0205.COD_BCO_PGTO%TYPE default null,
  pCOD_AGE_PGTO       RHFP0205.COD_AGE_PGTO%TYPE default null,
  pNRO_CONTA_PGTO     RHFP0205.NRO_CONTA_PGTO%TYPE default null,
  pTIPO_PENSAO        RHFP0205.TIPO_PENSAO%TYPE default null,
  pCOD_PERCENTUAL     RHFP0205.COD_PERCENTUAL%TYPE default null,
  pVALOR              RHFP0205.VALOR%TYPE default null,
  pQTDE_SAL_MINIMOS   RHFP0205.QTDE_SAL_MINIMOS%TYPE default null,
  pCOD_VD_PENSAO      RHFP0205.COD_VD_PENSAO%TYPE default null,
  pCOD_VD_SFAMILIA    RHFP0205.COD_VD_SFAMILIA%TYPE default null,
  pIND_DEDUZ_IRF      RHFP0205.IND_DEDUZ_IRF%TYPE default null,
  pCOD_VD_PENSAO_13S  RHFP0205.COD_VD_PENSAO_13S%TYPE default null,
  pCOD_VD_PENSAO_FER  RHFP0205.COD_VD_PENSAO_FER%TYPE default null,
  pCOD_VD_PENSAO_OUT  RHFP0205.COD_VD_PENSAO_OUT%TYPE default null,
  pIND_VLR_MIN_PENSAO RHFP0205.IND_VLR_MIN_PENSAO%TYPE default null,
  pVLR_MIN_PENSAO     RHFP0205.VLR_MIN_PENSAO%TYPE default null,
  pCOD_COMP_SAL       RHFP0205.COD_COMP_SAL%TYPE default null,
  pCOD_COMP_13S       RHFP0205.COD_COMP_13S%TYPE default null,
  pCOD_COMP_FER       RHFP0205.COD_COMP_FER%TYPE default null,
  pCOD_COMP_OUT       RHFP0205.COD_COMP_OUT%TYPE default null,
  pCOD_VD_PENSAO_RRA  RHFP0205.COD_VD_PENSAO_RRA%TYPE default null,
  pCOD_VD_PENSAO_PLR  RHFP0205.COD_VD_PENSAO_PLR%TYPE default null,
  pTIPO_PIX           RHFP0205.TIPO_PIX%TYPE default null,
  pCHAVE_PIX          RHFP0205.CHAVE_PIX%TYPE default null,
  pCOD_RESPONSAVEL    RHFP0205.COD_RESPONSAVEL%TYPE default null,
  pCONF_NOME          CHAR DEFAULT 'N'
);

PROCEDURE GRAVA_FUNC(
  pCOD_PESSOA  IN OUT PESSOA.COD_PESSOA%TYPE,
  pNOME_PESSOA PESSOA.NOME_PESSOA%TYPE default null,
  pCPF	        FISICA.CPF%TYPE default null,
  pDT_NASC	    FISICA.DT_NASC%TYPE default null,
  pNOME_SOCIAL	FISICA.NOME_SOCIAL%TYPE default null,
  pAPELIDO	    FISICA.APELIDO%TYPE default null,
  pSEXO	       FISICA.SEXO%TYPE default null,
  pTIPO_SANGUE	FISICA.TIPO_SANGUE%TYPE default null,
  pFATOR_RH	   FISICA.FATOR_RH%TYPE default null,
  pNRO_CARTAO_SUS	FISICA.NRO_CARTAO_SUS%TYPE default null,
  pCEP	        FISICA.CEP%TYPE default null,
  pCOD_UF	     FISICA.COD_UF%TYPE default null,
  pCOD_MUNIC  	FISICA.COD_MUNIC%TYPE default null,
  pTIPO_LOGRA	 FISICA.TIPO_LOGRA%TYPE default null,
  pCOD_LOGRA	  FISICA.COD_LOGRA%TYPE default null,
  pCOD_BAIRRO	 FISICA.COD_BAIRRO%TYPE default null,
  pNUMERO	     FISICA.NUMERO%TYPE default null,
  pCOMPLEMENTO	FISICA.COMPLEMENTO%TYPE default null,
  pDDD	        FISICA.DDD%TYPE default null,
  pFONE	       FISICA.FONE%TYPE default null,
  pDDD_FONE_CEL	FISICA.DDD_FONE_CEL%TYPE default null,
  pFONE_CEL	   FISICA.FONE_CEL%TYPE default null,
  pFONE_ALTER	 FISICA.FONE_ALTER%TYPE default null,
  pRAMAL	      FISICA.RAMAL%TYPE default null,
  pEMAIL	      FISICA.EMAIL%TYPE default null,
  pEMAIL_ALTER	FISICA.EMAIL_ALTER%TYPE default null,
  pCOD_PAIS_NASCTO	     RHFP0200.COD_PAIS_NASCTO%TYPE default null,
  pCOD_MUNIC_NASCIMENTO	RHFP0200.COD_MUNIC_NASCIMENTO%TYPE default null,
  pCOD_UF_NASCIMENTO	   RHFP0200.COD_UF_NASCIMENTO%TYPE default null,
  pCOD_NACIONALIDADE	   RHFP0200.COD_NACIONALIDADE%TYPE default null,
  pCOD_GRAU_INSTRUCAO	  RHFP0200.COD_GRAU_INSTRUCAO%TYPE default null,
  pCOD_ESTADO_CIVIL	    RHFP0200.COD_ESTADO_CIVIL%TYPE default null,
  pCOD_RACA_COR	        RHFP0200.COD_RACA_COR%TYPE default null,
  pCOD_PESSOA_PAI	      RHFP0200.COD_PESSOA_PAI%TYPE default null,
  pCOD_PESSOA_MAE	      RHFP0200.COD_PESSOA_MAE%TYPE default null,
  pCOD_PESSOA_CONJUGE	  RHFP0200.COD_PESSOA_CONJUGE%TYPE default null,
  pDATA_CASAMENTO	      RHFP0200.DATA_CASAMENTO%TYPE default null,
  pNRO_PIS_PASEP	       RHFP0200.NRO_PIS_PASEP%TYPE default null,
  pDATA_PIS_PASEP	      RHFP0200.DATA_PIS_PASEP%TYPE default null,
  pNRO_CONT_INDIVIDUAL	 RHFP0200.NRO_CONT_INDIVIDUAL%TYPE default null,
  pDATA_CONT_INDIVIDUAL	RHFP0200.DATA_CONT_INDIVIDUAL%TYPE default null,
  pNRO_CTPS	            RHFP0200.NRO_CTPS%TYPE default null,
  pNRO_SERIE_CTPS	      RHFP0200.NRO_SERIE_CTPS%TYPE default null,
  pDATA_EXP_CTPS	       RHFP0200.DATA_EXP_CTPS%TYPE default null,
  pCOD_UF_CTPS	         RHFP0200.COD_UF_CTPS%TYPE default null,
  pCOD_TIPO_APOSENT    	RHFP0200.COD_TIPO_APOSENT%TYPE default null,
  pDATA_APOSENTADORIA	  RHFP0200.DATA_APOSENTADORIA%TYPE default null,
  pNRO_BENEFICIO_INSS	  RHFP0200.NRO_BENEFICIO_INSS%TYPE default null,
  pCOD_DEFICIENCIA	     RHFP0200.COD_DEFICIENCIA%TYPE default null,
  pIND_DEF_MOTORA	      RHFP0200.IND_DEF_MOTORA%TYPE default 'N',
  pIND_DEF_VISUAL	      RHFP0200.IND_DEF_VISUAL%TYPE default 'N',
  pIND_DEF_AUDITIVA     RHFP0200.IND_DEF_AUDITIVA%TYPE default 'N',
  pIND_DEF_MENTAL	      RHFP0200.IND_DEF_MENTAL%TYPE default 'N',
  pIND_DEF_INTELEC	     RHFP0200.IND_DEF_INTELEC%TYPE default 'N',
  pINFO_COTA	           RHFP0200.INFO_COTA%TYPE default null,
  pDETALHE_DEFICIENCIA	 RHFP0200.DETALHE_DEFICIENCIA%TYPE default null,
  pTMP_RESID	           RHFP0200.TMP_RESID%TYPE default null,
  pCOND_ING	            RHFP0200.COND_ING%TYPE default null,
  pCONF_NOME            CHAR DEFAULT 'N',
  pCONF_CPF             CHAR DEFAULT 'N'
);

PROCEDURE PROG_RESCISAO(
  pCOD_CONTRATO       RHFP0300.COD_CONTRATO%TYPE,
  pDATA_RESCISAO	     RHFP0350.DATA_RESCISAO%TYPE default null,
  pCOD_CAUSA_DEMISSAO	RHFP0350.COD_CAUSA_DEMISSAO%TYPE default null,
  pDATA_PAGAMENTO	    RHFP0350.DATA_PAGAMENTO%TYPE default null,
  pNRO_PROC_TRAB	     RHFP0350.NRO_PROC_TRAB%TYPE default null,
  pDIAS_ESTABILIDADE	 RHFP0350.DIAS_ESTABILIDADE%TYPE default null,
  pDATA_FIM_ESTAB	    RHFP0350.DATA_FIM_ESTAB%TYPE default null,
  pAVISO_INDENIZADO   RHFP0350.AVISO_INDENIZADO%TYPE default null,
  pDIAS_AV_TOTAL	     RHFP0350.DIAS_AV_TOTAL%TYPE default null,
  pDATA_AVISO_PREVIO	 RHFP0350.DATA_AVISO_PREVIO%TYPE default null,
  pDIAS_AVISO_PREVIO	 RHFP0350.DIAS_AVISO_PREVIO%TYPE default null,
  pDIAS_AV_TRAB	      RHFP0350.DIAS_AV_TRAB%TYPE default 0,
  pDATA_FIM_AVISO    	RHFP0350.DATA_FIM_AVISO%TYPE default null,
  pDIAS_AV_DISP      	RHFP0350.DIAS_AV_DISP%TYPE default null,
  pDIAS_AV_FUNC      	RHFP0350.DIAS_AV_FUNC%TYPE default null,
  pCOD_OPERADOR      	RHFP0350.COD_OPERADOR%TYPE default null,
  pCONF_ANIV_EMP      CHAR DEFAULT 'N',
  pCONF_ANIV_FU       CHAR DEFAULT 'N',
  pCONF_REC_TRAB      CHAR DEFAULT 'N',
  pCONF_MULTA         CHAR DEFAULT 'N',
  pCONF_FER_PROG      CHAR DEFAULT 'N',
  pCONF_FER_CALC      CHAR DEFAULT 'N',
  pCONF_AV_TR30       CHAR DEFAULT 'N',
  pCONF_ESTAB         CHAR DEFAULT 'N'
);

PROCEDURE PROG_RESCISAO_EXC(
  pCOD_CONTRATO  RHFP0300.COD_CONTRATO%TYPE,
  pCONF_BN       CHAR DEFAULT 'N',
  pCONF_VT       CHAR DEFAULT 'N',
  pCONF_AF       CHAR DEFAULT 'N',
  pCONF_PS       CHAR DEFAULT 'N',
  pCONF_RF       CHAR DEFAULT 'N',
  pCONF_BH       CHAR DEFAULT 'N'
);  
END;
/

CREATE OR REPLACE PACKAGE BODY PK_RHBAS IS
PROCEDURE ADM_CONTRATO(
  pCOD_CONTRATO IN OUT RHFP0300.COD_CONTRATO%TYPE,
  pCOD_FUNC            RHFP0300.COD_FUNC%TYPE default null,
  pDATA_INICIO         DATE default null,
  pCOD_CATEGORIA_TRAB  RHFP0300.COD_CATEGORIA_TRAB%TYPE default null,
  pCOD_FORMA_PGTO      RHFP0300.COD_FORMA_PGTO%TYPE default null, 
  pCOD_BCO_PGTO        RHFP0300.COD_BCO_PGTO%TYPE default null, 
  pCOD_AGE_PGTO        RHFP0300.COD_AGE_PGTO%TYPE default null,
  pNRO_CONTA_PGTO      RHFP0300.NRO_CONTA_PGTO%TYPE default null,
  pTIPO_PIX            RHFP0300.TIPO_PIX%TYPE default null,
  pCHAVE_PIX           RHFP0300.CHAVE_PIX%TYPE default null,
  pCOD_ORGANOGRAMA     RHFP0310.COD_ORGANOGRAMA%TYPE default null,
  pCOD_CLH             RHFP0340.COD_CLH%TYPE default null,
  pCOD_INF_SALARIAL    RHFP0608.COD_INF_SALARIAL%TYPE default null,
  pCOD_TAB_SALARIAL    RHFP0608.COD_TAB_SALARIAL%TYPE default null,
  pCOD_FAIXA           RHFP0608.COD_FAIXA%TYPE default null,
  pCOD_NIVEL           RHFP0608.COD_NIVEL%TYPE default null,
  pVALOR_SALARIO       RHFP0608.VALOR_SALARIO%TYPE default null,
  pTIPO_SALARIO        RHFP0608.TIPO_SALARIO%TYPE default null,
  pCOD_TURNO           RHAF1119.COD_TURNO%TYPE default null,
  pCOD_HORAS_BASE      RHFP0307.COD_HORAS_BASE%TYPE default null,
  pCOD_SINDICATO       RHFP0312.COD_SINDICATO%TYPE default null,
  pNUM_FICHA_REG       RHFP0344.NUM_FICHA_REGISTRO%TYPE default null,
  pCOD_TP_CONTRATO     RHFP0304.COD_TP_CONTRATO%TYPE default null,
  pCOD_LINHA           RHFP0384.COD_LINHA%TYPE default null,
  pTIPO_VT_CONTRATO    RHFP0384.TIPOS_VALES_CONTRATO%TYPE default null,
  pVALOR_VT            NUMBER default null,	
  pCOD_VALE            RHFP0263.COD_VALE%TYPE default null,
  pTIPO_VR_CONTRATO    RHFP0263.TIPO_VALES_CONTRATO%TYPE default null,
  pVALOR_VR            NUMBER default null,
  pCONF_DATA           CHAR DEFAULT 'N',
  pCONF_16             CHAR DEFAULT 'N',
  pCONF_18             CHAR DEFAULT 'N',
  pCONF_CONTA          CHAR DEFAULT 'N',
  pCONF_CT             CHAR DEFAULT 'N',
  pCONF_TERC           CHAR DEFAULT 'N'
) IS
  vCodVinc RHFP0300.COD_VINCULO_EMPREG%TYPE := 10; -- obter o vínculo a partir da Categoria
  vQTD_DIA NUMBER := NULL;
  vQTD_MES NUMBER := NULL;
  vCOD_VC  NUMBER := NULL;
  vNome    VARCHAR2(100);
  vCont    NUMBER;
  vDataNasc  DATE;
  vVincRelac VARCHAR2(20);
  
  CURSOR cDados IS
    SELECT (SELECT NVL(MIN(COD_MOTIVO), 1) FROM RHFP0323 WHERE COD_TIPO_MOTIVO = 13 AND IND_ADMISSAO = 'S') AS COD_MOT_ORG,
           (SELECT MIN(COD_NIVEL2) FROM RHFP0401 WHERE COD_ORGANOGRAMA = pCOD_ORGANOGRAMA AND pDATA_INICIO BETWEEN DATA_INICIO AND DATA_FIM) AS COD_EMPRESA,
           (SELECT NVL(MIN(COD_MOTIVO), 1) FROM RHFP0323 WHERE COD_TIPO_MOTIVO = 14 AND IND_ADMISSAO = 'S') AS COD_MOT_CAR,
           (SELECT NVL(MIN(COD_MOTIVO), 1) FROM RHFP0323 WHERE COD_TIPO_MOTIVO = 22 AND IND_ADMISSAO = 'S') AS COD_MOT_SAL,
           (SELECT NVL(MIN(COD_MOTIVO), 1) FROM RHFP0323 WHERE COD_TIPO_MOTIVO = 9 AND IND_ADMISSAO = 'S') AS COD_MOT_TUR,
           (SELECT NVL(MIN(COD_MOTIVO), 1) FROM RHFP0323 WHERE COD_TIPO_MOTIVO = 8 AND IND_ADMISSAO = 'S') AS COD_MOT_CH,
           (SELECT NVL(MIN(COD_MOTIVO), 1) FROM RHFP0323 WHERE COD_TIPO_MOTIVO = 15 AND IND_ADMISSAO = 'S') AS COD_MOT_SIN,
           (SELECT NVL(MIN(COD_MOTIVO), 1) FROM RHFP0323 WHERE COD_TIPO_MOTIVO = 23 AND IND_ADMISSAO = 'S') AS COD_MOT_FR
    FROM DUAL;

BEGIN
  IF (pCOD_FUNC IS NULL) OR (pCOD_FUNC < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Colaborador" deve ser informado.#COD_FUNC');
  ELSIF (pDATA_INICIO IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A "Data de Admissão" deve ser informada.#DATA_INICIO');
  ELSIF (pCONF_DATA = 'N') AND (ABS(SYSDATE - pDATA_INICIO) > 30) THEN
    RAISE_APPLICATION_ERROR(-20002,'A diferença entre a Data Atual e a Data de Admissão é SUPERIOR a 30 dias.'||CHR(13)||CHR(10)||'Tem CERTEZA que deseja continuar?#CONF_DATA');
  ELSIF (pCOD_CATEGORIA_TRAB IS NULL) OR (pCOD_CATEGORIA_TRAB < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A "Categoria do Trabalhador" deve ser informada.#COD_CATEGORIA_TRAB');
  ELSIF (pCOD_FORMA_PGTO IS NULL) OR (pCOD_FORMA_PGTO < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A "Forma de Pagamento" deve ser informada.#COD_FORMA_PGTO');
  ELSIF (pCOD_FORMA_PGTO = 2) AND (pCOD_BCO_PGTO IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Banco" deve ser informado.#COD_BCO_PGTO');
  ELSIF (pCOD_FORMA_PGTO = 2) AND (pCOD_AGE_PGTO IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A "Agência" deve ser informada.#COD_AGE_PGTO');
  ELSIF (pCOD_FORMA_PGTO = 2) AND (pNRO_CONTA_PGTO IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Número da Conta" deve ser informado.#NRO_CONTA_PGTO');
  ELSIF (pCOD_FORMA_PGTO = 7) AND (pTIPO_PIX IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Tipo da Chave PIX" deve ser informado.#TIPO_PIX');
  ELSIF (pCOD_FORMA_PGTO = 7) AND (pCHAVE_PIX IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A "Chave PIX" deve ser informada.#CHAVE_PIX');
  ELSIF (pCOD_FORMA_PGTO = 2) AND (pCONF_CONTA = 'N') THEN
    SELECT COUNT(COD_CONTRATO) AS TOT
      INTO vCont   
    FROM RHFP0300 CT
    WHERE COD_FUNC <> pCOD_FUNC
      AND COD_BCO_PGTO = pCOD_BCO_PGTO
      AND COD_AGE_PGTO = pCOD_AGE_PGTO
      AND NRO_CONTA_PGTO = pNRO_CONTA_PGTO;
    IF vCont > 0 THEN
      RAISE_APPLICATION_ERROR(-20002,'Já existe outro Colaborador com a mesma combinação Banco/Agência/Conta.'||CHR(13)||CHR(10)||'Tem CERTEZA que deseja continuar?#CONF_CONTA');
    END IF;
  END IF;
  
  SELECT MAX(DATA_NASCIMENTO)
    INTO vDataNasc
  FROM RHFP0200
  WHERE COD_FUNC = pCOD_FUNC;
  IF vDataNasc IS NULL THEN
    RAISE_APPLICATION_ERROR(-20001, '"Colaborador" inválido.#COD_FUNC');
  ELSIF ADD_MONTHS(vDataNasc, 120) >= pDATA_INICIO THEN -- Não permitir admissão com menos de 10 anos.
    RAISE_APPLICATION_ERROR(-20001, '"Colaborador" com Data de Nascimento inválida em relação a Data de Admissão.#COD_FUNC');
  END IF;

  SELECT NOME_CATEGORIA_TRAB, COD_VINC_RELAC
    INTO vNome, vVincRelac
  FROM RHFP0128
  WHERE COD_CATEGORIA_TRAB = pCOD_CATEGORIA_TRAB;
  IF (ADD_MONTHS(vDataNasc, 16 * 12) >= pDATA_INICIO) AND (pCONF_16 = 'N') THEN
    RAISE_APPLICATION_ERROR(-20002,'"Colaborador" menor de 16 anos!'||CHR(13)||CHR(10)||'Categoria: '||vNome||CHR(13)||CHR(10)||'Tem CERTEZA que deseja continuar?#CONF_16');
  ELSIF (ADD_MONTHS(vDataNasc, 18 * 12) >= pDATA_INICIO) AND (pCONF_18 = 'N') AND (pCONF_16 = 'N') THEN -- Se já aceitou que é menor de 16 anos, não exibir novamente.
    RAISE_APPLICATION_ERROR(-20002,'"Colaborador" menor de 18 anos!'||CHR(13)||CHR(10)||'Categoria: '||vNome||CHR(13)||CHR(10)||'Tem CERTEZA que deseja continuar?#CONF_18');
  ELSIF (pCONF_TERC = 'N') AND (vVincRelac = 'TERCEIROS') THEN 
    RAISE_APPLICATION_ERROR(-20002,'Esta CATEGORIA é normalmente utilizada no módulo de TERCEIROS E AUTÔNOMOS!'||CHR(13)||CHR(10)||'Tem CERTEZA que deseja continuar?#CONF_TERC');
  END IF;

  IF pCOD_CONTRATO = 0 THEN --Inclusão
    SELECT COUNT(*)
      INTO vCont
    FROM RHFP0401 EST, RHFP0400 ORG
    WHERE ORG.COD_ORGANOGRAMA = pCOD_ORGANOGRAMA
      AND EST.COD_ORGANOGRAMA = ORG.COD_ORGANOGRAMA
      AND pDATA_INICIO BETWEEN EST.DATA_INICIO AND EST.DATA_FIM
      AND EST.IND_LANCAMENTO = 'S'
      AND (EST.DATA_FIM = TO_DATE('31/12/2999', 'DD/MM/YYYY')
           OR EXISTS (SELECT COD_ORGANOGRAMA
                      FROM RHFP0401
                      WHERE COD_ORGANOGRAMA = EST.COD_ORGANOGRAMA
                        AND DATA_FIM = TO_DATE('31/12/2999', 'DD/MM/YYYY')
                     )
          );
    IF vCont < 1 THEN
      RAISE_APPLICATION_ERROR(-20001, '"Organograma" inválido.#COD_ORGANOGRAMA');
    END IF;

    SELECT COUNT(*)
      INTO vCont
    FROM RHFP0502 EST, RHFP0500 CLH
    WHERE CLH.COD_CLH = pCOD_CLH
      AND EST.COD_CLH = CLH.COD_CLH
      AND pDATA_INICIO BETWEEN EST.DATA_INICIO AND EST.DATA_FIM
      AND EST.IND_LANCAMENTO = 'S'
      AND (EST.DATA_FIM = TO_DATE('31/12/2999', 'DD/MM/YYYY')
           OR EXISTS (SELECT COD_CLH
                      FROM RHFP0502
                      WHERE COD_CLH = EST.COD_CLH
                        AND DATA_FIM = TO_DATE('31/12/2999', 'DD/MM/YYYY')
                     )
          );
    IF vCont < 1 THEN
      RAISE_APPLICATION_ERROR(-20001, '"Cargo" inválido.#COD_CLH');
    END IF;
    
    SELECT COUNT(*)
      INTO vCont
    FROM RHAF1145 
    WHERE COD_TURNO = pCOD_TURNO
      AND IND_ATIVO = 'S';
    IF vCont < 1 THEN
      RAISE_APPLICATION_ERROR(-20001, '"Turno" inválido.#COD_TURNO');
    END IF;

    SELECT COUNT(*)
      INTO vCont
    FROM RHFP0329
    WHERE COD_SINDICATO = pCOD_SINDICATO;
    IF vCont < 1 THEN
      RAISE_APPLICATION_ERROR(-20001, '"Sindicato" inválido.#COD_SINDICATO');
    END IF;

    IF pCOD_LINHA IS NOT NULL THEN
      SELECT COUNT(*)
        INTO vCont
      FROM RHFP0380
      WHERE COD_LINHA = pCOD_LINHA;
      IF vCont < 1 THEN
        RAISE_APPLICATION_ERROR(-20001, '"Linha do VT" inválida.#COD_LINHA');
      END IF;
    END IF;

    IF pCOD_VALE IS NOT NULL THEN
      SELECT COUNT(*)
        INTO vCont
      FROM RHFP0261
      WHERE COD_VALE = pCOD_VALE;
      IF vCont < 1 THEN
        RAISE_APPLICATION_ERROR(-20001, '"Vale Refeição" inválido.#COD_VALE');
      END IF;

      IF pTIPO_VR_CONTRATO = 'V' THEN
        SELECT COUNT(*)
          INTO vCont
        FROM RHFP1033
        WHERE COD_VC = pVALOR_VR;
        IF vCont < 1 THEN
          RAISE_APPLICATION_ERROR(-20001, 'A "VC" informada é inválida.#VALOR_VR');
        END IF;
      END IF;
    END IF;  
  
    IF pCONF_CT = 'N' THEN
      FOR vCT IN (SELECT COD_CONTRATO, DATA_INICIO
                  FROM RHFP0300
                  WHERE COD_FUNC = pCOD_FUNC
                    AND (DATA_FIM IS NULL OR DATA_FIM >= pDATA_INICIO) 
                 ) LOOP
        RAISE_APPLICATION_ERROR(-20002,'Este Colaborador já possui outro contrato vigente!'||CHR(13)||CHR(10)||'Contrato: '||vCT.COD_CONTRATO||CHR(13)||CHR(10)||'Admissão: '||to_char(vCT.DATA_INICIO, 'dd/mm/yyyy')||CHR(13)||CHR(10)||'Tem CERTEZA que deseja continuar?#CONF_CT');
      END LOOP;
    END IF;
  
    SELECT NVL(MAX(COD_CONTRATO), 0) + 1
      INTO pCOD_CONTRATO
    FROM RHFP0300;

    INSERT INTO RHFP0300 (COD_CONTRATO, COD_FUNC, DATA_INICIO, COD_VINCULO_EMPREG, COD_TIPO_ADMISSAO, 
      COD_OPC_PGTO, COD_FORMA_PGTO, COD_BCO_PGTO, COD_AGE_PGTO, NRO_CONTA_PGTO, DATA_OPCAO_FGTS,  
      MAO_OBRA, COD_SITUACAO, COD_CATEGORIA_TRAB, IND_VINCULO_MULT, 
      IND_AGENTES_NOCIVOS, IND_CONT_PREV, DATA_AVANCO, IND_SEGURO_DESEMP, DATA_INCLUSAO, TIPO_PIX, CHAVE_PIX)
    VALUES
     (pCOD_CONTRATO, pCOD_FUNC, pDATA_INICIO, vCodVinc, 1, 
      1, pCOD_FORMA_PGTO, pCOD_BCO_PGTO, pCOD_AGE_PGTO, pNRO_CONTA_PGTO, pDATA_INICIO,
      'D', 1, pCOD_CATEGORIA_TRAB, 'N', 
      'N', 'N', pDATA_INICIO, 'N', sysdate, pTIPO_PIX, pCHAVE_PIX);

    FOR vDados IN cDados LOOP
      INSERT INTO RHFP0310 (COD_CONTRATO, DATA_INICIO, DATA_FIM, COD_ORGANOGRAMA, COD_MOTIVO, 
          COD_NIVEL2, SEQ, DATA_INCLUSAO) VALUES
        (pCOD_CONTRATO, pDATA_INICIO, TO_DATE('31/12/2999', 'DD/MM/YYYY'), pCOD_ORGANOGRAMA, vDados.COD_MOT_ORG, 
         vDados.COD_EMPRESA, 1, SYSDATE);

      INSERT INTO RHFP0340 (COD_CONTRATO, DATA_INICIO, DATA_FIM, COD_CLH, COD_MOTIVO) VALUES
         (pCOD_CONTRATO, pDATA_INICIO, TO_DATE('31/12/2999', 'DD/MM/YYYY'), pCOD_CLH, vDados.COD_MOT_CAR);

      INSERT INTO RHFP0608 (COD_CONTRATO, DATA_INICIO, DATA_FIM, COD_MOTIVO, COD_INF_SALARIAL, COD_TAB_SALARIAL, 
          COD_FAIXA, COD_NIVEL, VALOR_SALARIO, TIPO_SALARIO, IND_SALARIO, DATA_INCLUSAO, IND_CALC_PROP) VALUES
        (pCOD_CONTRATO, pDATA_INICIO, TO_DATE('31/12/2999', 'DD/MM/YYYY'), vDados.COD_MOT_SAL, pCOD_INF_SALARIAL, pCOD_TAB_SALARIAL, 
          pCOD_FAIXA, pCOD_NIVEL, pVALOR_SALARIO, pTIPO_SALARIO, 'N', SYSDATE, 'N');

      INSERT INTO RHAF1119 (COD_CONTRATO, DATA_INICIO, COD_TURNO, DATA_FIM, COD_MOTIVO, TIPO_TURNO, IND_REVEZAMENTO) VALUES
        (pCOD_CONTRATO, pDATA_INICIO, pCOD_TURNO, TO_DATE('31/12/2999', 'DD/MM/YYYY'), vDados.COD_MOT_TUR, 'S', 'N');

      INSERT INTO RHFP0307 (COD_CONTRATO, DATA_INICIO, DATA_FIM, COD_HORAS_BASE, COD_MOTIVO, IND_CALC_PROP) VALUES
        (pCOD_CONTRATO, pDATA_INICIO, TO_DATE('31/12/2999', 'DD/MM/YYYY'), pCOD_HORAS_BASE, vDados.COD_MOT_CH, 'N');

      INSERT INTO RHFP0312 (COD_CONTRATO, DATA_INICIO, DATA_FIM, COD_SINDICATO, COD_MOTIVO, 
          IND_CONT_SINDICAL, IND_MENS_SINDICATO, IND_CONT_ADMISSAO, IND_MANDATO_SIND) VALUES
        (pCOD_CONTRATO, pDATA_INICIO, TO_DATE('31/12/2999', 'DD/MM/YYYY'), pCOD_SINDICATO, vDados.COD_MOT_SIN, 
          'N', 'N', 'N', 'N');

      IF pNUM_FICHA_REG IS NOT NULL THEN
        INSERT INTO RHFP0344 (COD_CONTRATO, DATA_INICIO, DATA_FIM, NUM_FICHA_REGISTRO, COD_MOTIVO) VALUES
          (pCOD_CONTRATO, pDATA_INICIO, TO_DATE('31/12/2999', 'DD/MM/YYYY'), pNUM_FICHA_REG, vDados.COD_MOT_FR); 
      END IF;

      IF pCOD_TP_CONTRATO IS NOT NULL THEN
        INSERT INTO RHFP0304 (COD_CONTRATO, DATA_INICIO, DATA_FIM, COD_TP_CONTRATO, IND_ENCERRADO, CLAU_ASSEC) VALUES
          (pCOD_CONTRATO, pDATA_INICIO, pDATA_INICIO + (SELECT NUM_DIAS FROM RHFP0314 WHERE COD_TP_CONTRATO = pCOD_TP_CONTRATO) - 1, pCOD_TP_CONTRATO, 'N', 'N');
      END IF;
  
      IF pCOD_LINHA IS NOT NULL THEN
        IF pTIPO_VT_CONTRATO = 'F' THEN
          vQTD_DIA := pVALOR_VT;
        ELSIF pTIPO_VT_CONTRATO = 'N' THEN
          vQTD_MES := pVALOR_VT;
        END IF;  
           
        INSERT INTO RHFP0384 (COD_CONTRATO, COD_LINHA, DATA_INICIO, DATA_FIM, RECEBE_DINHEIRO, IND_RECEBE_FERIADO, TIPOS_VALES_CONTRATO, QTD_PASSAGENS_DIA, QTD_PASSAGENS_MES) VALUES
           (pCOD_CONTRATO, pCOD_LINHA, pDATA_INICIO, TO_DATE('31/12/2999', 'DD/MM/YYYY'), 'N', 'N', pTIPO_VT_CONTRATO, vQTD_DIA, vQTD_MES);
      END IF;
      
      IF pCOD_VALE IS NOT NULL THEN
        vQTD_DIA := NULL;
        vQTD_MES := NULL;
        vCOD_VC  := NULL;
        IF pTIPO_VR_CONTRATO = 'F' THEN
          vQTD_DIA := pVALOR_VR;
        ELSIF pTIPO_VR_CONTRATO = 'N' THEN
          vQTD_MES := pVALOR_VR;
        ELSIF pTIPO_VR_CONTRATO = 'V' THEN
          vCOD_VC := pVALOR_VR;
        END IF;  
        INSERT INTO RHFP0263 (COD_CONTRATO, COD_VALE, DATA_INICIO, DATA_FIM, RECEBE_DINHEIRO, IND_RECEBE_FERIADO, IND_RECEBE_SABADO, TIPO_VALES_CONTRATO, QTD_VALES_DIA, QTD_VALES_MES, COD_VC) VALUES
           (pCOD_CONTRATO, pCOD_VALE, pDATA_INICIO, TO_DATE('31/12/2999', 'DD/MM/YYYY'), 'N', 'N', 'N', pTIPO_VR_CONTRATO, vQTD_DIA, vQTD_MES, vCOD_VC);
      END IF;
    END LOOP;
  ELSE
    UPDATE RHFP0300 SET COD_VINCULO_EMPREG = vCodVinc,
      COD_FORMA_PGTO = pCOD_FORMA_PGTO, 
      COD_BCO_PGTO = pCOD_BCO_PGTO, 
      COD_AGE_PGTO = pCOD_AGE_PGTO, 
      NRO_CONTA_PGTO = pNRO_CONTA_PGTO, 
      COD_CATEGORIA_TRAB = pCOD_CATEGORIA_TRAB, 
      TIPO_PIX = pTIPO_PIX,
      CHAVE_PIX = pCHAVE_PIX
    WHERE COD_CONTRATO = pCOD_CONTRATO ;
  END IF;
END;

PROCEDURE GRAVA_DEP(
  pCOD_PESSOA  IN OUT PESSOA.COD_PESSOA%TYPE,
  pCOD_FUNC	   RHFP0202.COD_FUNC%TYPE default null,
  pNOME_PESSOA PESSOA.NOME_PESSOA%TYPE default null,
  pCPF	        FISICA.CPF%TYPE default null,
  pDT_NASC	    FISICA.DT_NASC%TYPE default null,
  pSEXO	       FISICA.SEXO%TYPE default null,
  pDATA_INICIO	RHFP0202.DATA_INICIO%TYPE default null,
  pDATA_FIM	   RHFP0202.DATA_FIM%TYPE default null,
  pCOD_GRAU_PARENTESCO	RHFP0202.COD_GRAU_PARENTESCO%TYPE default null,
  pCOD_GRAU_INSTRUCAO	 RHFP0202.COD_GRAU_INSTRUCAO%TYPE default null,
  pTIPO_DEPENDENTE	    RHFP0202.TIPO_DEPENDENTE%TYPE default null,
  pIRF	                RHFP0202.IRF%TYPE default 'N',
  pSAL_FAMILIA	        RHFP0202.SAL_FAMILIA%TYPE default 'N',
  pIND_AUX_CRECHE     	RHFP0202.IND_AUX_CRECHE%TYPE default 'N',
  pIND_SEGURO_VIDA  	  RHFP0202.IND_SEGURO_VIDA%TYPE default 'N',
  pIND_AUX_ESCOLAR	    RHFP0202.IND_AUX_ESCOLAR%TYPE default 'N',
  pIND_ASSOC_FUNC	     RHFP0202.IND_ASSOC_FUNC%TYPE default 'N',
  pCOD_PESSOA_PENSAO	  RHFP0202.COD_PESSOA_PENSAO%TYPE default null,
  pCONF_NOME            CHAR DEFAULT 'N'
) IS
  vOper202 CHAR := 'I';
  vCont    NUMBER;
  vCodPes  PESSOA.COD_PESSOA%TYPE;
BEGIN
  IF (pCOD_FUNC IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Funcionário" é obrigatório.#COD_FUNC');
  ELSE
    SELECT COUNT(*)
      INTO vCont
    FROM RHFP0200 
    WHERE COD_FUNC = pCOD_FUNC;
    IF vCont < 1 THEN
      RAISE_APPLICATION_ERROR(-20001, '"Funcionário" inválido.#COD_FUNC');
    END IF;
  END IF;
  IF (NVL(pCOD_PESSOA, 0) = pCOD_FUNC) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A "Pessoa" não pode ser dependente dela mesma.#COD_PESSOA');
  END IF;
  IF (pNOME_PESSOA IS NULL) OR (LENGTH(pNOME_PESSOA) < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Nome da Pessoa" é obrigatório.#NOME_PESSOA');
  ELSIF (pCONF_NOME = 'N') AND  NVL(pCOD_PESSOA, 0) = 0 THEN
    SELECT NVL(MAX(COD_PESSOA),0)
      INTO vCodPes
    FROM PESSOA
    WHERE UPPER(NOME_PESSOA) = UPPER(pNOME_PESSOA);
    IF vCodPes > 0 THEN
      RAISE_APPLICATION_ERROR(-20002,'Já existe uma pessoa cadastrada com o mesmo nome. Código: '||vCodPes||'.'||CHR(13)||CHR(10)||'Tem CERTEZA que deseja continuar?#pCONF_NOME');
    END IF;
  END IF;

  IF (pCPF IS NULL) OR (LENGTH(pCPF) < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "CPF" é obrigatório.#CPF');
  ELSIF (RHYKUTILS.VALIDA_CPF(pCPF) <> 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "CPF" é inválido.#CPF');
  ELSIF NVL(pCOD_PESSOA, 0) = 0 THEN
    SELECT NVL(MAX(COD_PESSOA),0)
      INTO vCodPes
    FROM FISICA
    WHERE CPF = pCPF;
    IF vCodPes > 0 THEN
      RAISE_APPLICATION_ERROR(-20001,'Já existe a pessoa '||vCodPes||' cadastrada com o mesmo CPF.#CPF');
    END IF;
  END IF;

  IF (pDT_NASC IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A "Data de Nascimento" é obrigatória.#DT_NASC');
  ELSIF (pSEXO IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Gênero" é obrigatório.#SEXO');
  ELSIF (pSEXO <> 'M') AND (pSEXO <> 'F') THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Gênero" é inválido.#SEXO');
  ELSIF (pDATA_INICIO IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" é obrigatória.#DATA_INICIO');
  ELSIF (pDATA_FIM IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A "Data Fim" é obrigatória.#DATA_FIM');
  ELSIF (pCOD_GRAU_PARENTESCO	IS NULL) OR (pCOD_GRAU_PARENTESCO	< 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Grau de Parentesco" é obrigatório.#COD_GRAU_PARENTESCO');
  ELSIF (pCOD_GRAU_INSTRUCAO IS NULL) OR (pCOD_GRAU_INSTRUCAO < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Grau de Instrução" é obrigatório.#COD_GRAU_INSTRUCAO');
  ELSIF (pTIPO_DEPENDENTE IS NULL) OR (pTIPO_DEPENDENTE < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Tipo de Dependente" é obrigatório.#TIPO_DEPENDENTE');
  ELSIF pCOD_PESSOA_PENSAO IS NOT NULL THEN
    SELECT COUNT(*)
      INTO vCont
    FROM FISICA 
    WHERE COD_PESSOA = pCOD_PESSOA_PENSAO;
    IF vCont < 1 THEN
      RAISE_APPLICATION_ERROR(-20001, '"Pensionista Judicial" inválido.#COD_PESSOA_PENSAO');
    END IF;
  END IF;

  IF NVL(pCOD_PESSOA, 0) = 0 THEN
    SELECT NVL(MAX(COD_PESSOA), 0) + 1
      INTO pCOD_PESSOA
    FROM PESSOA;
    INSERT INTO PESSOA (COD_PESSOA, NOME_PESSOA, TIPO_PESSOA) VALUES
      (pCOD_PESSOA, pNOME_PESSOA, 'F');

    INSERT INTO FISICA (COD_PESSOA, CPF, DT_NASC, SEXO) VALUES
      (pCOD_PESSOA, pCPF, pDT_NASC, pSEXO);

    vOper202 := 'I';
  ELSE
    SELECT COUNT(*)
      INTO vCont
    FROM RHFP0202
    WHERE COD_FUNC = pCOD_FUNC
      AND COD_PESSOA = pCOD_PESSOA;
    IF vCont = 0 THEN
      vOper202 := 'I';
    ELSE
      vOper202 := 'U';
    END IF;
  END IF;
  
  IF vOper202 = 'I' THEN
    INSERT INTO RHFP0202 (COD_FUNC, COD_PESSOA, DATA_INICIO, DATA_FIM, COD_GRAU_PARENTESCO, COD_GRAU_INSTRUCAO, TIPO_DEPENDENTE,
        IRF, SAL_FAMILIA, IND_AUX_CRECHE, IND_SEGURO_VIDA, IND_AUX_ESCOLAR, IND_ASSOC_FUNC, COD_PESSOA_PENSAO, 
        SEXO, DATA_NASCIMENTO, COD_NACIONALIDADE, COD_ESTADO_CIVIL) VALUES
       (pCOD_FUNC, pCOD_PESSOA, pDATA_INICIO, pDATA_FIM, pCOD_GRAU_PARENTESCO, pCOD_GRAU_INSTRUCAO, pTIPO_DEPENDENTE,
        pIRF, pSAL_FAMILIA, pIND_AUX_CRECHE, pIND_SEGURO_VIDA, pIND_AUX_ESCOLAR, pIND_ASSOC_FUNC, pCOD_PESSOA_PENSAO, 
        pSEXO, pDT_NASC, 10, 1);
     -- avaliar transformar cod_nacionalidade e cod_estado civil em null   
  ELSE
    UPDATE RHFP0202 SET DATA_INICIO = pDATA_INICIO, DATA_FIM = pDATA_FIM, COD_GRAU_PARENTESCO = pCOD_GRAU_PARENTESCO, COD_GRAU_INSTRUCAO = pCOD_GRAU_INSTRUCAO, 
      TIPO_DEPENDENTE = pTIPO_DEPENDENTE, IRF = pIRF, SAL_FAMILIA = pSAL_FAMILIA, IND_AUX_CRECHE = pIND_AUX_CRECHE, IND_SEGURO_VIDA = pIND_SEGURO_VIDA, 
      IND_AUX_ESCOLAR = pIND_AUX_ESCOLAR, IND_ASSOC_FUNC = pIND_ASSOC_FUNC, COD_PESSOA_PENSAO = pCOD_PESSOA_PENSAO, 
      SEXO = pSEXO, DATA_NASCIMENTO = pDT_NASC
    WHERE COD_FUNC = pCOD_FUNC
      AND COD_PESSOA = pCOD_PESSOA;
  END IF;      
END;

PROCEDURE GRAVA_FUNC_PENSAO(
  pCOD_PESSOA  IN OUT PESSOA.COD_PESSOA%TYPE,
  pCOD_FUNC	   RHFP0205.COD_FUNC%TYPE default null,
  pNOME_PESSOA PESSOA.NOME_PESSOA%TYPE default null,
  pCPF	       FISICA.CPF%TYPE default null,
  pDT_NASC	   FISICA.DT_NASC%TYPE default null,
  pSEXO	       FISICA.SEXO%TYPE default null,
  pDATA_INICIO RHFP0205.DATA_INICIO%TYPE default null,
  pDATA_FIM	   RHFP0205.DATA_FIM%TYPE default null,
  pNRO_DEPENDENTES    RHFP0205.NRO_DEPENDENTES%TYPE default null,
  pCOD_FORMA_PGTO     RHFP0205.COD_FORMA_PGTO%TYPE default null,
  pCOD_BCO_PGTO       RHFP0205.COD_BCO_PGTO%TYPE default null,
  pCOD_AGE_PGTO       RHFP0205.COD_AGE_PGTO%TYPE default null,
  pNRO_CONTA_PGTO     RHFP0205.NRO_CONTA_PGTO%TYPE default null,
  pTIPO_PENSAO        RHFP0205.TIPO_PENSAO%TYPE default null,
  pCOD_PERCENTUAL     RHFP0205.COD_PERCENTUAL%TYPE default null,
  pVALOR              RHFP0205.VALOR%TYPE default null,
  pQTDE_SAL_MINIMOS   RHFP0205.QTDE_SAL_MINIMOS%TYPE default null,
  pCOD_VD_PENSAO      RHFP0205.COD_VD_PENSAO%TYPE default null,
  pCOD_VD_SFAMILIA    RHFP0205.COD_VD_SFAMILIA%TYPE default null,
  pIND_DEDUZ_IRF      RHFP0205.IND_DEDUZ_IRF%TYPE default null,
  pCOD_VD_PENSAO_13S  RHFP0205.COD_VD_PENSAO_13S%TYPE default null,
  pCOD_VD_PENSAO_FER  RHFP0205.COD_VD_PENSAO_FER%TYPE default null,
  pCOD_VD_PENSAO_OUT  RHFP0205.COD_VD_PENSAO_OUT%TYPE default null,
  pIND_VLR_MIN_PENSAO RHFP0205.IND_VLR_MIN_PENSAO%TYPE default null,
  pVLR_MIN_PENSAO     RHFP0205.VLR_MIN_PENSAO%TYPE default null,
  pCOD_COMP_SAL       RHFP0205.COD_COMP_SAL%TYPE default null,
  pCOD_COMP_13S       RHFP0205.COD_COMP_13S%TYPE default null,
  pCOD_COMP_FER       RHFP0205.COD_COMP_FER%TYPE default null,
  pCOD_COMP_OUT       RHFP0205.COD_COMP_OUT%TYPE default null,
  pCOD_VD_PENSAO_RRA  RHFP0205.COD_VD_PENSAO_RRA%TYPE default null,
  pCOD_VD_PENSAO_PLR  RHFP0205.COD_VD_PENSAO_PLR%TYPE default null,
  pTIPO_PIX           RHFP0205.TIPO_PIX%TYPE default null,
  pCHAVE_PIX          RHFP0205.CHAVE_PIX%TYPE default null,
  pCOD_RESPONSAVEL    RHFP0205.COD_RESPONSAVEL%TYPE default null,
  pCONF_NOME          CHAR DEFAULT 'N'
) IS
  vOper205 CHAR := 'I';
  vCont    NUMBER;
  vCodPes  PESSOA.COD_PESSOA%TYPE;
BEGIN
  IF (pCOD_FUNC IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Funcionário" é obrigatório.#COD_FUNC');
  ELSE
    SELECT COUNT(*)
      INTO vCont
    FROM RHFP0200 
    WHERE COD_FUNC = pCOD_FUNC;
    IF vCont < 1 THEN
      RAISE_APPLICATION_ERROR(-20001, '"Funcionário" inválido.#COD_FUNC');
    END IF;
  END IF;
  IF (NVL(pCOD_PESSOA, 0) = pCOD_FUNC) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A "Pessoa" não pode ser beneficiária dela mesma.#COD_PESSOA');
  END IF;
  IF (pNOME_PESSOA IS NULL) OR (LENGTH(pNOME_PESSOA) < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Nome da Pessoa" é obrigatório.#NOME_PESSOA');
  ELSIF (pCONF_NOME = 'N') AND  NVL(pCOD_PESSOA, 0) = 0 THEN
    SELECT NVL(MAX(COD_PESSOA),0)
      INTO vCodPes
    FROM PESSOA
    WHERE UPPER(NOME_PESSOA) = UPPER(pNOME_PESSOA);
    IF vCodPes > 0 THEN
      RAISE_APPLICATION_ERROR(-20002,'Já existe uma pessoa cadastrada com o mesmo nome. Código: '||vCodPes||'.'||CHR(13)||CHR(10)||'Tem CERTEZA que deseja continuar?#pCONF_NOME');
    END IF;
  END IF;

  IF NVL(pCOD_PESSOA, 0) = 0 THEN
    vOper205 := 'I';
  ELSE
    SELECT COUNT(*)
      INTO vCont
    FROM RHFP0205
    WHERE COD_FUNC = pCOD_FUNC
      AND COD_PESSOA = pCOD_PESSOA
      AND DATA_INICIO = pDATA_INICIO;
    IF vCont = 0 THEN
      vOper205 := 'I';
    ELSE
      vOper205 := 'U';
    END IF;
  END IF;

  IF vOper205 = 'I' THEN
    IF (pCPF IS NULL) OR (LENGTH(pCPF) < 1) THEN
      RAISE_APPLICATION_ERROR(-20001, 'O "CPF" é obrigatório.#CPF');
    ELSIF (RHYKUTILS.VALIDA_CPF(pCPF) <> 1) THEN
      RAISE_APPLICATION_ERROR(-20001, 'O "CPF" é inválido.#CPF');
    ELSIF NVL(pCOD_PESSOA, 0) = 0 THEN
      SELECT NVL(MAX(COD_PESSOA),0)
        INTO vCodPes
      FROM FISICA
      WHERE CPF = pCPF;
      IF vCodPes > 0 THEN
        RAISE_APPLICATION_ERROR(-20001,'Já existe a pessoa '||vCodPes||' cadastrada com o mesmo CPF.#CPF');
      END IF;
    END IF;

    IF (pDT_NASC IS NULL) THEN
      RAISE_APPLICATION_ERROR(-20001, 'A "Data de Nascimento" é obrigatória.#DT_NASC');
    ELSIF (pSEXO IS NULL) THEN
      RAISE_APPLICATION_ERROR(-20001, 'O "Gênero" é obrigatório.#SEXO');
    ELSIF (pSEXO <> 'M') AND (pSEXO <> 'F') THEN
      RAISE_APPLICATION_ERROR(-20001, 'O "Gênero" é inválido.#SEXO');
    END IF;
  END IF;
    
  IF (pDATA_INICIO IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" é obrigatória.#DATA_INICIO');
  ELSIF (pDATA_FIM IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A "Data Fim" é obrigatória.#DATA_FIM');
  ELSIF (pDATA_INICIO > pDATA_FIM) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A "Data Fim" deve ser maior ou igual a data início.#DATA_FIM');
  ELSIF (pNRO_DEPENDENTES IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, '"Quantidade de dependentes" deve ser informado.#NRO_DEPENDENTES');
  ELSIF (pNRO_DEPENDENTES <= 0) THEN
    RAISE_APPLICATION_ERROR(-20001, '"Quantidade de dependentes" deve ser maior que zero.#NRO_DEPENDENTES');
  ELSIF (pCOD_FORMA_PGTO IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, '"Forma de pagamento" deve ser informada.#COD_FORMA_PGTO');
  ELSE
    SELECT COUNT(*)
      INTO vCont
    FROM RHFP0111 
    WHERE COD_FORMA_PGTO = pCOD_FORMA_PGTO;
    IF vCont < 1 THEN
      RAISE_APPLICATION_ERROR(-20001, '"Forma de pagamento" inválida.#COD_FORMA_PGTO');
    END IF;
  END IF;
  IF (pTIPO_PENSAO IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, '"Tipo Pensão" deve ser informado.#TIPO_PENSAO');
  ELSIF (pTIPO_PENSAO NOT IN ('P','S','V')) THEN
    RAISE_APPLICATION_ERROR(-20001, '"Tipo Pensão" inválido.#TIPO_PENSAO');
  ELSIF (pIND_DEDUZ_IRF IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, '"Deduz IRF" deve ser informado.#IND_DEDUZ_IRF');
  ELSIF (pIND_DEDUZ_IRF NOT IN ('S','N')) THEN
    RAISE_APPLICATION_ERROR(-20001, '"Deduz IRF" inválido.#IND_DEDUZ_IRF');
  ELSIF (pIND_VLR_MIN_PENSAO IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, '"Ind. Valor Mínimo" deve ser informado.#IND_VLR_MIN_PENSAO');
  ELSIF (pIND_VLR_MIN_PENSAO NOT IN ('S','N')) THEN
    RAISE_APPLICATION_ERROR(-20001, '"Ind. Valor Mínimo" inválido.#IND_VLR_MIN_PENSAO');
  END IF;
  
  IF (pTIPO_PENSAO = 'P') THEN -- Valida Tipo Pensão sobre Remuneração
    IF (pCOD_PERCENTUAL IS NULL) THEN
      RAISE_APPLICATION_ERROR(-20001, '"Percentual" deve ser informado.#COD_PERCENTUAL');
    ELSE
      SELECT COUNT(*)
        INTO vCont
      FROM RHFP0810 
      WHERE COD_PERCENTUAL = pCOD_PERCENTUAL;
      IF vCont < 1 THEN
        RAISE_APPLICATION_ERROR(-20001, '"Percentual" inválido.#COD_PERCENTUAL');
      END IF;
    END IF;
  END IF;
  IF (pTIPO_PENSAO = 'P') AND (pIND_VLR_MIN_PENSAO = 'S') THEN -- Valida Valor Mínimo da Pensao
    IF (pVLR_MIN_PENSAO IS NULL) THEN
      RAISE_APPLICATION_ERROR(-20001, '"Valor mínimo" deve ser informado.#VLR_MIN_PENSAO');
    ELSIF (pVLR_MIN_PENSAO <= 0) THEN
      RAISE_APPLICATION_ERROR(-20001, '"Valor mínimo" deve ser maior que zero.#VLR_MIN_PENSAO');
    END IF;
  END IF;
  IF (pTIPO_PENSAO = 'S') THEN -- Valida Pensão por Qtde de Salários
    IF (pQTDE_SAL_MINIMOS IS NULL) THEN
      RAISE_APPLICATION_ERROR(-20001, '"Quantidade" deve ser informada.#QTDE_SAL_MINIMOS');
    ELSIF (pQTDE_SAL_MINIMOS <= 0) THEN
      RAISE_APPLICATION_ERROR(-20001, '"Quantidade" deve ser maior que zero.#QTDE_SAL_MINIMOS');
    END IF;
  END IF;
  IF (pTIPO_PENSAO = 'V') THEN -- Valida Pensão por Valor
    IF (pVALOR IS NULL) THEN
      RAISE_APPLICATION_ERROR(-20001, '"Valor" deve ser informado.#VALOR');
    ELSIF (pVALOR <= 0) THEN
      RAISE_APPLICATION_ERROR(-20001, '"Valor" deve ser maior que zero.#VALOR');
    END IF;
  END IF;
  
  IF (pCOD_VD_PENSAO IS NULL AND 
      pCOD_VD_PENSAO_13S IS NULL AND
      pCOD_VD_PENSAO_FER  IS NULL AND
      pCOD_VD_PENSAO_OUT IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'Algum dos "VDs para Cálculo" deve ser informado.#COD_VD_PENSAO');
  END IF;

  IF (pCOD_VD_PENSAO > 0) THEN
    SELECT NVL(COUNT(FVD.COD_VD),0) INTO vCont 
    FROM RHFP1021 FVD 
    WHERE FVD.COD_VD = pCOD_VD_PENSAO
      AND FVD.COD_FUNCAO = 32;
    IF vCont <= 0 THEN
      RAISE_APPLICATION_ERROR(-20001, 'O "VD de Pensão s/Salário" é inválido.#COD_VD_PENSAO');
    END IF;
  END IF;

  IF (pCOD_VD_PENSAO_13S > 0) THEN
    SELECT NVL(COUNT(FVD.COD_VD),0) INTO vCont 
    FROM RHFP1021 FVD 
    WHERE FVD.COD_VD = pCOD_VD_PENSAO_13S
      AND FVD.COD_FUNCAO = 32;
    IF vCont <= 0 THEN
      RAISE_APPLICATION_ERROR(-20001, 'O "VD de Pensão s/13º Sal" é inválido.#COD_VD_PENSAO_13S');
    END IF;
  END IF;

  IF (pCOD_VD_PENSAO_FER > 0) THEN
    SELECT NVL(COUNT(FVD.COD_VD),0) INTO vCont 
    FROM RHFP1021 FVD 
    WHERE FVD.COD_VD = pCOD_VD_PENSAO_FER
      AND FVD.COD_FUNCAO = 32;
    IF vCont <= 0 THEN
      RAISE_APPLICATION_ERROR(-20001, 'O "VD de Pensão s/Férias" é inválido.#COD_VD_PENSAO_FER');
    END IF;
  END IF;

  IF (pCOD_VD_PENSAO_OUT > 0) THEN
    SELECT NVL(COUNT(FVD.COD_VD),0) INTO vCont 
    FROM RHFP1021 FVD 
    WHERE FVD.COD_VD = pCOD_VD_PENSAO_OUT
      AND FVD.COD_FUNCAO = 32;
    IF vCont <= 0 THEN
      RAISE_APPLICATION_ERROR(-20001, 'O "VD de Pensão s/Outras" é inválido.#COD_VD_PENSAO_OUT');
    END IF;
  END IF;

  IF (pCOD_VD_SFAMILIA > 0) THEN
    SELECT NVL(COUNT(COD_VD),0) INTO vCont
    FROM RHFP1000 
    WHERE COD_VD = pCOD_VD_SFAMILIA
      AND TIPO_VD <> 'B';
    IF vCont <= 0 THEN
      RAISE_APPLICATION_ERROR(-20001, 'O "VD Sal. Família" é inválido.#COD_VD_SFAMILIA');
    END IF;
  END IF;

  IF (pCOD_VD_PENSAO_RRA > 0) THEN
    SELECT NVL(COUNT(FVD.COD_VD),0) INTO vCont 
    FROM RHFP1021 FVD 
    WHERE FVD.COD_VD = pCOD_VD_PENSAO_RRA
      AND FVD.COD_FUNCAO = 32;
    IF vCont <= 0 THEN
      RAISE_APPLICATION_ERROR(-20001, 'O "VD de Pensão RRA" é inválido.#COD_VD_PENSAO_RRA');
    END IF;
  END IF;

  IF (pCOD_VD_PENSAO_PLR > 0) THEN
    SELECT NVL(COUNT(FVD.COD_VD),0) INTO vCont 
    FROM RHFP1021 FVD 
    WHERE FVD.COD_VD = pCOD_VD_PENSAO_PLR
      AND FVD.COD_FUNCAO = 32;
    IF vCont <= 0 THEN
      RAISE_APPLICATION_ERROR(-20001, 'O "VD de Pensão PLR" é inválido.#COD_VD_PENSAO_PLR');
    END IF;
  END IF;

  IF (pCOD_FORMA_PGTO IS NULL) OR (pCOD_FORMA_PGTO < 1) THEN -- Valida Formas de Pagamento
    RAISE_APPLICATION_ERROR(-20001, 'A "Forma de Pagamento" deve ser informada.#COD_FORMA_PGTO');
  ELSIF (pCOD_FORMA_PGTO = 2) AND (pCOD_BCO_PGTO IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Banco" deve ser informado.#COD_BCO_PGTO');
  ELSIF (pCOD_FORMA_PGTO = 2) AND (pCOD_AGE_PGTO IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A "Agência" deve ser informada.#COD_AGE_PGTO');
  ELSIF (pCOD_FORMA_PGTO = 2) AND (pNRO_CONTA_PGTO IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Número da Conta" deve ser informado.#NRO_CONTA_PGTO');
  ELSIF (pCOD_FORMA_PGTO = 7) AND (pTIPO_PIX IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Tipo da Chave PIX" deve ser informado.#TIPO_PIX');
  ELSIF (pCOD_FORMA_PGTO = 7) AND (pCHAVE_PIX IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A "Chave PIX" deve ser informada.#CHAVE_PIX');
  END IF;

  IF (pCOD_RESPONSAVEL > 0) THEN
    SELECT NVL(COUNT(COD_PESSOA),0) INTO vCont
    FROM FISICA
    WHERE COD_PESSOA = pCOD_RESPONSAVEL;
    IF vCont <= 0 THEN
      RAISE_APPLICATION_ERROR(-20001, 'O "Responsável" é inválido.#COD_RESPONSAVEL');
    END IF;
  END IF;

  IF (pCOD_COMP_SAL > 0) THEN
    SELECT NVL(COUNT(COD_COMPOSICAO),0) INTO vCont
    FROM RHFP1055
    WHERE COD_COMPOSICAO = pCOD_COMP_SAL;
    IF vCont <= 0 THEN
      RAISE_APPLICATION_ERROR(-20001, 'A "Composição VDs Salário" é inválido.#COD_COMP_SAL');
    END IF;
  END IF;

  IF (pCOD_COMP_13S > 0) THEN
    SELECT NVL(COUNT(COD_COMPOSICAO),0) INTO vCont
    FROM RHFP1055
    WHERE COD_COMPOSICAO = pCOD_COMP_13S;
    IF vCont <= 0 THEN
      RAISE_APPLICATION_ERROR(-20001, 'A "Composição VDs 13º Sal" é inválido.#COD_COMP_13S');
    END IF;
  END IF;

  IF (pCOD_COMP_FER > 0) THEN
    SELECT NVL(COUNT(COD_COMPOSICAO),0) INTO vCont
    FROM RHFP1055
    WHERE COD_COMPOSICAO = pCOD_COMP_FER;
    IF vCont <= 0 THEN
      RAISE_APPLICATION_ERROR(-20001, 'A "Composição VDs Férias" é inválido.#COD_COMP_FER');
    END IF;
  END IF;

  IF (pCOD_COMP_OUT > 0) THEN
    SELECT NVL(COUNT(COD_COMPOSICAO),0) INTO vCont
    FROM RHFP1055
    WHERE COD_COMPOSICAO = pCOD_COMP_OUT;
    IF vCont <= 0 THEN
      RAISE_APPLICATION_ERROR(-20001, 'A "Composição VDs Outras" é inválido.#COD_COMP_OUT');
    END IF;
  END IF;

  IF NVL(pCOD_PESSOA, 0) = 0 THEN
    SELECT NVL(MAX(COD_PESSOA), 0) + 1
      INTO pCOD_PESSOA
    FROM PESSOA;
    INSERT INTO PESSOA (COD_PESSOA, NOME_PESSOA, TIPO_PESSOA) VALUES
      (pCOD_PESSOA, pNOME_PESSOA, 'F');

    INSERT INTO FISICA (COD_PESSOA, CPF, DT_NASC, SEXO) VALUES
      (pCOD_PESSOA, pCPF, pDT_NASC, pSEXO);
  ELSE
    SELECT COUNT(*)
      INTO vCont
    FROM RHFP0205
    WHERE COD_FUNC = pCOD_FUNC
      AND COD_PESSOA = pCOD_PESSOA
      AND DATA_INICIO = pDATA_INICIO;
  END IF;
  
  IF vOper205 = 'I' THEN
    INSERT INTO RHFP0205 (
       COD_FUNC, COD_PESSOA, DATA_INICIO, 
       DATA_FIM, NRO_DEPENDENTES, COD_FORMA_PGTO, 
       COD_BCO_PGTO, COD_AGE_PGTO, NRO_CONTA_PGTO, 
       TIPO_PENSAO, COD_PERCENTUAL, VALOR, 
       QTDE_SAL_MINIMOS, COD_VD_PENSAO, COD_VD_SFAMILIA, 
       IND_DEDUZ_IRF, cOD_VD_PENSAO_13S, 
       COD_VD_PENSAO_FER, COD_VD_PENSAO_OUT, IND_VLR_MIN_PENSAO, 
       VLR_MIN_PENSAO, COD_COMP_SAL, COD_COMP_13S, 
       COD_COMP_FER, COD_COMP_OUT, COD_VD_PENSAO_RRA, 
       COD_VD_PENSAO_PLR, TIPO_PIX, CHAVE_PIX, COD_RESPONSAVEL 
       ) 
    VALUES ( pCOD_FUNC, pCOD_PESSOA, pDATA_INICIO, pDATA_FIM, pNRO_DEPENDENTES,
     pCOD_FORMA_PGTO, pCOD_BCO_PGTO, pCOD_AGE_PGTO, pNRO_CONTA_PGTO, pTIPO_PENSAO,
     pCOD_PERCENTUAL, pVALOR, pQTDE_SAL_MINIMOS, pCOD_VD_PENSAO, pCOD_VD_SFAMILIA,
     pIND_DEDUZ_IRF, pCOD_VD_PENSAO_13S, pCOD_VD_PENSAO_FER, pCOD_VD_PENSAO_OUT,
     pIND_VLR_MIN_PENSAO, pVLR_MIN_PENSAO, pCOD_COMP_SAL, pCOD_COMP_13S,
     pCOD_COMP_FER, pCOD_COMP_OUT, pCOD_VD_PENSAO_RRA, pCOD_VD_PENSAO_PLR,
     pTIPO_PIX, pCHAVE_PIX, pCOD_RESPONSAVEL );
  ELSE
    UPDATE RHFP0205
    SET COD_FUNC           = pCOD_FUNC,
        COD_PESSOA         = pCOD_PESSOA,
        DATA_INICIO        = pDATA_INICIO,
        DATA_FIM           = pDATA_FIM,
        NRO_DEPENDENTES    = pNRO_DEPENDENTES,
        COD_FORMA_PGTO     = pCOD_FORMA_PGTO,
        COD_BCO_PGTO       = pCOD_BCO_PGTO,
        COD_AGE_PGTO       = pCOD_AGE_PGTO,
        NRO_CONTA_PGTO     = pNRO_CONTA_PGTO,
        TIPO_PENSAO        = pTIPO_PENSAO,
        COD_PERCENTUAL     = pCOD_PERCENTUAL,
        VALOR              = pVALOR,
        QTDE_SAL_MINIMOS   = pQTDE_SAL_MINIMOS,
        COD_VD_PENSAO      = pCOD_VD_PENSAO,
        COD_VD_SFAMILIA    = pCOD_VD_SFAMILIA,
        IND_DEDUZ_IRF      = pIND_DEDUZ_IRF,
        COD_VD_PENSAO_13S  = pCOD_VD_PENSAO_13S,
        COD_VD_PENSAO_FER  = pCOD_VD_PENSAO_FER,
        COD_VD_PENSAO_OUT  = pCOD_VD_PENSAO_OUT,
        IND_VLR_MIN_PENSAO = pIND_VLR_MIN_PENSAO,
        VLR_MIN_PENSAO     = pVLR_MIN_PENSAO,
        COD_COMP_SAL       = pCOD_COMP_SAL,
        COD_COMP_13S       = pCOD_COMP_13S,
        COD_COMP_FER       = pCOD_COMP_FER,
        COD_COMP_OUT       = pCOD_COMP_OUT,
        COD_VD_PENSAO_RRA  = pCOD_VD_PENSAO_RRA,
        COD_VD_PENSAO_PLR  = pCOD_VD_PENSAO_PLR,
        TIPO_PIX           = pTIPO_PIX,
        CHAVE_PIX          = pCHAVE_PIX,
        COD_RESPONSAVEL    = pCOD_RESPONSAVEL
    WHERE COD_FUNC           = pCOD_FUNC
      AND COD_PESSOA         = pCOD_PESSOA
      AND DATA_INICIO        = pDATA_INICIO;
  END IF;      
END;

PROCEDURE GRAVA_FUNC(
  pCOD_PESSOA  IN OUT PESSOA.COD_PESSOA%TYPE,
  pNOME_PESSOA PESSOA.NOME_PESSOA%TYPE default null,
  pCPF	        FISICA.CPF%TYPE default null,
  pDT_NASC	    FISICA.DT_NASC%TYPE default null,
  pNOME_SOCIAL	FISICA.NOME_SOCIAL%TYPE default null,
  pAPELIDO	    FISICA.APELIDO%TYPE default null,
  pSEXO	       FISICA.SEXO%TYPE default null,
  pTIPO_SANGUE	FISICA.TIPO_SANGUE%TYPE default null,
  pFATOR_RH	   FISICA.FATOR_RH%TYPE default null,
  pNRO_CARTAO_SUS	FISICA.NRO_CARTAO_SUS%TYPE default null,
  pCEP	        FISICA.CEP%TYPE default null,
  pCOD_UF	     FISICA.COD_UF%TYPE default null,
  pCOD_MUNIC  	FISICA.COD_MUNIC%TYPE default null,
  pTIPO_LOGRA	 FISICA.TIPO_LOGRA%TYPE default null,
  pCOD_LOGRA	  FISICA.COD_LOGRA%TYPE default null,
  pCOD_BAIRRO	 FISICA.COD_BAIRRO%TYPE default null,
  pNUMERO	     FISICA.NUMERO%TYPE default null,
  pCOMPLEMENTO	FISICA.COMPLEMENTO%TYPE default null,
  pDDD	        FISICA.DDD%TYPE default null,
  pFONE	       FISICA.FONE%TYPE default null,
  pDDD_FONE_CEL	FISICA.DDD_FONE_CEL%TYPE default null,
  pFONE_CEL	   FISICA.FONE_CEL%TYPE default null,
  pFONE_ALTER	 FISICA.FONE_ALTER%TYPE default null,
  pRAMAL	      FISICA.RAMAL%TYPE default null,
  pEMAIL	      FISICA.EMAIL%TYPE default null,
  pEMAIL_ALTER	FISICA.EMAIL_ALTER%TYPE default null,
  pCOD_PAIS_NASCTO	     RHFP0200.COD_PAIS_NASCTO%TYPE default null,
  pCOD_MUNIC_NASCIMENTO	RHFP0200.COD_MUNIC_NASCIMENTO%TYPE default null,
  pCOD_UF_NASCIMENTO	   RHFP0200.COD_UF_NASCIMENTO%TYPE default null,
  pCOD_NACIONALIDADE	   RHFP0200.COD_NACIONALIDADE%TYPE default null,
  pCOD_GRAU_INSTRUCAO	  RHFP0200.COD_GRAU_INSTRUCAO%TYPE default null,
  pCOD_ESTADO_CIVIL	    RHFP0200.COD_ESTADO_CIVIL%TYPE default null,
  pCOD_RACA_COR	        RHFP0200.COD_RACA_COR%TYPE default null,
  pCOD_PESSOA_PAI	      RHFP0200.COD_PESSOA_PAI%TYPE default null,
  pCOD_PESSOA_MAE	      RHFP0200.COD_PESSOA_MAE%TYPE default null,
  pCOD_PESSOA_CONJUGE	  RHFP0200.COD_PESSOA_CONJUGE%TYPE default null,
  pDATA_CASAMENTO	      RHFP0200.DATA_CASAMENTO%TYPE default null,
  pNRO_PIS_PASEP	       RHFP0200.NRO_PIS_PASEP%TYPE default null,
  pDATA_PIS_PASEP	      RHFP0200.DATA_PIS_PASEP%TYPE default null,
  pNRO_CONT_INDIVIDUAL	 RHFP0200.NRO_CONT_INDIVIDUAL%TYPE default null,
  pDATA_CONT_INDIVIDUAL	RHFP0200.DATA_CONT_INDIVIDUAL%TYPE default null,
  pNRO_CTPS	            RHFP0200.NRO_CTPS%TYPE default null,
  pNRO_SERIE_CTPS	      RHFP0200.NRO_SERIE_CTPS%TYPE default null,
  pDATA_EXP_CTPS	       RHFP0200.DATA_EXP_CTPS%TYPE default null,
  pCOD_UF_CTPS	         RHFP0200.COD_UF_CTPS%TYPE default null,
  pCOD_TIPO_APOSENT    	RHFP0200.COD_TIPO_APOSENT%TYPE default null,
  pDATA_APOSENTADORIA	  RHFP0200.DATA_APOSENTADORIA%TYPE default null,
  pNRO_BENEFICIO_INSS	  RHFP0200.NRO_BENEFICIO_INSS%TYPE default null,
  pCOD_DEFICIENCIA	     RHFP0200.COD_DEFICIENCIA%TYPE default null,
  pIND_DEF_MOTORA	      RHFP0200.IND_DEF_MOTORA%TYPE default 'N',
  pIND_DEF_VISUAL	      RHFP0200.IND_DEF_VISUAL%TYPE default 'N',
  pIND_DEF_AUDITIVA     RHFP0200.IND_DEF_AUDITIVA%TYPE default 'N',
  pIND_DEF_MENTAL	      RHFP0200.IND_DEF_MENTAL%TYPE default 'N',
  pIND_DEF_INTELEC	     RHFP0200.IND_DEF_INTELEC%TYPE default 'N',
  pINFO_COTA	           RHFP0200.INFO_COTA%TYPE default null,
  pDETALHE_DEFICIENCIA	 RHFP0200.DETALHE_DEFICIENCIA%TYPE default null,
  pTMP_RESID	           RHFP0200.TMP_RESID%TYPE default null,
  pCOND_ING	            RHFP0200.COND_ING%TYPE default null,
  pCONF_NOME            CHAR DEFAULT 'N',
  pCONF_CPF             CHAR DEFAULT 'N'
) IS
  vCodPes PESSOA.COD_PESSOA%TYPE;
BEGIN
  IF (pNOME_PESSOA IS NULL) OR (LENGTH(pNOME_PESSOA) < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Nome da Pessoa" é obrigatório.#NOME_PESSOA');
  ELSIF pCONF_NOME = 'N' THEN
    SELECT NVL(MAX(COD_PESSOA),0)
      INTO vCodPes
    FROM PESSOA
    WHERE UPPER(NOME_PESSOA) = UPPER(pNOME_PESSOA);
    IF vCodPes > 0 THEN
      RAISE_APPLICATION_ERROR(-20002,'Já existe uma pessoa cadastrada com o mesmo nome. Código: '||vCodPes||'.'||CHR(13)||CHR(10)||'Tem CERTEZA que deseja continuar?#NOME_PESSOA');
    END IF;
  END IF;

  IF (pCPF IS NULL) OR (LENGTH(pCPF) < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "CPF" é obrigatório.#CPF');
  ELSIF (RHYKUTILS.VALIDA_CPF(pCPF) <> 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "CPF" é inválido.#CPF');
  ELSIF pCONF_CPF = 'N' THEN
    SELECT NVL(MAX(COD_PESSOA),0)
      INTO vCodPes
    FROM FISICA
    WHERE CPF = pCPF;
    IF vCodPes > 0 THEN
      RAISE_APPLICATION_ERROR(-20002,'Já existe a pessoa '||vCodPes||' cadastrada com o mesmo CPF.'||CHR(13)||CHR(10)||'Tem CERTEZA que deseja continuar?#CPF');
    END IF;
  END IF;

  IF (pDT_NASC IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A "Data de Nascimento" é obrigatória.#DT_NASC');
  ELSIF (pCEP IS NULL) OR (LENGTH(pCEP) < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "CEP" é obrigatório.#CEP');
  ELSIF (LENGTH(pCEP) < 8) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "CEP" é inválido.#CEP');
  ELSIF (pCOD_UF IS NULL) OR (LENGTH(pCOD_UF) < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A informação de "UF" é obrigatória.#COD_UF');
  ELSIF (LENGTH(pCOD_UF) < 2) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A informação de "UF" é inválida.#COD_UF');
  ELSIF (pCOD_MUNIC IS NULL) OR (pCOD_MUNIC < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Município" é obrigatório.#COD_MUNIC');
  ELSIF (pCOD_LOGRA IS NULL) OR (pCOD_LOGRA < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Logradouro" é obrigatório.#COD_LOGRA');
  ELSIF (pNUMERO IS NULL) OR (LENGTH(pNUMERO) < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Número" é obrigatório.#NUMERO');
  ELSIF (pSEXO IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Gênero" é obrigatório.#SEXO');
  ELSIF (pSEXO <> 'M') AND (pSEXO <> 'F') THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Gênero" é inválido.#SEXO');
  ELSIF (pCOD_ESTADO_CIVIL IS NULL) OR (pCOD_ESTADO_CIVIL < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Estado Civil" é obrigatório.#COD_ESTADO_CIVIL');
  ELSIF (pCOD_GRAU_INSTRUCAO IS NULL) OR (pCOD_GRAU_INSTRUCAO < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Grau de Instrução" é obrigatório.#COD_GRAU_INSTRUCAO');
  ELSIF (pCOD_RACA_COR IS NULL) OR (pCOD_RACA_COR < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A "Raça/Cor" é obrigatória.#COD_RACA_COR');
  ELSIF (pCOD_PAIS_NASCTO IS NULL) OR (pCOD_PAIS_NASCTO   < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "País de Nascimento" é obrigatório.#COD_PAIS_NASCTO');
  ELSIF (pCOD_NACIONALIDADE IS NULL) OR (pCOD_NACIONALIDADE < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A "Nacionalidade" é obrigatória.#COD_NACIONALIDADE');
  ELSIF (pNRO_PIS_PASEP IS NULL) OR (LENGTH(pNRO_PIS_PASEP) < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Número do PIS" é obrigatória.#NRO_PIS_PASEP');
  ELSIF (LENGTH(pNRO_PIS_PASEP) > 11) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Número do PIS" é inválido.#NRO_PIS_PASEP');
  ELSIF (pTMP_RESID = 1) AND (pCOND_ING = 5) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O eSocial não aceita esta combinação de valores!#COND_ING');
  ELSIF (pTMP_RESID = 2) AND (pCOND_ING = 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O eSocial não aceita esta combinação de valores!#COND_ING');
  END IF;

  IF pCOD_PESSOA = 0 THEN
    SELECT NVL(MAX(COD_PESSOA), 0) + 1
      INTO pCOD_PESSOA
    FROM PESSOA;
    INSERT INTO PESSOA (COD_PESSOA, NOME_PESSOA, TIPO_PESSOA) VALUES
      (pCOD_PESSOA, pNOME_PESSOA, 'F');

    INSERT INTO FISICA (COD_PESSOA, CPF, DT_NASC, NOME_SOCIAL, APELIDO, SEXO, TIPO_SANGUE, FATOR_RH, NRO_CARTAO_SUS,
        CEP, COD_UF, COD_MUNIC, TIPO_LOGRA, COD_LOGRA, COD_BAIRRO, NUMERO, COMPLEMENTO, DDD, FONE, DDD_FONE_CEL,
        FONE_CEL, FONE_ALTER, RAMAL, EMAIL, EMAIL_ALTER) VALUES
      (pCOD_PESSOA, pCPF, pDT_NASC, pNOME_SOCIAL, pAPELIDO, pSEXO, pTIPO_SANGUE, pFATOR_RH, pNRO_CARTAO_SUS,
       pCEP, pCOD_UF, pCOD_MUNIC, pTIPO_LOGRA, pCOD_LOGRA, pCOD_BAIRRO, pNUMERO, pCOMPLEMENTO, pDDD, pFONE, pDDD_FONE_CEL,
       pFONE_CEL, pFONE_ALTER, pRAMAL, pEMAIL, pEMAIL_ALTER);

    INSERT INTO RHFP0200 (COD_FUNC, COD_PAIS_NASCTO, COD_MUNIC_NASCIMENTO, COD_UF_NASCIMENTO, COD_NACIONALIDADE, COD_GRAU_INSTRUCAO,
        COD_ESTADO_CIVIL, COD_RACA_COR, COD_PESSOA_PAI, COD_PESSOA_MAE, COD_PESSOA_CONJUGE, DATA_CASAMENTO, NRO_PIS_PASEP,
        DATA_PIS_PASEP, NRO_CONT_INDIVIDUAL, DATA_CONT_INDIVIDUAL, NRO_CTPS, NRO_SERIE_CTPS, DATA_EXP_CTPS, COD_UF_CTPS,
        COD_TIPO_APOSENT, DATA_APOSENTADORIA, NRO_BENEFICIO_INSS, COD_DEFICIENCIA, IND_DEF_MOTORA, IND_DEF_VISUAL, IND_DEF_AUDITIVA,
        IND_DEF_MENTAL, IND_DEF_INTELEC, INFO_COTA, DETALHE_DEFICIENCIA, TMP_RESID, COND_ING, DATA_NASCIMENTO, SEXO, IND_DEFICIENCIA, candidato) VALUES
       (pCOD_PESSOA, pCOD_PAIS_NASCTO, pCOD_MUNIC_NASCIMENTO, pCOD_UF_NASCIMENTO, pCOD_NACIONALIDADE, pCOD_GRAU_INSTRUCAO,
        pCOD_ESTADO_CIVIL, pCOD_RACA_COR, pCOD_PESSOA_PAI, pCOD_PESSOA_MAE, pCOD_PESSOA_CONJUGE, pDATA_CASAMENTO, pNRO_PIS_PASEP,
        pDATA_PIS_PASEP, pNRO_CONT_INDIVIDUAL, pDATA_CONT_INDIVIDUAL, pNRO_CTPS, pNRO_SERIE_CTPS, pDATA_EXP_CTPS, pCOD_UF_CTPS,
        pCOD_TIPO_APOSENT, pDATA_APOSENTADORIA, pNRO_BENEFICIO_INSS, pCOD_DEFICIENCIA, pIND_DEF_MOTORA, pIND_DEF_VISUAL, pIND_DEF_AUDITIVA,
        pIND_DEF_MENTAL, pIND_DEF_INTELEC, pINFO_COTA, pDETALHE_DEFICIENCIA, pTMP_RESID, pCOND_ING, pDT_NASC, pSEXO,
        CASE WHEN pCOD_DEFICIENCIA > 0 THEN 'S' ELSE 'N' END, 0);
  ELSE
    UPDATE PESSOA SET NOME_PESSOA = pNOME_PESSOA
    WHERE COD_PESSOA = pCOD_PESSOA;

    -- Verifica se houve alguma alteração de campo e grava no histtórico das 
    -- informações da pessoa física
    FOR c_fis IN (SELECT * FROM FISICA WHERE COD_PESSOA = pCOD_PESSOA) LOOP
      IF ((pCPF            <> c_fis.CPF) OR
          (pNOME_SOCIAL    <> c_fis.NOME_SOCIAL) OR
          (pAPELIDO        <> c_fis.APELIDO) OR
          (pTIPO_SANGUE    <> c_fis.TIPO_SANGUE) OR
          (pFATOR_RH       <> c_fis.FATOR_RH) OR
          (pNRO_CARTAO_SUS <> c_fis.NRO_CARTAO_SUS) OR
          (pCEP            <> c_fis.CEP) OR
          (pCOD_UF         <> c_fis.COD_UF) OR
          (pCOD_MUNIC      <> c_fis.COD_MUNIC) OR
          (pTIPO_LOGRA     <> c_fis.TIPO_LOGRA) OR
          (pCOD_LOGRA      <> c_fis.COD_LOGRA) OR
          (pCOD_BAIRRO     <> c_fis.COD_BAIRRO) OR
          (pNUMERO         <> c_fis.NUMERO) OR
          (pCOMPLEMENTO    <> c_fis.COMPLEMENTO) OR
          (pDDD            <> c_fis.DDD) OR
          (pFONE           <> c_fis.FONE) OR
          (pDDD_FONE_CEL   <> c_fis.DDD_FONE_CEL) OR
          (pFONE_CEL       <> c_fis.FONE_CEL) OR
          (pFONE_ALTER     <> c_fis.FONE_ALTER) OR
          (pRAMAL          <> c_fis.RAMAL) OR
          (pEMAIL          <> c_fis.EMAIL) OR
          (pEMAIL_ALTER    <> c_fis.EMAIL_ALTER)) THEN
        INSERT INTO FISICA_H (COD_PESSOA, DATA_HISTORICO, APELIDO, COD_UF, COD_MUNIC, TIPO_LOGRA, COD_LOGRA,
          COD_BAIRRO, NUMERO, COMPLEMENTO, CEP, CPF, DT_NASC, DDD, FONE, RAMAL, FAX,
          FONE_ALTER, EMAIL, DOC_UNICO, SENHA, REFERENCIA, SEXO, MATRICULA_NASC,
          NRO_RIC, COD_ORGAO_RIC, DATA_EMI_RIC, EMAIL_ALTER, IND_CASA_PROPRIA, IND_RECURSO_FGTS, 
          NOME_SOCIAL, NRO_CERT_DIGITAL, DTEMI_CERT_DIGITAL, DTVAL_CERT_DIGITAL,    
          DDD_EMERGENCIA, FONE_EMERGENCIA, CONTATO_EMERGENCIA)
        SELECT COD_PESSOA, SYSDATE, APELIDO, COD_UF, COD_MUNIC, TIPO_LOGRA, COD_LOGRA,
          COD_BAIRRO, NUMERO, COMPLEMENTO, CEP, CPF, DT_NASC, DDD, FONE, RAMAL, FAX,
          FONE_ALTER, EMAIL, DOC_UNICO, SENHA, REFERENCIA, SEXO, MATRICULA_NASC,
          NRO_RIC, COD_ORGAO_RIC, DATA_EMI_RIC, EMAIL_ALTER, IND_CASA_PROPRIA, IND_RECURSO_FGTS, 
          NOME_SOCIAL, NRO_CERT_DIGITAL, DTEMI_CERT_DIGITAL, DTVAL_CERT_DIGITAL,    
          DDD_EMERGENCIA, FONE_EMERGENCIA, CONTATO_EMERGENCIA
        FROM FISICA
        WHERE COD_PESSOA = pCOD_PESSOA;
      END IF;
    END LOOP;

    UPDATE FISICA SET CPF	= pCPF, DT_NASC	= pDT_NASC, NOME_SOCIAL	= pNOME_SOCIAL, APELIDO	= pAPELIDO, SEXO	= pSEXO,
      TIPO_SANGUE	= pTIPO_SANGUE, FATOR_RH	= pFATOR_RH, NRO_CARTAO_SUS	= pNRO_CARTAO_SUS, CEP	= pCEP, COD_UF	= pCOD_UF,
      COD_MUNIC	= pCOD_MUNIC, TIPO_LOGRA	= pTIPO_LOGRA, COD_LOGRA	= pCOD_LOGRA, COD_BAIRRO	= pCOD_BAIRRO, NUMERO = pNUMERO,
      COMPLEMENTO	= pCOMPLEMENTO, DDD	= pDDD, FONE	= pFONE, DDD_FONE_CEL	= pDDD_FONE_CEL, FONE_CEL	= pFONE_CEL,
      FONE_ALTER	= pFONE_ALTER, RAMAL	= pRAMAL, EMAIL	= pEMAIL, EMAIL_ALTER	= pEMAIL_ALTER
    WHERE COD_PESSOA = pCOD_PESSOA;

    -- Verifica se houve alguma alteração de campo e grava no histtórico das 
    -- informações do funcionário
    FOR c_298 IN (SELECT * FROM RHFP0200 WHERE COD_FUNC = pCOD_PESSOA) LOOP
      IF ((pDT_NASC <> c_298.DATA_NASCIMENTO) OR
          pSEXO                 <> c_298.SEXO) OR
         (pCOD_MUNIC_NASCIMENTO <> c_298.COD_MUNIC_NASCIMENTO OR
         (pCOD_UF_NASCIMENTO    <> c_298.COD_UF_NASCIMENTO) OR
         (pCOD_NACIONALIDADE    <> c_298.COD_NACIONALIDADE) OR
         (pCOD_GRAU_INSTRUCAO   <> c_298.COD_GRAU_INSTRUCAO) OR
         (pCOD_ESTADO_CIVIL     <> c_298.COD_ESTADO_CIVIL) OR
         (pCOD_RACA_COR         <> c_298.COD_RACA_COR) OR
         (pCOD_PESSOA_PAI       <> c_298.COD_PESSOA_PAI) OR
         (pCOD_PESSOA_MAE       <> c_298.COD_PESSOA_MAE) OR
         (pCOD_PESSOA_CONJUGE   <> c_298.COD_PESSOA_CONJUGE) OR
         (pDATA_CASAMENTO       <> c_298.DATA_CASAMENTO) OR
         (pNRO_PIS_PASEP        <> c_298.NRO_PIS_PASEP) OR
         (pDATA_PIS_PASEP       <> c_298.DATA_PIS_PASEP) OR
         (pNRO_CONT_INDIVIDUAL  <> c_298.NRO_CONT_INDIVIDUAL) OR
         (pDATA_CONT_INDIVIDUAL <> c_298.DATA_CONT_INDIVIDUAL) OR
         (pNRO_CTPS             <> c_298.NRO_CTPS) OR
         (pNRO_SERIE_CTPS       <> c_298.NRO_SERIE_CTPS) OR
         (pDATA_EXP_CTPS        <> c_298.DATA_EXP_CTPS) OR
         (pCOD_UF_CTPS          <> c_298.COD_UF_CTPS) OR
         (pDATA_APOSENTADORIA   <> c_298.DATA_APOSENTADORIA) OR
         (pCOD_DEFICIENCIA      <> c_298.COD_DEFICIENCIA) OR
         (pIND_DEF_MOTORA       <> c_298.IND_DEF_MOTORA) OR
         (pIND_DEF_VISUAL       <> c_298.IND_DEF_VISUAL) OR
         (pIND_DEF_AUDITIVA     <> c_298.IND_DEF_AUDITIVA)) THEN
        INSERT INTO RHFP0298 (COD_FUNC, DATA_HISTORICO, COD_GRAU_INSTRUCAO, COD_ESTADO_CIVIL,
          COD_NACIONALIDADE, COD_PESSOA_PARENTE, COD_PESSOA_PAI, COD_NACION_PAI,
          COD_PESSOA_MAE, COD_NACION_MAE, COD_PESSOA_CONJUGE, COD_NACION_CONJUGE,
          DATA_NASCIMENTO, SEXO, COD_MUNIC_NASCIMENTO, COD_UF_NASCIMENTO,
          NRO_PIS_PASEP, DATA_PIS_PASEP, NRO_CONT_INDIVIDUAL, DATA_CONT_INDIVIDUAL,
          NRO_CTPS, NRO_SERIE_CTPS, DATA_EXP_CTPS, COD_UF_CTPS, NRO_TITULO,
          NRO_ZONA_TITULO, NRO_SECAO_TITULO, DATA_EMISSAO_TITULO,
          COD_UF_TITULO, COD_MUN_TITULO, NRO_HABILITACAO, NRO_PRONTUARIO_HAB,
          DATA_EMISSAO_HAB, COD_CATEGORIA_HAB, DATA_VALIDADE_HAB, NRO_IDENTIDADE,
          COD_ORG_IDENTIDADE, DATA_EMI_IDENTIDADE, COD_UF_IDENTIDADE, NRO_RESERVISTA,
          SERVICO_MILITAR, NRO_PASSAPORTE, DATA_EMI_PASSAPORTE, DATA_VAL_PASSAPORTE,
          ORGAO_EMISSOR_PASSAP, COD_CONSELHO, COD_ESCOLA, DATA_DIPLOMACAO,
          DATA_VALIDADE, NRO_REGISTRO, NRO_LIVRO, NRO_FOLHA, NRO_DOCUMENTO_01,
          NRO_DOCUMENTO_02, DATA_CASAMENTO, DATA_APOSENTADORIA, COD_RACA_COR,
          CANDIDATO, IND_DEFICIENCIA, COD_DEFICIENCIA, DATA_CHEG_BRASIL,
          DATA_NATURALIZACAO, IND_CASADO_BRASIL, NRO_TIT_DECLARATORIO,
          NRO_CARTEIRA_ESTRANG, COD_ORGAO_RNE, DATA_EMI_RNE, IND_FILHO_BRASIL,
          DATA_EMI_OC, COD_ORGAO_HAB, IND_DEF_MOTORA, IND_DEF_VISUAL, IND_DEF_AUDITIVA)
        SELECT COD_FUNC, SYSDATE, COD_GRAU_INSTRUCAO, COD_ESTADO_CIVIL,
          COD_NACIONALIDADE, COD_PESSOA_PARENTE, COD_PESSOA_PAI, COD_NACION_PAI,
          COD_PESSOA_MAE, COD_NACION_MAE, COD_PESSOA_CONJUGE, COD_NACION_CONJUGE,
          DATA_NASCIMENTO, SEXO, COD_MUNIC_NASCIMENTO, COD_UF_NASCIMENTO,
          NRO_PIS_PASEP, DATA_PIS_PASEP, NRO_CONT_INDIVIDUAL, DATA_CONT_INDIVIDUAL,
          NRO_CTPS, NRO_SERIE_CTPS, DATA_EXP_CTPS, COD_UF_CTPS, NRO_TITULO,
          NRO_ZONA_TITULO, NRO_SECAO_TITULO, DATA_EMISSAO_TITULO,
          COD_UF_TITULO, COD_MUN_TITULO, NRO_HABILITACAO, NRO_PRONTUARIO_HAB,
          DATA_EMISSAO_HAB, COD_CATEGORIA_HAB, DATA_VALIDADE_HAB, NRO_IDENTIDADE,
          COD_ORG_IDENTIDADE, DATA_EMI_IDENTIDADE, COD_UF_IDENTIDADE, NRO_RESERVISTA,
          SERVICO_MILITAR, NRO_PASSAPORTE, DATA_EMI_PASSAPORTE, DATA_VAL_PASSAPORTE,
          ORGAO_EMISSOR_PASSAP, COD_CONSELHO, COD_ESCOLA, DATA_DIPLOMACAO,
          DATA_VALIDADE, NRO_REGISTRO, NRO_LIVRO, NRO_FOLHA, NRO_DOCUMENTO_01,
          NRO_DOCUMENTO_02, DATA_CASAMENTO, DATA_APOSENTADORIA, COD_RACA_COR,
          CANDIDATO, IND_DEFICIENCIA, COD_DEFICIENCIA, DATA_CHEG_BRASIL,
          DATA_NATURALIZACAO, IND_CASADO_BRASIL, NRO_TIT_DECLARATORIO,
          NRO_CARTEIRA_ESTRANG, COD_ORGAO_RNE, DATA_EMI_RNE, IND_FILHO_BRASIL,
          DATA_EMI_OC, COD_ORGAO_HAB, IND_DEF_MOTORA, IND_DEF_VISUAL, IND_DEF_AUDITIVA
        FROM RHFP0200
        WHERE COD_FUNC = pCOD_PESSOA;
      END IF; 
    END LOOP;
    
    UPDATE RHFP0200 SET COD_PAIS_NASCTO	=	pCOD_PAIS_NASCTO, COD_MUNIC_NASCIMENTO	=	pCOD_MUNIC_NASCIMENTO, COD_UF_NASCIMENTO	=	pCOD_UF_NASCIMENTO,
      COD_NACIONALIDADE	=	pCOD_NACIONALIDADE, COD_GRAU_INSTRUCAO	=	pCOD_GRAU_INSTRUCAO, COD_ESTADO_CIVIL	=	pCOD_ESTADO_CIVIL, COD_RACA_COR	=	pCOD_RACA_COR,
      COD_PESSOA_PAI	=	pCOD_PESSOA_PAI, COD_PESSOA_MAE	=	pCOD_PESSOA_MAE, COD_PESSOA_CONJUGE	=	pCOD_PESSOA_CONJUGE, DATA_CASAMENTO	=	pDATA_CASAMENTO,
      NRO_PIS_PASEP	=	pNRO_PIS_PASEP, DATA_PIS_PASEP	=	pDATA_PIS_PASEP, NRO_CONT_INDIVIDUAL	=	pNRO_CONT_INDIVIDUAL, DATA_CONT_INDIVIDUAL	=	pDATA_CONT_INDIVIDUAL,
      NRO_CTPS	=	pNRO_CTPS, NRO_SERIE_CTPS	=	pNRO_SERIE_CTPS, DATA_EXP_CTPS	=	pDATA_EXP_CTPS, COD_UF_CTPS	=	pCOD_UF_CTPS, COD_TIPO_APOSENT	=	pCOD_TIPO_APOSENT,
      DATA_APOSENTADORIA	=	pDATA_APOSENTADORIA, NRO_BENEFICIO_INSS	=	pNRO_BENEFICIO_INSS, COD_DEFICIENCIA	=	pCOD_DEFICIENCIA, IND_DEF_MOTORA	=	pIND_DEF_MOTORA,
      IND_DEF_VISUAL	=	pIND_DEF_VISUAL, IND_DEF_AUDITIVA	=	pIND_DEF_AUDITIVA, IND_DEF_MENTAL	=	pIND_DEF_MENTAL, IND_DEF_INTELEC	=	pIND_DEF_INTELEC, INFO_COTA	=	pINFO_COTA,
      DETALHE_DEFICIENCIA	=	pDETALHE_DEFICIENCIA, TMP_RESID	=	pTMP_RESID, COND_ING	=	pCOND_ING, DATA_NASCIMENTO = pDT_NASC, SEXO = pSEXO,
      IND_DEFICIENCIA = CASE WHEN pCOD_DEFICIENCIA > 0 THEN 'S' ELSE 'N' END
    WHERE COD_FUNC = pCOD_PESSOA;
  END IF;
END;

PROCEDURE PROG_RESCISAO(
  pCOD_CONTRATO       RHFP0300.COD_CONTRATO%TYPE,
  pDATA_RESCISAO	     RHFP0350.DATA_RESCISAO%TYPE default null,
  pCOD_CAUSA_DEMISSAO	RHFP0350.COD_CAUSA_DEMISSAO%TYPE default null,
  pDATA_PAGAMENTO	    RHFP0350.DATA_PAGAMENTO%TYPE default null,
  pNRO_PROC_TRAB	     RHFP0350.NRO_PROC_TRAB%TYPE default null,
  pDIAS_ESTABILIDADE	 RHFP0350.DIAS_ESTABILIDADE%TYPE default null,
  pDATA_FIM_ESTAB	    RHFP0350.DATA_FIM_ESTAB%TYPE default null,
  pAVISO_INDENIZADO   RHFP0350.AVISO_INDENIZADO%TYPE default null,
  pDIAS_AV_TOTAL	     RHFP0350.DIAS_AV_TOTAL%TYPE default null,
  pDATA_AVISO_PREVIO	 RHFP0350.DATA_AVISO_PREVIO%TYPE default null,
  pDIAS_AVISO_PREVIO	 RHFP0350.DIAS_AVISO_PREVIO%TYPE default null,
  pDIAS_AV_TRAB	      RHFP0350.DIAS_AV_TRAB%TYPE default 0,
  pDATA_FIM_AVISO    	RHFP0350.DATA_FIM_AVISO%TYPE default null,
  pDIAS_AV_DISP      	RHFP0350.DIAS_AV_DISP%TYPE default null,
  pDIAS_AV_FUNC      	RHFP0350.DIAS_AV_FUNC%TYPE default null,  
  pCOD_OPERADOR      	RHFP0350.COD_OPERADOR%TYPE default null,
  pCONF_ANIV_EMP      CHAR DEFAULT 'N',
  pCONF_ANIV_FU       CHAR DEFAULT 'N',
  pCONF_REC_TRAB      CHAR DEFAULT 'N',
  pCONF_MULTA         CHAR DEFAULT 'N',
  pCONF_FER_PROG      CHAR DEFAULT 'N',
  pCONF_FER_CALC      CHAR DEFAULT 'N',
  pCONF_AV_TR30       CHAR DEFAULT 'N',
  pCONF_ESTAB         CHAR DEFAULT 'N'
) IS
  vIndMulta RHFP0350.IND_MULTA_DISSIDIO%TYPE;
  vCodFunc  RHFP0300.COD_FUNC%TYPE;
  vDataIni  RHFP0300.DATA_INICIO%TYPE;
  vCont     NUMBER;
  vData     DATE;  
  vDIAS_AV_FERIAS RHFP0350.DIAS_AV_FERIAS%TYPE;
  vDiasFerAvA     RHFP0350.DIAS_FER_AV_A%TYPE;
  vDiasFerAvV     RHFP0350.DIAS_FER_AV_V%TYPE;
  vDataFinal DATE;
  vDiasAdq    NUMBER;
  vTotDiasAdq NUMBER  := 0;
  vDescFaltas NUMBER  := 0;
  vDias936Fe  NUMBER  := 0; 
  vInserir    BOOLEAN := TRUE;
  vDiasEstab	 RHFP0350.DIAS_ESTABILIDADE%TYPE;
  vDataAvPrev RHFP0350.DATA_AVISO_PREVIO%TYPE;
  vDataFimAv 	RHFP0350.DATA_FIM_AVISO%TYPE;
  vDataFimEstab DATE;
  
  CURSOR cFERIAS IS
    SELECT PA.COD_CONTRATO, PA.DATA_INICIO_PERIODO, PA.DATA_FIM_PERIODO, PA.DIAS_PERIODO,
           SUM(NVL(PP.DIAS_FERIAS,0) + NVL(PP.DIAS_ABONO,0) + NVL(PP.TOTAL_FALTAS,0)) AS DIAS_GOZADOS,
           SUM(NVL(PP.TOTAL_FALTAS,0)) AS FALTAS_DESCONTADAS
    FROM RHFP0328 PP, RHFP0325 PA
    WHERE PA.COD_CONTRATO = pCOD_CONTRATO 
      AND PA.DATA_INICIO_PERIODO <= vDataFinal
      AND PA.DATA_ENCERRAMENTO IS NULL
      AND PP.COD_CONTRATO (+) = PA.COD_CONTRATO
      AND PP.DATA_INICIO_PERIODO (+) = PA.DATA_INICIO_PERIODO
    GROUP BY PA.COD_CONTRATO, PA.DATA_INICIO_PERIODO, PA.DATA_FIM_PERIODO, PA.DIAS_PERIODO;    
  
BEGIN
  IF (pDATA_RESCISAO IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A "Data da Rescisão" é obrigatória.#DATA_RESCISAO');
  ELSIF pCOD_CAUSA_DEMISSAO IS NULL THEN
    RAISE_APPLICATION_ERROR(-20001, 'A "Causa da Demissão" é obrigatória.#COD_CAUSA_DEMISSAO');
  ELSIF (pDATA_PAGAMENTO IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A "Data de Pagamento" é obrigatória.#DATA_PAGAMENTO');
  ELSIF (pAVISO_INDENIZADO IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A informação sobre a opção de "Aviso Prévio" é obrigatória.#AVISO_INDENIZADO');
  ELSIF (pAVISO_INDENIZADO = 'S') AND (pDATA_AVISO_PREVIO IS NULL) THEN  -- talvez possa retirar
    RAISE_APPLICATION_ERROR(-20001, 'A "Data do Aviso Prévio" é obrigatória.#DATA_AVISO_PREVIO');
  ELSIF (pAVISO_INDENIZADO = 'S') AND (pDIAS_AVISO_PREVIO IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'Os "Dias de Aviso Prévio" são obrigatórios.#DIAS_AVISO_PREVIO');
  ELSIF (pAVISO_INDENIZADO = 'S') AND (pDIAS_AV_TOTAL IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'Os "Dias de Aviso Prévio" são obrigatórios.#DIAS_AV_TOTAL');
  ELSIF (pAVISO_INDENIZADO = 'S') AND (pDIAS_AV_TOTAL IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'Os "Dias de Aviso Prévio" são obrigatórios.#DIAS_AV_TOTAL');
  ELSIF (pCONF_AV_TR30 <> 'S') AND (pDIAS_AV_TRAB) > 30 THEN
    RAISE_APPLICATION_ERROR(-20002,'Recomenda-se que os Dias de Aviso Trabalhado não sejam superiores a 30!'||CHR(13)||CHR(10)||'Tem CERTEZA que deseja continuar?#pCONF_AV_TR30');
  ELSIF (pDIAS_AV_TOTAL IS NOT NULL) AND (pDIAS_AV_TOTAL <> (nvl(pDIAS_AVISO_PREVIO,0) + nvl(pDIAS_AV_TRAB,0) + nvl(pDIAS_AV_DISP,0) + nvl(pDIAS_AV_FUNC,0))) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A totalização dos "Dias de Aviso Prévio" está incorreta.#DIAS_AV_TOTAL');
  END IF;

  SELECT COD_FUNC, DATA_INICIO
    INTO vCodFunc, vDataIni 
  FROM RHFP0300
  WHERE COD_CONTRATO = pCOD_CONTRATO;
  IF (TO_CHAR(pDATA_RESCISAO, 'DDMM') = TO_CHAR(vDataIni, 'DDMM')) AND (pCONF_ANIV_EMP = 'N') THEN
    RAISE_APPLICATION_ERROR(-20002,'Atenção: a Data de Rescisão é a mesma do Aniversário na Empresa.'||CHR(13)||CHR(10)||'Tem CERTEZA que deseja continuar?#pCONF_ANIV_EMP');
  ELSIF pDATA_RESCISAO < vDataIni THEN
    RAISE_APPLICATION_ERROR(-20001, 'Data da rescisão deve ser maior que a data de admissão do contrato!#DATA_RESCISAO');
  ELSIF pCONF_ANIV_FU = 'N' THEN
    SELECT COUNT(*)
      INTO vCont
    FROM FISICA
    WHERE COD_PESSOA = vCodFunc
      AND TO_CHAR(DT_NASC, 'DDMM') = TO_CHAR(pDATA_RESCISAO, 'DDMM');
    IF vCont > 0 THEN  
      RAISE_APPLICATION_ERROR(-20002,'Atenção: a Data de Rescisão é a mesma do Aniversário do Funcionário.'||CHR(13)||CHR(10)||'Tem CERTEZA que deseja continuar?#pCONF_ANIV_FU');
    END IF;
  END IF;
  
  FOR vAF IN 
    (SELECT TO_CHAR(CA.DATA_INICIO, 'DD/MM/YYYY')||' até '||TO_CHAR(CA.DATA_FIM, 'DD/MM/YYYY') AS PERIODO, 
            AF.NOME_CAUSA_AFAST
     FROM RHFP0100 AF, RHFP0306 CA
     WHERE CA.COD_CONTRATO = pCOD_CONTRATO
       AND ((pDATA_RESCISAO <= CA.DATA_INICIO AND CA.COD_CAUSA_AFAST <> 7)
        OR  (pDATA_RESCISAO BETWEEN CA.DATA_INICIO AND CA.DATA_FIM))
       AND AF.COD_CAUSA_AFAST = CA.COD_CAUSA_AFAST ) 
  LOOP
    RAISE_APPLICATION_ERROR(-20001,'Existe afastamento - de '||vAF.PERIODO||'.'||CHR(13)||CHR(10)||
                                   'Causa '||vAF.NOME_CAUSA_AFAST||'.'||CHR(13)||CHR(10)||
                                   'Será preciso encerrar o afastamento!#pDATA_RESCISAO');
  END LOOP;

  -- Falta a parte referente ao Controle de Estabilidade. Edv, olhar arq #FALTA_FAZER_API
  IF (pCONF_ESTAB <> 'S') THEN
    vDataFimEstab := PK_CT.RET_FIM_ESTAB(pCOD_CONTRATO, pDATA_RESCISAO, 'N'); --e testar se é maior que pDATA_FIM_ESTAB
    IF vDataFimEstab = pDATA_FIM_ESTAB THEN
      RAISE_APPLICATION_ERROR(-20002,'O contrato possui ESTABILIDADE até: '||to_char(vDataFimEstab, 'DD/MM/YYYY')||'.'||CHR(13)||CHR(10)||
                                     'Ao continuar, haverá o pagamento e projeção destes Dias de Estabilidade.'||CHR(13)||CHR(10)||
                                     'Tem CERTEZA que deseja continuar?#pCONF_ESTAB');
    ELSIF vDataFimEstab IS NOT NULL and pDATA_FIM_ESTAB IS NULL THEN
      RAISE_APPLICATION_ERROR(-20002,'O contrato possui ESTABILIDADE até: '||to_char(vDataFimEstab, 'DD/MM/YYYY')||'.'||CHR(13)||CHR(10)||
                                     'No entanto, esta estabilidade NÃO implica no pagamento e projeção destes dias.'||CHR(13)||CHR(10)||
                                     'Tem CERTEZA que deseja continuar?#pCONF_ESTAB');
    ELSIF vDataFimEstab > pDATA_FIM_ESTAB THEN
      RAISE_APPLICATION_ERROR(-20002,'O contrato possui ESTABILIDADE até: '||to_char(vDataFimEstab, 'DD/MM/YYYY')||'.'||CHR(13)||CHR(10)||
                                     'No entanto, a estabilidade a ser indenizada é até : '||to_char(pDATA_FIM_ESTAB, 'DD/MM/YYYY')||'.'||CHR(13)||CHR(10)||
                                     'Ao continuar, haverá o pagamento e projeção de '||pDIAS_ESTABILIDADE||' dias.'||CHR(13)||CHR(10)||
                                     'Tem CERTEZA que deseja continuar?#pCONF_ESTAB');
    END IF;
  END IF;  

  vIndMulta  := 'N';
  vDataFimAv := NVL(pDATA_FIM_ESTAB, pDATA_RESCISAO) + pDIAS_AVISO_PREVIO;
  IF (pCOD_CAUSA_DEMISSAO = 11) OR (pCOD_CAUSA_DEMISSAO = 13) THEN
    vData := NVL(vDataFimAv, pDATA_RESCISAO);
    SELECT MAX(DATA_DISSIDIO)
      INTO vData
    FROM (SELECT CI.COD_SINDICATO, SI.MES_BASE_DISSIDIO,
                 DECODE(TO_NUMBER(TO_CHAR(vData, 'MM')), SI.MES_BASE_DISSIDIO, TO_DATE('01/'||SI.MES_BASE_DISSIDIO||'/'||TO_CHAR(vData, 'YYYY'),'DD/MM/YYYY'), DECODE(RHYKUTILS.MENOR_NRO(SI.MES_BASE_DISSIDIO, TO_NUMBER(TO_CHAR(vData, 'MM'))), SI.MES_BASE_DISSIDIO, ADD_MONTHS(TO_DATE('01/'||SI.MES_BASE_DISSIDIO||'/'||TO_CHAR(vData, 'YYYY'),'DD/MM/YYYY'), 12), TO_DATE('01/'||SI.MES_BASE_DISSIDIO||'/'||TO_CHAR(vData, 'YYYY'),'DD/MM/YYYY'))) AS DATA_DISSIDIO
          FROM RHFP0329 SI, RHFP0312 CI
          WHERE CI.COD_CONTRATO = pCOD_CONTRATO
            AND pDATA_RESCISAO BETWEEN CI.DATA_INICIO AND CI.DATA_FIM
            AND SI.COD_SINDICATO = CI.COD_SINDICATO )
    WHERE DATA_DISSIDIO > vData
      AND DATA_DISSIDIO - vData <= 30;
    IF vData IS NOT NULL THEN
      IF pCONF_MULTA <> 'S' THEN
        RAISE_APPLICATION_ERROR(-20002,'A rescisão ocorrerá a menos de 30 dias da data base'||CHR(13)||CHR(10)||
                                       'do Dissídio ('||to_char(vData, 'dd/mm/yyyy')||'). Isto acarretará em MULTA'||CHR(13)||CHR(10)||
                                       'Tem CERTEZA que deseja continuar?#pCONF_MULTA');
      ELSE
        vIndMulta := 'S';
      END IF;
    END IF;
  END IF;
  
  IF pCONF_FER_PROG <> 'S' THEN
    FOR vFerP IN 
      (SELECT COUNT(*) AS QTDE,
              TO_CHAR(MAX(PF.DATA_PREVISTA_FERIAS), 'DD/MM/YYYY')||' até '||TO_CHAR(MAX(PF.DATA_RETORNO) -1, 'DD/MM/YYYY') AS PERIODO,
              SUM(PF.DIAS_FERIAS_CONCED) + SUM(PF.DIAS_ABONO_CONCED) AS DIAS
       FROM RHFP0327 PF
       WHERE PF.COD_CONTRATO = pCOD_CONTRATO
         AND (PF.DATA_PREVISTA_FERIAS >= pDATA_RESCISAO OR pDATA_RESCISAO < PF.DATA_RETORNO)
         AND PF.SITUACAO_PROGRAMACAO = 2 ) 
    LOOP
      IF vFerP.QTDE = 1 THEN
        RAISE_APPLICATION_ERROR(-20002,'O contrato possui Férias Programadas e Calculadas.'||CHR(13)||CHR(10)||
                                       'Período: '||vFerP.PERIODO||'. Dias: '||vFerP.DIAS||CHR(13)||CHR(10)||
                                       'Estas férias não serão desprogramadas.'||CHR(13)||CHR(10)||
                                       'Tem CERTEZA que deseja continuar?#pCONF_FER_PROG');
      ELSIF vFerP.QTDE > 1 THEN
        RAISE_APPLICATION_ERROR(-20002,'O contrato possui "'||vFerP.QTDE||'"Férias Programadas e Calculadas.'||CHR(13)||CHR(10)||
                                       'Último período: '||vFerP.PERIODO||'. Total de dias: '||vFerP.DIAS||CHR(13)||CHR(10)||
                                       'Estas férias não serão desprogramadas.'||CHR(13)||CHR(10)||
                                       'Tem CERTEZA que deseja continuar?#pCONF_FER_PROG');
      END IF;      
    END LOOP;
  END IF;

  IF pCONF_FER_CALC <> 'S' THEN
    FOR vFerC IN 
      (SELECT COUNT(*) AS QTDE,
              TO_CHAR(MAX(PF.DATA_PREVISTA_FERIAS), 'DD/MM/YYYY')||' até '||TO_CHAR(MAX(PF.DATA_RETORNO) -1, 'DD/MM/YYYY') AS PERIODO,
              SUM(PF.DIAS_FERIAS_CONCED) + SUM(PF.DIAS_ABONO_CONCED) AS DIAS
       FROM RHFP0327 PF
       WHERE PF.COD_CONTRATO = pCOD_CONTRATO
         AND (PF.DATA_PREVISTA_FERIAS >= pDATA_RESCISAO OR pDATA_RESCISAO < PF.DATA_RETORNO)
         AND PF.SITUACAO_PROGRAMACAO = 1 ) 
    LOOP
      IF vFerC.QTDE = 1 THEN
        RAISE_APPLICATION_ERROR(-20002,'O contrato possui Férias Programadas.'||CHR(13)||CHR(10)||
                                       'Período: '||vFerC.PERIODO||'. Dias: '||vFerC.DIAS||CHR(13)||CHR(10)||
                                       'Para continuar a rescisão, as férias serão desprogramadas.'||CHR(13)||CHR(10)||
                                       'Tem CERTEZA que deseja continuar?#pCONF_FER_PROG');
      ELSIF vFerC.QTDE > 1 THEN
        RAISE_APPLICATION_ERROR(-20002,'O contrato possui "'||vFerC.QTDE||'"Férias Programadas.'||CHR(13)||CHR(10)||
                                       'Último período: '||vFerC.PERIODO||'. Total de dias: '||vFerC.DIAS||CHR(13)||CHR(10)||
                                       'Para continuar a rescisão, as férias serão desprogramadas.'||CHR(13)||CHR(10)||
                                       'Tem CERTEZA que deseja continuar?#pCONF_FER_PROG');
      END IF;      
    END LOOP;
  END IF;

  IF pCONF_REC_TRAB = 'N' THEN
    SELECT NVL(MAX(RT.COD_RECLAMATORIA),0) 
      INTO vCont
    FROM RHRT0140 RT
    WHERE RT.COD_RECLAMANTE = vCodFunc;
    IF vCont > 0 THEN  
      RAISE_APPLICATION_ERROR(-20002,'Contrato possui uma reclamatória cadastrada. Código: '||vCont|| '.'||CHR(13)||CHR(10)||'Tem CERTEZA que deseja continuar?#pCONF_REC_TRAB');
    END IF;
  END IF;
  
  IF pCONF_FER_CALC = 'S' THEN
    DELETE FROM RHFP0306 CA
    WHERE CA.COD_CONTRATO = pCOD_CONTRATO
      AND CA.DATA_FIM >= pDATA_RESCISAO 
      AND CA.COD_CAUSA_AFAST =  7
      AND EXISTS (SELECT COD_CONTRATO
                  FROM RHFP0327 PF
                  WHERE PF.COD_CONTRATO = CA.COD_CONTRATO
                    AND PF.DATA_PREVISTA_FERIAS = CA.DATA_INICIO
                    AND PF.SITUACAO_PROGRAMACAO = 1
                    AND (PF.DATA_PREVISTA_FERIAS >= pDATA_RESCISAO OR pDATA_RESCISAO < PF.DATA_RETORNO)
                 );

    DELETE FROM RHFP0328 PP
    WHERE PP.COD_CONTRATO = pCOD_CONTRATO
      AND EXISTS (SELECT COD_CONTRATO
                  FROM RHFP0327 PF
                  WHERE PF.COD_CONTRATO = PP.COD_CONTRATO
                    AND PF.DATA_PREVISTA_FERIAS = PP.DATA_PREVISTA_FERIAS
                    AND PF.SITUACAO_PROGRAMACAO = 1
                    AND (PF.DATA_PREVISTA_FERIAS >= pDATA_RESCISAO OR pDATA_RESCISAO < PF.DATA_RETORNO)
                 );

    DELETE FROM RHFP0327 PF
    WHERE PF.COD_CONTRATO = pCOD_CONTRATO
      AND (PF.DATA_PREVISTA_FERIAS >= pDATA_RESCISAO OR pDATA_RESCISAO < PF.DATA_RETORNO)
      AND PF.SITUACAO_PROGRAMACAO = 1;
  END IF;  
  
  IF pAVISO_INDENIZADO = 'C' THEN
    vDataAvPrev := NULL;
  ELSE
    vDataAvPrev := NVL(pDATA_FIM_ESTAB + 1, pDATA_RESCISAO) - nvl(pDIAS_AV_TRAB,0); -- Não consta O +1 propositalmente. 
  END IF;
  vDIAS_AV_FERIAS := pDIAS_AVISO_PREVIO; -- talvez exista um tratamento diferente na causa 33 em relação as Férias.
  vDiasEstab      := pDATA_FIM_ESTAB - pDATA_RESCISAO;
  
  INSERT INTO RHFP0350 (COD_CONTRATO, DATA_RESCISAO, SITUACAO, DATA_INCLUSAO, COD_CAUSA_DEMISSAO, DATA_PAGAMENTO, NRO_PROC_TRAB, 
      DIAS_ESTABILIDADE, DATA_FIM_ESTAB, AVISO_INDENIZADO, DIAS_AV_TOTAL, DATA_AVISO_PREVIO, DIAS_AVISO_PREVIO, DIAS_AV_TRAB, 
      DATA_FIM_AVISO, DIAS_AV_DISP, DIAS_AV_FUNC, DIAS_AV_FERIAS, COD_OPERADOR, IND_MULTA_DISSIDIO,
      PARCELAMENTO, NRO_PROGRAMACAO, TIPO_PROGRAMACAO, IND_CALC_MENSAL, IND_DESC_FALTAS, IND_REC_GRRF) VALUES
     (pCOD_CONTRATO, pDATA_RESCISAO, 1, SYSDATE, pCOD_CAUSA_DEMISSAO, pDATA_PAGAMENTO, pNRO_PROC_TRAB, 
      vDiasEstab, pDATA_FIM_ESTAB, pAVISO_INDENIZADO, pDIAS_AV_TOTAL, vDataAvPrev, pDIAS_AVISO_PREVIO, pDIAS_AV_TRAB, 
      vDataFimAv, pDIAS_AV_DISP, pDIAS_AV_FUNC, vDIAS_AV_FERIAS, pCOD_OPERADOR, vIndMulta,
      0, 0, 'I', 'N', 'N', 'N');  
      
  UPDATE RHFP0300 SET DATA_FIM = pDATA_RESCISAO,
                      COD_CAUSA_DEMISSAO = pCOD_CAUSA_DEMISSAO
  WHERE COD_CONTRATO = pCOD_CONTRATO;
  
  --scInsPerAfast
  INSERT INTO RHFP0325 (COD_CONTRATO, DATA_INICIO_PERIODO, COD_ORIGEM, DATA_FIM_PERIODO, DATA_INCLUSAO) 
  SELECT SEL.COD_CONTRATO, 
         SEL.DATA_FIM + 1 AS DATA_INICIO_PERIODO, 
         11 AS COD_ORIGEM, 
         ADD_MONTHS(SEL.DATA_FIM,12) AS DATA_FIM_PERIODO, 
         SYSDATE AS DATA_INCLUSAO 
  FROM RHFP0300 CT, RHFP0306 SEL 
  WHERE SEL.COD_CONTRATO = pCOD_CONTRATO 
    AND SEL.DATA_FIM BETWEEN pDATA_RESCISAO -30 AND pDATA_RESCISAO 
    AND SEL.COD_CAUSA_AFAST IN (SELECT COD_CAUSA_AFAST FROM RHFP0100 WHERE IND_ENCERRA_180DIAS = 'S') 
    AND CT.COD_CONTRATO = SEL.COD_CONTRATO 
    AND SEL.COD_CONTRATO NOT IN (SELECT COD_CONTRATO FROM RHFP0325 
                                 WHERE COD_CONTRATO = SEL.COD_CONTRATO 
                                   AND DATA_FIM_PERIODO > SEL.DATA_FIM) 
    AND SEL.COD_CONTRATO NOT IN (SELECT AF.COD_CONTRATO 
                                 FROM RHFP0306 AF 
                                 WHERE AF.COD_CONTRATO = SEL.COD_CONTRATO 
                                   AND AF.DATA_INICIO  = SEL.DATA_FIM + 1 
                                   AND AF.COD_CAUSA_AFAST IN (SELECT COD_CAUSA_AFAST FROM RHFP0100 WHERE IND_ENCERRA_180DIAS = 'S'));

  IF (vDIAS_AV_FERIAS > 0) or (vDiasEstab > 0) or (pCOD_CAUSA_DEMISSAO = 12) THEN
    vDataFinal := pDATA_RESCISAO + vDIAS_AV_FERIAS + nvl(vDiasEstab, 0);
    INSERT INTO RHFP0325 (COD_CONTRATO, DATA_INICIO_PERIODO, COD_ORIGEM, DATA_FIM_PERIODO, DATA_INCLUSAO) --scIncPerAquis
    SELECT COD_CONTRATO, 
           DATA_FIM_PERIODO + 1 AS DATA_INICIO_PERIODO,
           11 AS COD_ORIGEM,
           ADD_MONTHS(DATA_FIM_PERIODO, 12) AS DATA_FIM_PERIODO,
           SYSDATE AS DATA_INCLUSAO
    FROM RHFP0325 PA
    WHERE PA.COD_CONTRATO = pCOD_CONTRATO
      AND PA.DATA_INICIO_PERIODO = (SELECT MAX(DATA_INICIO_PERIODO)
                                    FROM RHFP0325
                                    WHERE COD_CONTRATO = pCOD_CONTRATO
                                   )
      AND PA.DATA_FIM_PERIODO + 14 < vDataFinal;
  ELSE
    vDataFinal := pDATA_RESCISAO;
  END IF;

  --  vDias936Tot NUMBER    := 0;
  --  vFaltasTot NUMBER     := 0;
  FOR vFer IN cFERIAS LOOP
    --        if causa_demissao = 10 AND qrDiasAdqPerData_fim_periodo.Value > data_rescisao then  //Demissão por Justa Causa  -- Perde direiro a férias do periodo aquisitivo em andamento
    --            break;
    vDiasAdq := RHYF0043(pCOD_CONTRATO, vFer.DATA_INICIO_PERIODO, vDataFinal); 
    IF vFer.DIAS_GOZADOS < vFer.DIAS_PERIODO THEN
      IF vDiasAdq > 0 THEN
        vTotDiasAdq := vTotDiasAdq + vDiasAdq;
      END IF;
        /*if indDescFaltas then
        begin
          spFaltasPeriodo.ParamByName('v_Cod_Contrato').asFloat           := Cod_Contrato;
          spFaltasPeriodo.ParamByName('v_data_atual').asdatetime          := wk_data_final;
          spFaltasPeriodo.ParamByName('v_Data_inicio_periodo').asdatetime := qrDiasAdqPerData_inicio_periodo.Value;
          spFaltasPeriodo.ParamByName('v_Data_fim_periodo').asdatetime    := qrDiasAdqPerData_fim_periodo.Value;
          spFaltasPeriodo.ExecProc;
          DescFaltas := spFaltasPeriodo.Parambyname('v_Dias_Faltas').asFloat;

          //Verificar se existem faltas no Movimento para o Evento da Rescisão (17)
          //Realizado apenas para o Período Proporcional (aberto)
          if Data_Rescisao <= qrDiasAdqPer.FieldByName('DATA_FIM_PERIODO').AsDateTime then
          begin
            qryDescMov.ParamByName('COD_CONTRATO').AsFloat     := Cod_Contrato;
            qryDescMov.ParamByName('DATA_RESCISAO').AsDateTime := Data_Rescisao;
            qryDescMov.Open;
            DescFaltas := DescFaltas + qryDescMov.FieldByName('QTDE_VD').AsFloat;
            qryDescMov.Close;
          end;

          if DescFaltas > 0 then
          begin
            qrTabFaltas.Open;
            while not qrTabFaltas.Eof  do
            begin
              if DescFaltas > qrTabFaltasQtd_faltas.Value then
                qrTabFaltas.Next
              else
                break; 
            end;
            DescFaltas := (((qrDiasAdqPerDias_gozados.Value +
                             wk_dias_adq) *
                             qrTabFaltasDias_Desconto.Value) / 30);
            DescFaltas := DescFaltas - qrDiasAdqPer.FieldByName('FALTAS_DESCONTADAS').AsFloat;
            qrTabFaltas.Close;
          end;
          //Apenas por precaução
          if DescFaltas < 0 then
             DescFaltas := 0;
          if DescFaltas > wk_Dias_Adq then
             DescFaltas := wk_Dias_Adq;
        end
        else
          DescFaltas := 0;

        DescFeriasMP936(cod_contrato, qrDiasAdqPerData_Inicio_periodo.AsDateTime, wk_tot_dias_adq - DescFaltas);
        vDias936Tot := vDias936Tot + vDias936Fe;
        vFaltasTot  := vFaltasTot + DescFaltas;*/
      IF vInserir = TRUE THEN
        INSERT INTO RHFP0327 (COD_CONTRATO, DATA_PREVISTA_FERIAS, DIAS_FERIAS_CONCED, DIAS_FERIAS_GOZADOS, DATA_FERIAS, DATA_RETORNO, DATA_PAGAMENTO, 
            FALTAS_DESCONTADAS, TIPO_FERIAS, DESCONTA_FALTA, APROPRIACAO, AVISO_IMPRESSO, RECIBO_IMPRESSO, SITUACAO_PROGRAMACAO, NRO_PROGRAMACAO) values
          (pCOD_CONTRATO, pDATA_RESCISAO, vTotDiasAdq, vTotDiasAdq - vDescFaltas - vDias936Fe, pDATA_RESCISAO, pDATA_RESCISAO, pDATA_RESCISAO,
           vDescFaltas + vDias936Fe, 'R', 'N', TO_CHAR(pDATA_RESCISAO, 'MMYYYY'), 'N', 'S', 1, 0);
      ELSE
        UPDATE RHFP0327 SET DIAS_FERIAS_CONCED  = vTotDiasAdq,
                            DIAS_FERIAS_GOZADOS = vTotDiasAdq, -- - vFaltasTot - vDias936Tot:DIAS_FERIAS_GOZADOS,
                            FALTAS_DESCONTADAS  = FALTAS_DESCONTADAS + vDescFaltas + vDias936Fe
        WHERE COD_CONTRATO = pCOD_CONTRATO 
          AND DATA_PREVISTA_FERIAS = pDATA_RESCISAO;
      END IF;
      vInserir := FALSE;

      INSERT INTO RHFP0328 (COD_CONTRATO, DATA_PREVISTA_FERIAS, DATA_INICIO_PERIODO, DIAS_FERIAS, FALTA_FERIAS, TOTAL_FALTAS, 
          NRO_PROGRAMACAO, TIPO_PERIODO) values
        (pCOD_CONTRATO, pDATA_RESCISAO, vFER.DATA_INICIO_PERIODO, vDiasAdq - vDescFaltas - vDias936Fe, vDescFaltas + vDias936Fe, vDescFaltas + vDias936Fe,
         0, CASE WHEN vFER.DATA_FIM_PERIODO <= vDataFinal THEN 'V' ELSE 'A' END);
    END IF;
  END LOOP;
  
  FOR vFerAv IN 
    (SELECT NVL(MIN(TRUNC((pDIAS_AVISO_PREVIO / 30)))*2.5,0) AS QTDE_VD,
            NVL(SUM(PP.DIAS_FERIAS),0) AS DIAS_FERIAS_A 
     FROM RHFP0328 PP 
     WHERE PP.COD_CONTRATO = pCOD_CONTRATO
       AND PP.DATA_PREVISTA_FERIAS = pDATA_RESCISAO 
       AND PP.TIPO_PERIODO = 'A'
       AND PP.DIAS_FERIAS > 0)
  LOOP -- F.124 x F.56 
    IF vFerAv.QTDE_VD > 0 THEN
      IF vFerAv.QTDE_VD <=  vFerAv.DIAS_FERIAS_A THEN
        vDiasFerAvA := vFerAv.QTDE_VD;
        vDiasFerAvV := 0;
      ELSE
        vDiasFerAvA := vFerAv.DIAS_FERIAS_A;
        vDiasFerAvV := vFerAv.QTDE_VD - vDiasFerAvA;
      END IF;
      UPDATE RHFP0350 SET DIAS_FER_AV_A = vDiasFerAvA,
                          DIAS_FER_AV_V = vDiasFerAvV
      WHERE COD_CONTRATO = pCOD_CONTRATO;
    END IF;
  END LOOP;
  
END;

PROCEDURE PROG_RESCISAO_EXC(
  pCOD_CONTRATO  RHFP0300.COD_CONTRATO%TYPE,
  pCONF_BN       CHAR DEFAULT 'N',
  pCONF_VT       CHAR DEFAULT 'N',
  pCONF_AF       CHAR DEFAULT 'N',
  pCONF_PS       CHAR DEFAULT 'N',
  pCONF_RF       CHAR DEFAULT 'N',
  pCONF_BH       CHAR DEFAULT 'N'
) IS
  vDataResc  DATE;
  vSituacao  RHFP0350.SITUACAO%TYPE;
  vCodMestre RHFP0350.COD_MESTRE_EVENTO%TYPE;
  vCont      NUMBER;
BEGIN
  SELECT MAX(DATA_RESCISAO), NVL(MAX(SITUACAO), 0), NVL(MAX(COD_MESTRE_RESC), 0)
    INTO vDataResc, vSituacao, vCodMestre
  FROM RHFP0350
  WHERE COD_CONTRATO = pCOD_CONTRATO;      
  
  IF vSituacao = 0 THEN
    RAISE_APPLICATION_ERROR(-20001, 'Rescisão não encontrada!#COD_CONTRATO');
  ELSIF vSituacao <> 1 THEN 
    RAISE_APPLICATION_ERROR(-20001, 'NÃO é possível excluir a programação porque ela já esta calculada!#COD_CONTRATO');
  END IF;

  IF pCONF_BN <> 'S' THEN
    SELECT COUNT(*) 
      INTO vCont
    FROM RHFP0252
    WHERE COD_MESTRE_EVENTO = vCodMestre
      AND COD_CONTRATO      = pCOD_CONTRATO;
    IF vCont > 0 THEN
      RAISE_APPLICATION_ERROR(-20002,'O Contrato possui informações de "Benefícios e Convênios"'||CHR(13)||CHR(10)||
                                     'geradas para o Mestre de Rescisão. Para que seja possível'||CHR(13)||CHR(10)||
                                     'excluir a Programação de Rescisão é necessário eliminá-las!'||CHR(13)||CHR(10)||
                                     'Tem CERTEZA que deseja ELIMINAR e continuar?#pCONF_BH');
    END IF;
  END IF;
  IF pCONF_VT <> 'S' THEN
    SELECT COUNT(*) 
      INTO vCont
    FROM RHFP0389
    WHERE COD_MESTRE_EVENTO = vCodMestre
      AND COD_CONTRATO      = pCOD_CONTRATO;
    IF vCont > 0 THEN
      RAISE_APPLICATION_ERROR(-20002,'O Contrato possui informações de "Vale Transporte"'||CHR(13)||CHR(10)||
                                     'geradas para o Mestre de Rescisão. Para que seja possível'||CHR(13)||CHR(10)||
                                     'excluir a Programação de Rescisão é necessário eliminá-las!'||CHR(13)||CHR(10)||
                                     'Tem CERTEZA que deseja ELIMINAR e continuar?#pCONF_VT');
    END IF;
  END IF;
  IF pCONF_AF <> 'S' THEN
    SELECT COUNT(*) 
      INTO vCont
    FROM RHAF1140
    WHERE COD_MESTRE_EVENTO = vCodMestre
      AND COD_CONTRATO      = pCOD_CONTRATO;
    IF vCont > 0 THEN
      RAISE_APPLICATION_ERROR(-20002,'O Contrato possui informações de "Frequência"'||CHR(13)||CHR(10)||
                                     'geradas para o Mestre de Rescisão. Para que seja possível'||CHR(13)||CHR(10)||
                                     'excluir a Programação de Rescisão é necessário eliminá-las!'||CHR(13)||CHR(10)||
                                     'Tem CERTEZA que deseja ELIMINAR e continuar?#pCONF_AF');
    END IF;
  END IF;
  IF pCONF_PS <> 'S' THEN
    SELECT COUNT(*) 
      INTO vCont
    FROM RHFP0281
    WHERE COD_MESTRE_EVENTO = vCodMestre
      AND COD_CONTRATO      = pCOD_CONTRATO;
    IF vCont > 0 THEN
      RAISE_APPLICATION_ERROR(-20002,'O Contrato possui informações de "Plano de Saúde"'||CHR(13)||CHR(10)||
                                     'geradas para o Mestre de Rescisão. Para que seja possível'||CHR(13)||CHR(10)||
                                     'excluir a Programação de Rescisão é necessário eliminá-las!'||CHR(13)||CHR(10)||
                                     'Tem CERTEZA que deseja ELIMINAR e continuar?#pCONF_PS');
    END IF;
  END IF;
  IF pCONF_RF <> 'S' THEN
    SELECT COUNT(*) 
      INTO vCont
    FROM RHRF0130
    WHERE COD_MESTRE_EVENTO = vCodMestre
      AND COD_CONTRATO      = pCOD_CONTRATO;
    IF vCont > 0 THEN
      RAISE_APPLICATION_ERROR(-20002,'O Contrato possui informações de "Refeitórios"'||CHR(13)||CHR(10)||
                                     'geradas para o Mestre de Rescisão. Para que seja possível'||CHR(13)||CHR(10)||
                                     'excluir a Programação de Rescisão é necessário eliminá-las!'||CHR(13)||CHR(10)||
                                     'Tem CERTEZA que deseja ELIMINAR e continuar?#pCONF_RF');
    END IF;
  END IF;
  IF pCONF_BH <> 'S' THEN
    SELECT COUNT(*) 
      INTO vCont
    FROM RHFP0624
    WHERE COD_MESTRE_EVENTO = vCodMestre
      AND COD_CONTRATO      = pCOD_CONTRATO;
    IF vCont > 0 THEN
      RAISE_APPLICATION_ERROR(-20002,'O Contrato possui informações de "Banco de Horas"'||CHR(13)||CHR(10)||
                                     'geradas para o Mestre de Rescisão. Para que seja possível'||CHR(13)||CHR(10)||
                                     'excluir a Programação de Rescisão é necessário eliminá-las!'||CHR(13)||CHR(10)||
                                     'Tem CERTEZA que deseja ELIMINAR e continuar?#pCONF_BH');
    END IF;
  END IF;
 
  IF pCONF_BN = 'S' THEN
    UPDATE RHFP0258 SET SITUACAO_LANCAMENTO = 'A',
                        COD_MESTRE_EVENTO   = NULL, 
                        DATA_APROPRIACAO    = NULL
    WHERE COD_MESTRE_EVENTO   = vCodMestre
      AND SITUACAO_LANCAMENTO = 'L' 
      AND COD_CONTRATO        = pCOD_CONTRATO;
    DELETE RHFP0252
    WHERE COD_MESTRE_EVENTO   = vCodMestre
      AND COD_CONTRATO        = pCOD_CONTRATO;
	 END IF;
  IF pCONF_VT = 'S' THEN
    DELETE RHFP0389
    WHERE COD_MESTRE_EVENTO   = vCodMestre
      AND COD_CONTRATO        = pCOD_CONTRATO;
  END IF;
  IF pCONF_AF = 'S' THEN
    DELETE RHAF1140
    WHERE COD_MESTRE_EVENTO   = vCodMestre
      AND COD_CONTRATO        = pCOD_CONTRATO;
    DELETE RHAF1107
    WHERE COD_CONTRATO        = pCOD_CONTRATO;
  END IF;
  IF pCONF_PS = 'S' THEN
    DELETE RHFP0281
    WHERE COD_MESTRE_EVENTO   = vCodMestre
      AND COD_CONTRATO        = pCOD_CONTRATO;
    DELETE RHFP0295
    WHERE COD_MESTRE_EVENTO   = vCodMestre
      AND COD_CONTRATO        = pCOD_CONTRATO;
  END IF;
  IF pCONF_RF = 'S' THEN
    DELETE RHRF0130
    WHERE COD_MESTRE_EVENTO   = vCodMestre
      AND COD_CONTRATO        = pCOD_CONTRATO;
  END IF;
  IF pCONF_BH = 'S' THEN
    DELETE RHFP0624
    WHERE COD_MESTRE_EVENTO   = vCodMestre
      AND COD_CONTRATO        = pCOD_CONTRATO;
  END IF;

  DELETE
  FROM RHFP1004
  WHERE COD_EVENTO = 17
    AND COD_CONTRATO = pCOD_CONTRATO
    AND DATA_MOV BETWEEN TRUNC(vDataResc, 'MONTH') AND LAST_DAY(vDataResc)
    AND COD_ORIGEM_MOV = 16;

  UPDATE RHFP0300 SET DATA_FIM = NULL,
                      COD_CAUSA_DEMISSAO = NULL,
                      COD_SITUACAO = 1
  WHERE COD_CONTRATO = pCOD_CONTRATO;                        
     
  DELETE RHFP0350
  WHERE COD_CONTRATO = pCOD_CONTRATO;      
  
  DELETE RHFP0328
  WHERE COD_CONTRATO = pCOD_CONTRATO
    AND DATA_PREVISTA_FERIAS = vDataResc;      

  DELETE RHFP0327
  WHERE COD_CONTRATO = pCOD_CONTRATO
    AND DATA_PREVISTA_FERIAS = vDataResc;      
END;  

END;
/

CREATE OR REPLACE PACKAGE PK_TABELAS IS

PROCEDURE GRAVA_CARGO(
  pCOD_CLH	           IN OUT RHFP0500.COD_CLH	%TYPE ,
  pNOME_CLH	           RHFP0500.NOME_CLH	%TYPE default null, 
  pEDICAO_CLH	       RHFP0500.EDICAO_CLH	%TYPE default null,
  pCOD_CBO_2002	       RHFP0500.COD_CBO_2002	%TYPE default null,
  pSEQUENCIA_CBO_2002  RHFP0500.SEQUENCIA_CBO_2002	%TYPE default null,
  pCOD_GRUPO_OCUP	   RHFP0500.COD_GRUPO_OCUP	%TYPE default null,
  pNOME_CRACHA	       RHFP0500.NOME_CRACHA	%TYPE default null,
  pIND_CARGO_CHAVE	   RHFP0500.IND_CARGO_CHAVE	%TYPE default 'N',
  pDATA_ELABORACAO	   RHFP0500.DATA_ELABORACAO	%TYPE default null,
  pIND_DESC_DETALHADA  RHFP0500.IND_DESC_DETALHADA	%TYPE default 'T'
);

PROCEDURE GRAVA_ORGANOGRAMA(
  pCOD_ORGANOGRAMA    IN OUT RHFP0400.COD_ORGANOGRAMA%TYPE,
  pNOME_ORGANOGRAMA   RHFP0400.NOME_ORGANOGRAMA%TYPE default null, 	
  pCOD_NIVEL_ORG      RHFP0400.COD_NIVEL_ORG%TYPE default null, 	
  pCOD_PESSOA         RHFP0400.COD_PESSOA%TYPE default null, 	
  pCOD_CUSTO_CONTABIL RHFP0400.COD_CUSTO_CONTABIL%TYPE default null, 	
  pLATITUDE           RHFP0400.LATITUDE%TYPE default null, 	
  pLONGITUDE          RHFP0400.LONGITUDE%TYPE default null,
  pCONF_PJ            CHAR DEFAULT 'N'
);

PROCEDURE GRAVA_SINDICATO(
  pCOD_SINDICATO      IN OUT RHFP0329.COD_SINDICATO%TYPE, 
  pCOD_PESSOA         RHFP0329.COD_PESSOA%TYPE default null,  
  pCOD_BANCO          RHFP0329.COD_BANCO%TYPE default null, 
  pCOD_AGENCIA        RHFP0329.COD_AGENCIA%TYPE default null, 
  pCTA_CORRENTE       RHFP0329.CTA_CORRENTE%TYPE default null, 
  pMES_BASE_DISSIDIO  RHFP0329.MES_BASE_DISSIDIO%TYPE default null, 
  pCOD_ENTIDADE_SIND  RHFP0329.COD_ENTIDADE_SIND%TYPE default null, 
  pIND_ADTO_13SAL_JAN RHFP0329.IND_ADTO_13SAL_JAN%TYPE default 'N', 
  pIND_ADTO_13SAL_FEV RHFP0329.IND_ADTO_13SAL_FEV%TYPE default 'N', 
  pIND_ADTO_13SAL_MAR RHFP0329.IND_ADTO_13SAL_MAR%TYPE default 'N', 
  pIND_ADTO_13SAL_ABR RHFP0329.IND_ADTO_13SAL_ABR%TYPE default 'N', 
  pIND_ADTO_13SAL_MAI RHFP0329.IND_ADTO_13SAL_MAI%TYPE default 'N', 
  pIND_ADTO_13SAL_JUN RHFP0329.IND_ADTO_13SAL_JUN%TYPE default 'N', 
  pIND_ADTO_13SAL_JUL RHFP0329.IND_ADTO_13SAL_JUL%TYPE default 'N', 
  pIND_ADTO_13SAL_AGO RHFP0329.IND_ADTO_13SAL_AGO%TYPE default 'N', 
  pIND_ADTO_13SAL_SET RHFP0329.IND_ADTO_13SAL_SET%TYPE default 'N', 
  pIND_ADTO_13SAL_OUT RHFP0329.IND_ADTO_13SAL_OUT%TYPE default 'N', 
  pIND_ADTO_13SAL_NOV RHFP0329.IND_ADTO_13SAL_NOV%TYPE default 'N', 
  pIND_ADTO_13SAL_DEZ RHFP0329.IND_ADTO_13SAL_DEZ%TYPE default 'N',
  pCONF_PESSOA        CHAR DEFAULT 'N'
);

PROCEDURE GRAVA_FISICA (
  pCOD_PESSOA  IN OUT PESSOA.COD_PESSOA%TYPE,
  pNOME_PESSOA PESSOA.NOME_PESSOA%TYPE default null,
  pCPF	        FISICA.CPF%TYPE default null,
  pDT_NASC	    FISICA.DT_NASC%TYPE default null,
  pNOME_SOCIAL	FISICA.NOME_SOCIAL%TYPE default null,
  pAPELIDO	    FISICA.APELIDO%TYPE default null,
  pSEXO	       FISICA.SEXO%TYPE default null,
  pCEP	        FISICA.CEP%TYPE default null,
  pCOD_UF	     FISICA.COD_UF%TYPE default null,
  pCOD_MUNIC  	FISICA.COD_MUNIC%TYPE default null,
  pTIPO_LOGRA	 FISICA.TIPO_LOGRA%TYPE default null,
  pCOD_LOGRA	  FISICA.COD_LOGRA%TYPE default null,
  pCOD_BAIRRO	 FISICA.COD_BAIRRO%TYPE default null,
  pNUMERO	     FISICA.NUMERO%TYPE default null,
  pCOMPLEMENTO	FISICA.COMPLEMENTO%TYPE default null,
  pDDD	        FISICA.DDD%TYPE default null,
  pFONE	       FISICA.FONE%TYPE default null,
  pDDD_FONE_CEL	FISICA.DDD_FONE_CEL%TYPE default null,
  pFONE_CEL	   FISICA.FONE_CEL%TYPE default null,
  pEMAIL	      FISICA.EMAIL%TYPE default null,
  pCONF_CPF    CHAR DEFAULT 'N'
);

PROCEDURE GRAVA_JURIDICA (
  pCOD_PESSOA    IN OUT PESSOA.COD_PESSOA%TYPE, 
  pNOME_PESSOA   PESSOA.NOME_PESSOA%TYPE DEFAULT NULL, 
  pNOME_EXTENSO  PESSOA.NOME_EXTENSO%TYPE DEFAULT NULL, 
  pFANTASIA       JURIDICA.FANTASIA%TYPE DEFAULT NULL, 
  pCNPJ           JURIDICA.CGC%TYPE DEFAULT NULL, 
  pCOD_UF         JURIDICA.COD_UF%TYPE DEFAULT NULL,       
  pCOD_MUNIC      JURIDICA.COD_MUNIC%TYPE DEFAULT NULL, 
  pTIP_LOGRA      JURIDICA.TIP_LOGRA%TYPE DEFAULT NULL, 
  pCOD_LOGRA      JURIDICA.COD_LOGRA%TYPE DEFAULT NULL, 
  pCOD_BAIRRO     JURIDICA.COD_BAIRRO%TYPE DEFAULT NULL, 
  pNUMERO         JURIDICA.NUMERO%TYPE DEFAULT NULL, 
  pCOMPLEMENTO    JURIDICA.COMPLEMENTO%TYPE DEFAULT NULL,
  pCEP            JURIDICA.CEP%TYPE DEFAULT NULL, 
  pDDD            JURIDICA.DDD%TYPE DEFAULT NULL, 
  pFONE           JURIDICA.FONE%TYPE DEFAULT NULL,
  pEMAIL          JURIDICA.EMAIL%TYPE DEFAULT NULL
);

PROCEDURE GRAVA_VD(
  pCOD_VD IN OUT RHFP1000.COD_VD%TYPE, 
  pNOME_VD RHFP1000.NOME_VD%TYPE default null, 
  pCOD_CLASSE_VD RHFP1000.COD_CLASSE_VD%TYPE default null, 
  pTIPO_VD RHFP1000.TIPO_VD%TYPE default null, 
  pTIPO_DADOS RHFP1000.TIPO_DADOS%TYPE default null, 
  pQTDE_LIMITE RHFP1000.QTDE_LIMITE%TYPE default null, 
  pHORAS_LIMITE RHFP1000.HORAS_LIMITE%TYPE default null, 
  pDIAS_LIMITE RHFP1000.DIAS_LIMITE%TYPE default null, 
  pVALOR_LIMITE RHFP1000.VALOR_LIMITE%TYPE default null, 
  pIND_PRESTACAO RHFP1000.IND_PRESTACAO%TYPE default 'N', 
  pINDICE_MULTIPLICA RHFP1000.INDICE_MULTIPLICA%TYPE default 1, 
  pCOD_VD_CONTRA RHFP1000.COD_VD_CONTRA%TYPE default null, 
  pCOD_VD_NEGATIVO RHFP1000.COD_VD_NEGATIVO%TYPE default null, 
  pIND_DIGITACAO RHFP1000.IND_DIGITACAO%TYPE default 'S', 
  pCOD_ESOCIAL RHFP1000.COD_ESOCIAL%TYPE default null, 
  pDATA_INCLUSAO RHFP1000.DATA_INCLUSAO%TYPE default trunc(sysdate), 
  pDATA_FIM RHFP1000.DATA_FIM%TYPE default null, 
  pIND_DEDUTORA RHFP1000.IND_DEDUTORA%TYPE default 'N', 
  pIND_PER_ANT RHFP1000.IND_PER_ANT%TYPE default 'N'
);

END;
/

CREATE OR REPLACE PACKAGE BODY PK_TABELAS IS

PROCEDURE GRAVA_CARGO(
  pCOD_CLH	          IN OUT RHFP0500.COD_CLH	%TYPE,
  pNOME_CLH	          RHFP0500.NOME_CLH%TYPE           default null, 
  pEDICAO_CLH	      RHFP0500.EDICAO_CLH%TYPE         default null,
  pCOD_CBO_2002	      RHFP0500.COD_CBO_2002%TYPE       default null,
  pSEQUENCIA_CBO_2002 RHFP0500.SEQUENCIA_CBO_2002%TYPE default null,
  pCOD_GRUPO_OCUP	  RHFP0500.COD_GRUPO_OCUP%TYPE     default null,
  pNOME_CRACHA	      RHFP0500.NOME_CRACHA%TYPE        default null,
  pIND_CARGO_CHAVE	  RHFP0500.IND_CARGO_CHAVE%TYPE    default 'N',
  pDATA_ELABORACAO	  RHFP0500.DATA_ELABORACAO%TYPE    default null,
  pIND_DESC_DETALHADA RHFP0500.IND_DESC_DETALHADA%TYPE default 'T'
) IS
BEGIN
  IF (pNOME_CLH IS NULL) OR (LENGTH(pNOME_CLH) < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Nome do Cargo" deve ser informado.#NOME_CLH');
  ELSIF (pEDICAO_CLH IS NULL) OR (LENGTH(pEDICAO_CLH) < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A "Edição do Cargo" deve ser informada.#EDICAO_CLH');
/*  ELSIF (pCOD_CBO_2002 IS NULL) OR (LENGTH(pCOD_CBO_2002) < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "CBO" deve ser informado.#COD_CBO_2002');
  ELSIF (pSEQUENCIA_CBO_2002 IS NULL) OR (pSEQUENCIA_CBO_2002 < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "CBO" deve ser informado.#SEQUENCIA_CBO_2002'); */
  END IF; 
  
  IF pCOD_CLH = 0 THEN --Inclusão
    SELECT NVL(MAX(COD_CLH), 0) + 1
      INTO pCOD_CLH
    FROM RHFP0500;
    INSERT INTO RHFP0500 (COD_CLH, NOME_CLH, EDICAO_CLH, COD_CBO_2002, SEQUENCIA_CBO_2002, COD_GRUPO_OCUP, NOME_CRACHA, IND_CARGO_CHAVE, DATA_ELABORACAO, 
        IND_DESC_DETALHADA, ACUM_CARGO) VALUES 
      (pCOD_CLH, pNOME_CLH, pEDICAO_CLH, pCOD_CBO_2002, pSEQUENCIA_CBO_2002, pCOD_GRUPO_OCUP, pNOME_CRACHA, pIND_CARGO_CHAVE, pDATA_ELABORACAO, 
        pIND_DESC_DETALHADA, 'N');  
  ELSE
    UPDATE RHFP0500 SET NOME_CLH	= pNOME_CLH, EDICAO_CLH	= pEDICAO_CLH, COD_CBO_2002	= pCOD_CBO_2002, SEQUENCIA_CBO_2002	= pSEQUENCIA_CBO_2002, COD_GRUPO_OCUP	= pCOD_GRUPO_OCUP,
        NOME_CRACHA	= pNOME_CRACHA, IND_CARGO_CHAVE	= pIND_CARGO_CHAVE, DATA_ELABORACAO	= pDATA_ELABORACAO, IND_DESC_DETALHADA	= pIND_DESC_DETALHADA
    WHERE COD_CLH = pCOD_CLH; 
  END IF; 
END;

PROCEDURE GRAVA_ORGANOGRAMA(
  pCOD_ORGANOGRAMA    IN OUT RHFP0400.COD_ORGANOGRAMA%TYPE,
  pNOME_ORGANOGRAMA   RHFP0400.NOME_ORGANOGRAMA%TYPE default null, 	
  pCOD_NIVEL_ORG      RHFP0400.COD_NIVEL_ORG%TYPE default null, 	
  pCOD_PESSOA         RHFP0400.COD_PESSOA%TYPE default null, 	
  pCOD_CUSTO_CONTABIL RHFP0400.COD_CUSTO_CONTABIL%TYPE default null, 	
  pLATITUDE           RHFP0400.LATITUDE%TYPE default null, 	
  pLONGITUDE          RHFP0400.LONGITUDE%TYPE default null,
  pCONF_PJ            CHAR DEFAULT 'N'
) IS
  vCont NUMBER;
BEGIN
  IF (pNOME_ORGANOGRAMA IS NULL) OR (LENGTH(pNOME_ORGANOGRAMA) < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Nome do Organograma" deve ser informado.#NOME_ORGANOGRAMA');
  ELSIF (pCOD_NIVEL_ORG IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Nível do Organograma" deve ser informado.#COD_NIVEL_ORG');
  ELSIF (pCOD_NIVEL_ORG < 1) OR (pCOD_NIVEL_ORG > 8) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Nível do Organograma" deve ser entre "1" e "8".#COD_NIVEL_ORG');
  ELSIF (pCOD_NIVEL_ORG <= 3) AND (pCOD_PESSOA IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'Campo "Pessoa Jurídica" deve ser informado.#COD_PESSOA');
  END IF; 
  
  IF pCOD_ORGANOGRAMA = 0 THEN --Inclusão
    IF (pCONF_PJ = 'N') AND (pCOD_PESSOA IS NOT NULL) THEN
      SELECT COUNT(*)
        INTO vCont
      FROM RHFP0400
      WHERE COD_PESSOA = pCOD_PESSOA;
      IF vCont > 0 THEN
        RAISE_APPLICATION_ERROR(-20002,'Pessoa já está sendo utilizada por outro organograma.'||CHR(13)||CHR(10)||'Tem CERTEZA que deseja continuar?#pCONF_PJ');
      END IF;
    END IF;
    
    SELECT NVL(MAX(COD_ORGANOGRAMA), 0) + 1
      INTO pCOD_ORGANOGRAMA
    FROM RHFP0400;
    INSERT INTO RHFP0400 (COD_ORGANOGRAMA, COD_NIVEL_ORG, COD_PESSOA, NOME_ORGANOGRAMA, COD_CUSTO_CONTABIL, LATITUDE, LONGITUDE) VALUES 
      (pCOD_ORGANOGRAMA, pCOD_NIVEL_ORG, pCOD_PESSOA, pNOME_ORGANOGRAMA, pCOD_CUSTO_CONTABIL, pLATITUDE, pLONGITUDE);  
  ELSE
    UPDATE RHFP0400 SET COD_NIVEL_ORG	= pCOD_NIVEL_ORG, COD_PESSOA	= pCOD_PESSOA, NOME_ORGANOGRAMA	= pNOME_ORGANOGRAMA,
        COD_CUSTO_CONTABIL	= pCOD_CUSTO_CONTABIL, LATITUDE	= pLATITUDE, LONGITUDE	= pLONGITUDE
    WHERE COD_ORGANOGRAMA = pCOD_ORGANOGRAMA; 
  END IF; 
END;

PROCEDURE GRAVA_SINDICATO(
  pCOD_SINDICATO      IN OUT RHFP0329.COD_SINDICATO%TYPE, 
  pCOD_PESSOA         RHFP0329.COD_PESSOA%TYPE default null,  
  pCOD_BANCO          RHFP0329.COD_BANCO%TYPE default null, 
  pCOD_AGENCIA        RHFP0329.COD_AGENCIA%TYPE default null, 
  pCTA_CORRENTE       RHFP0329.CTA_CORRENTE%TYPE default null, 
  pMES_BASE_DISSIDIO  RHFP0329.MES_BASE_DISSIDIO%TYPE default null, 
  pCOD_ENTIDADE_SIND  RHFP0329.COD_ENTIDADE_SIND%TYPE default null, 
  pIND_ADTO_13SAL_JAN RHFP0329.IND_ADTO_13SAL_JAN%TYPE default 'N', 
  pIND_ADTO_13SAL_FEV RHFP0329.IND_ADTO_13SAL_FEV%TYPE default 'N', 
  pIND_ADTO_13SAL_MAR RHFP0329.IND_ADTO_13SAL_MAR%TYPE default 'N', 
  pIND_ADTO_13SAL_ABR RHFP0329.IND_ADTO_13SAL_ABR%TYPE default 'N', 
  pIND_ADTO_13SAL_MAI RHFP0329.IND_ADTO_13SAL_MAI%TYPE default 'N', 
  pIND_ADTO_13SAL_JUN RHFP0329.IND_ADTO_13SAL_JUN%TYPE default 'N', 
  pIND_ADTO_13SAL_JUL RHFP0329.IND_ADTO_13SAL_JUL%TYPE default 'N', 
  pIND_ADTO_13SAL_AGO RHFP0329.IND_ADTO_13SAL_AGO%TYPE default 'N', 
  pIND_ADTO_13SAL_SET RHFP0329.IND_ADTO_13SAL_SET%TYPE default 'N', 
  pIND_ADTO_13SAL_OUT RHFP0329.IND_ADTO_13SAL_OUT%TYPE default 'N', 
  pIND_ADTO_13SAL_NOV RHFP0329.IND_ADTO_13SAL_NOV%TYPE default 'N', 
  pIND_ADTO_13SAL_DEZ RHFP0329.IND_ADTO_13SAL_DEZ%TYPE default 'N',
  pCONF_PESSOA        CHAR DEFAULT 'N'
) IS
  vCodSind RHFP0329.COD_PESSOA%TYPE default null;
BEGIN
  IF (pCOD_PESSOA IS NULL) OR (pCOD_PESSOA < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, '"Pessoa Jurídica" deve ser informada.#COD_PESSOA');
  ELSIF (pMES_BASE_DISSIDIO IS NULL)  THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Mês Base Dissídio" deve ser informado.#MES_BASE_DISSIDIO');
  ELSIF (pMES_BASE_DISSIDIO < 1) OR (pMES_BASE_DISSIDIO > 12) THEN
    RAISE_APPLICATION_ERROR(-20001, '"Mês Base Dissídio" deve ser entre Jan e Dez.#MES_BASE_DISSIDIO');
  ELSIF pCONF_PESSOA = 'N' THEN
    SELECT NVL(MAX(COD_PESSOA),0)
      INTO vCodSind
    FROM RHFP0329
    WHERE COD_PESSOA = pCOD_PESSOA;
    IF vCodSind > 0 THEN
      RAISE_APPLICATION_ERROR(-20002,'Já existe um sindicato '||vCodSind||' cadastrado com a mesma Pessoa Jurídica.'||CHR(13)||CHR(10)||'Tem CERTEZA que deseja continuar?#COD_PESSOA');
    END IF;
  END IF;

  -- realizar as validações
  
  IF pCOD_SINDICATO = 0 THEN -- INCLUSÃO
    SELECT NVL(MAX(COD_SINDICATO), 0) + 1
      INTO pCOD_SINDICATO
    FROM RHFP0329;
    INSERT INTO RHFP0329 (COD_SINDICATO, COD_PESSOA, COD_BANCO, COD_AGENCIA, CTA_CORRENTE, MES_BASE_DISSIDIO, COD_ENTIDADE_SIND, IND_ADTO_13SAL_JAN, 
        IND_ADTO_13SAL_FEV, IND_ADTO_13SAL_MAR, IND_ADTO_13SAL_ABR, IND_ADTO_13SAL_MAI, IND_ADTO_13SAL_JUN, 
        IND_ADTO_13SAL_JUL, IND_ADTO_13SAL_AGO, IND_ADTO_13SAL_SET, IND_ADTO_13SAL_OUT, IND_ADTO_13SAL_NOV, 
        IND_ADTO_13SAL_DEZ)
      VALUES (pCOD_SINDICATO, pCOD_PESSOA, pCOD_BANCO, pCOD_AGENCIA, pCTA_CORRENTE, pMES_BASE_DISSIDIO, pCOD_ENTIDADE_SIND, pIND_ADTO_13SAL_JAN, 
        pIND_ADTO_13SAL_FEV, pIND_ADTO_13SAL_MAR, pIND_ADTO_13SAL_ABR, pIND_ADTO_13SAL_MAI, pIND_ADTO_13SAL_JUN, 
        pIND_ADTO_13SAL_JUL, pIND_ADTO_13SAL_AGO, pIND_ADTO_13SAL_SET, pIND_ADTO_13SAL_OUT, pIND_ADTO_13SAL_NOV, 
        pIND_ADTO_13SAL_DEZ);    
  ELSE -- ATUALIZAÇÃO
    UPDATE RHFP0329 SET COD_PESSOA = pCOD_PESSOA, COD_BANCO = pCOD_BANCO, COD_AGENCIA = pCOD_AGENCIA, CTA_CORRENTE = pCTA_CORRENTE,
        MES_BASE_DISSIDIO = pMES_BASE_DISSIDIO, COD_ENTIDADE_SIND = pCOD_ENTIDADE_SIND, IND_ADTO_13SAL_JAN = pIND_ADTO_13SAL_JAN,
        IND_ADTO_13SAL_FEV = pIND_ADTO_13SAL_FEV, IND_ADTO_13SAL_MAR = pIND_ADTO_13SAL_MAR, IND_ADTO_13SAL_ABR = pIND_ADTO_13SAL_ABR, IND_ADTO_13SAL_MAI = pIND_ADTO_13SAL_MAI, IND_ADTO_13SAL_JUN = pIND_ADTO_13SAL_JUN,
        IND_ADTO_13SAL_JUL = pIND_ADTO_13SAL_JUL, IND_ADTO_13SAL_AGO = pIND_ADTO_13SAL_AGO, IND_ADTO_13SAL_SET = pIND_ADTO_13SAL_SET, IND_ADTO_13SAL_OUT = pIND_ADTO_13SAL_OUT, IND_ADTO_13SAL_NOV = pIND_ADTO_13SAL_NOV, IND_ADTO_13SAL_DEZ = pIND_ADTO_13SAL_DEZ
    WHERE COD_SINDICATO = pCOD_SINDICATO;    
  END IF;
END;

PROCEDURE GRAVA_FISICA (
  pCOD_PESSOA  IN OUT PESSOA.COD_PESSOA%TYPE,
  pNOME_PESSOA  PESSOA.NOME_PESSOA%TYPE default null,
  pCPF	        FISICA.CPF%TYPE default null,
  pDT_NASC	    FISICA.DT_NASC%TYPE default null,
  pNOME_SOCIAL  FISICA.NOME_SOCIAL%TYPE default null,
  pAPELIDO	    FISICA.APELIDO%TYPE default null,
  pSEXO	        FISICA.SEXO%TYPE default null,
  pCEP	        FISICA.CEP%TYPE default null,
  pCOD_UF	    FISICA.COD_UF%TYPE default null,
  pCOD_MUNIC  	FISICA.COD_MUNIC%TYPE default null,
  pTIPO_LOGRA	FISICA.TIPO_LOGRA%TYPE default null,
  pCOD_LOGRA	FISICA.COD_LOGRA%TYPE default null,
  pCOD_BAIRRO	FISICA.COD_BAIRRO%TYPE default null,
  pNUMERO	    FISICA.NUMERO%TYPE default null,
  pCOMPLEMENTO	FISICA.COMPLEMENTO%TYPE default null,
  pDDD	        FISICA.DDD%TYPE default null,
  pFONE	        FISICA.FONE%TYPE default null,
  pDDD_FONE_CEL	FISICA.DDD_FONE_CEL%TYPE default null,
  pFONE_CEL	    FISICA.FONE_CEL%TYPE default null,
  pEMAIL	    FISICA.EMAIL%TYPE default null,
  pCONF_CPF     CHAR DEFAULT 'N'
) IS
  vCodPes PESSOA.COD_PESSOA%TYPE;
BEGIN
  IF (pNOME_PESSOA IS NULL) OR (LENGTH(pNOME_PESSOA) < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Nome da Pessoa" é obrigatório.#NOME_PESSOA');
  END IF;

  IF (pCPF IS NULL) OR (LENGTH(pCPF) < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "CPF" é obrigatório.#CPF');
  ELSIF (RHYKUTILS.VALIDA_CPF(pCPF) <> 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "CPF" é inválido.#CPF');
  ELSIF pCONF_CPF = 'N' THEN
    SELECT NVL(MAX(COD_PESSOA),0)
      INTO vCodPes
    FROM FISICA
    WHERE CPF = pCPF;
    IF vCodPes > 0 THEN
      RAISE_APPLICATION_ERROR(-20002,'Já existe a pessoa '||vCodPes||' cadastrada com o mesmo CPF.'||CHR(13)||CHR(10)||'Tem CERTEZA que deseja continuar?#CPF');
    END IF;
  END IF;

  IF (pDT_NASC IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A "Data de Nascimento" é obrigatória.#DT_NASC');
  ELSIF (pCEP IS NOT NULL AND LENGTH(pCEP) < 8) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "CEP" é inválido.#CEP');
  ELSIF (pCOD_UF IS NOT NULL AND LENGTH(pCOD_UF) < 2) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A informação de "UF" é inválida.#COD_UF');
  ELSIF (pSEXO IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Gênero" é obrigatório.#SEXO');
  ELSIF (pSEXO <> 'M') AND (pSEXO <> 'F') AND (pSEXO <> 'N') THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Gênero" é inválido.#SEXO');
  END IF;

  IF pCOD_PESSOA = 0 THEN
    SELECT NVL(MAX(COD_PESSOA), 0) + 1
      INTO pCOD_PESSOA
    FROM PESSOA;
    INSERT INTO PESSOA (COD_PESSOA, NOME_PESSOA, TIPO_PESSOA) VALUES
      (pCOD_PESSOA, pNOME_PESSOA, 'F');

    INSERT INTO FISICA (COD_PESSOA, CPF, DT_NASC, NOME_SOCIAL, APELIDO, SEXO, 
        CEP, COD_UF, COD_MUNIC, TIPO_LOGRA, COD_LOGRA, COD_BAIRRO, NUMERO, COMPLEMENTO, DDD, FONE, DDD_FONE_CEL,
        FONE_CEL, EMAIL) VALUES
      (pCOD_PESSOA, pCPF, pDT_NASC, pNOME_SOCIAL, pAPELIDO, pSEXO,
       pCEP, pCOD_UF, pCOD_MUNIC, pTIPO_LOGRA, pCOD_LOGRA, pCOD_BAIRRO, pNUMERO, pCOMPLEMENTO, pDDD, pFONE, pDDD_FONE_CEL,
       pFONE_CEL, pEMAIL);
  ELSE
    UPDATE PESSOA SET NOME_PESSOA = pNOME_PESSOA
    WHERE COD_PESSOA = pCOD_PESSOA;

    UPDATE FISICA 
      SET CPF          = pCPF, 
          DT_NASC      = pDT_NASC, 
          NOME_SOCIAL  = pNOME_SOCIAL, 
          APELIDO      = pAPELIDO, 
          SEXO         = pSEXO,
          CEP          = pCEP,
          COD_UF       = pCOD_UF,
          COD_MUNIC    = pCOD_MUNIC, 
          TIPO_LOGRA   = pTIPO_LOGRA, 
          COD_LOGRA	   = pCOD_LOGRA,
          COD_BAIRRO   = pCOD_BAIRRO,
          NUMERO       = pNUMERO,
          COMPLEMENTO  = pCOMPLEMENTO, 
          DDD          = pDDD,
          FONE         = pFONE, 
          DDD_FONE_CEL = pDDD_FONE_CEL,
          FONE_CEL     = pFONE_CEL,
          EMAIL        = pEMAIL
    WHERE COD_PESSOA = pCOD_PESSOA;

  END IF;
END;

PROCEDURE GRAVA_JURIDICA (
  pCOD_PESSOA    IN OUT PESSOA.COD_PESSOA%TYPE, 
  pNOME_PESSOA   PESSOA.NOME_PESSOA%TYPE DEFAULT NULL, 
  pNOME_EXTENSO  PESSOA.NOME_EXTENSO%TYPE DEFAULT NULL, 
  pFANTASIA       JURIDICA.FANTASIA%TYPE DEFAULT NULL, 
  pCNPJ           JURIDICA.CGC%TYPE DEFAULT NULL, 
  pCOD_UF         JURIDICA.COD_UF%TYPE DEFAULT NULL,       
  pCOD_MUNIC      JURIDICA.COD_MUNIC%TYPE DEFAULT NULL, 
  pTIP_LOGRA      JURIDICA.TIP_LOGRA%TYPE DEFAULT NULL, 
  pCOD_LOGRA      JURIDICA.COD_LOGRA%TYPE DEFAULT NULL, 
  pCOD_BAIRRO     JURIDICA.COD_BAIRRO%TYPE DEFAULT NULL, 
  pNUMERO         JURIDICA.NUMERO%TYPE DEFAULT NULL, 
  pCOMPLEMENTO    JURIDICA.COMPLEMENTO%TYPE DEFAULT NULL,
  pCEP            JURIDICA.CEP%TYPE DEFAULT NULL, 
  pDDD            JURIDICA.DDD%TYPE DEFAULT NULL, 
  pFONE           JURIDICA.FONE%TYPE DEFAULT NULL,
  pEMAIL          JURIDICA.EMAIL%TYPE DEFAULT NULL
) IS
BEGIN
  IF (pNOME_PESSOA IS NULL) OR (LENGTH(pNOME_PESSOA) < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Nome da Pessoa" é obrigatório.#NOME_PESSOA');
  END IF;

  IF (pCNPJ IS NOT NULL AND LENGTH(pCNPJ) <> 14) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "CNPJ" é inválido.#CNPJ');
  ELSIF (pCNPJ IS NOT NULL AND ISNUMBER(pCNPJ) <> 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "CNPJ" é inválido.#CNPJ');
  END IF;

  IF pCOD_PESSOA = 0 THEN
    SELECT NVL(MAX(COD_PESSOA), 0) + 1
      INTO pCOD_PESSOA
    FROM PESSOA;
    INSERT INTO PESSOA (COD_PESSOA, NOME_PESSOA, TIPO_PESSOA, NOME_EXTENSO) VALUES
      (pCOD_PESSOA, pNOME_PESSOA, 'J', pNOME_EXTENSO);

    INSERT INTO JURIDICA (COD_PESSOA, FANTASIA, CGC, 
       COD_UF, COD_MUNIC, TIP_LOGRA, COD_LOGRA, COD_BAIRRO, NUMERO, COMPLEMENTO,
       CEP, DDD, FONE, EMAIL) VALUES
      (pCOD_PESSOA, pFANTASIA, pCNPJ,
       pCOD_UF, pCOD_MUNIC, pTIP_LOGRA, pCOD_LOGRA, pCOD_BAIRRO, pNUMERO, pCOMPLEMENTO, pCEP, pDDD, pFONE, pEMAIL);
  ELSE
    UPDATE PESSOA 
      SET NOME_PESSOA = pNOME_PESSOA,
          NOME_EXTENSO = pNOME_EXTENSO
    WHERE COD_PESSOA = pCOD_PESSOA;

    UPDATE JURIDICA 
      SET FANTASIA     = pFANTASIA, 
          CGC          = pCNPJ, 
          COD_UF       = pCOD_UF,
          COD_MUNIC    = pCOD_MUNIC, 
          TIP_LOGRA    = pTIP_LOGRA, 
          COD_LOGRA	   = pCOD_LOGRA,
          COD_BAIRRO   = pCOD_BAIRRO,
          NUMERO       = pNUMERO,
          COMPLEMENTO  = pCOMPLEMENTO, 
          CEP          = pCEP,
          DDD          = pDDD,
          FONE         = pFONE,
          EMAIL        = pEMAIL
    WHERE COD_PESSOA = pCOD_PESSOA;

  END IF;
END;

PROCEDURE GRAVA_VD(
  pCOD_VD IN OUT RHFP1000.COD_VD%TYPE, 
  pNOME_VD RHFP1000.NOME_VD%TYPE default null, 
  pCOD_CLASSE_VD RHFP1000.COD_CLASSE_VD%TYPE default null, 
  pTIPO_VD RHFP1000.TIPO_VD%TYPE default null, 
  pTIPO_DADOS RHFP1000.TIPO_DADOS%TYPE default null, 
  pQTDE_LIMITE RHFP1000.QTDE_LIMITE%TYPE default null, 
  pHORAS_LIMITE RHFP1000.HORAS_LIMITE%TYPE default null, 
  pDIAS_LIMITE RHFP1000.DIAS_LIMITE%TYPE default null, 
  pVALOR_LIMITE RHFP1000.VALOR_LIMITE%TYPE default null, 
  pIND_PRESTACAO RHFP1000.IND_PRESTACAO%TYPE default 'N', 
  pINDICE_MULTIPLICA RHFP1000.INDICE_MULTIPLICA%TYPE default 1, 
  pCOD_VD_CONTRA RHFP1000.COD_VD_CONTRA%TYPE default null, 
  pCOD_VD_NEGATIVO RHFP1000.COD_VD_NEGATIVO%TYPE default null, 
  pIND_DIGITACAO RHFP1000.IND_DIGITACAO%TYPE default 'S', 
  pCOD_ESOCIAL RHFP1000.COD_ESOCIAL%TYPE default null, 
  pDATA_INCLUSAO RHFP1000.DATA_INCLUSAO%TYPE default trunc(sysdate), 
  pDATA_FIM RHFP1000.DATA_FIM%TYPE default null, 
  pIND_DEDUTORA RHFP1000.IND_DEDUTORA%TYPE default 'N', 
  pIND_PER_ANT RHFP1000.IND_PER_ANT%TYPE default 'N'
) IS
  vTipoContra RHFP1000.TIPO_VD%TYPE;
  vSistContra RHFP1000.IND_SISTEMA%TYPE;
BEGIN
  IF (pNOME_VD IS NULL) OR (LENGTH(pNOME_VD) < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Nome do VD" deve ser informado.#NOME_VD');
  ELSIF (pTIPO_DADOS IS NULL) OR (LENGTH(pTIPO_DADOS) < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Tipo de Informação do VD" deve ser informado.#TIPO_DADOS');
  ELSIF (pTIPO_VD IS NULL) OR (LENGTH(pTIPO_VD) < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Tipo do VD" deve ser informado.#TIPO_VD');
  END IF; 
  IF pCOD_VD_CONTRA IS NOT NULL THEN
    SELECT MAX(TIPO_VD), MAX(IND_SISTEMA)
      INTO vTipoContra, vSistContra
    FROM RHFP1000
    WHERE COD_VD = pCOD_VD_CONTRA;
    IF vTipoContra = 'C' THEN
      RAISE_APPLICATION_ERROR(-20001, 'O VD de Contrapartida NÃO pode ser do tipo Calculado.#COD_VD_CONTRA');
    END IF;
    IF vSistContra = 'S' THEN
      RAISE_APPLICATION_ERROR(-20001, 'O VD de Contrapartida NÃO pode ser do Sistema.#COD_VD_CONTRA');
    END IF;
  END IF;
  
  IF pCOD_VD = 0 THEN --Inclusão
    SELECT NVL(MAX(COD_VD), 0) + 1
      INTO pCOD_VD
    FROM RHFP1000;
    INSERT INTO RHFP1000 (COD_VD, NOME_VD, COD_CLASSE_VD, TIPO_VD, TIPO_DADOS, QTDE_LIMITE, HORAS_LIMITE, DIAS_LIMITE, VALOR_LIMITE, IND_PRESTACAO,
        INDICE_MULTIPLICA, COD_VD_CONTRA, COD_VD_NEGATIVO, IND_DIGITACAO, COD_ESOCIAL, DATA_INCLUSAO, DATA_FIM, IND_DEDUTORA, IND_PER_ANT, 
        IND_SISTEMA, IND_TETO_REMUN)
      VALUES (pCOD_VD, pNOME_VD, pCOD_CLASSE_VD, pTIPO_VD, pTIPO_DADOS, pQTDE_LIMITE, pHORAS_LIMITE, pDIAS_LIMITE, pVALOR_LIMITE, pIND_PRESTACAO,
        pINDICE_MULTIPLICA, pCOD_VD_CONTRA, pCOD_VD_NEGATIVO, pIND_DIGITACAO, pCOD_ESOCIAL, pDATA_INCLUSAO, pDATA_FIM, pIND_DEDUTORA, pIND_PER_ANT, 
        'N', 'N');
  ELSE
    UPDATE RHFP1000 SET NOME_VD	= pNOME_VD, COD_CLASSE_VD	= pCOD_CLASSE_VD, TIPO_VD	= pTIPO_VD, TIPO_DADOS	= pTIPO_DADOS, QTDE_LIMITE	= pQTDE_LIMITE,
        HORAS_LIMITE	= pHORAS_LIMITE, DIAS_LIMITE	= pDIAS_LIMITE, VALOR_LIMITE	= pVALOR_LIMITE, IND_PRESTACAO	= pIND_PRESTACAO, 
        INDICE_MULTIPLICA	= pINDICE_MULTIPLICA, COD_VD_CONTRA	= pCOD_VD_CONTRA, COD_VD_NEGATIVO	= pCOD_VD_NEGATIVO, IND_DIGITACAO	= pIND_DIGITACAO,
        COD_ESOCIAL	= pCOD_ESOCIAL, DATA_INCLUSAO	= pDATA_INCLUSAO, DATA_FIM	= pDATA_FIM, IND_DEDUTORA	= pIND_DEDUTORA, IND_PER_ANT	= pIND_PER_ANT
    WHERE COD_VD = pCOD_VD; 
  END IF; 
END;

END;
/

CREATE OR REPLACE PACKAGE PK_VT IS

PROCEDURE GRAVA_MESTRE(
  pCOD_MESTRE           IN OUT RHFP0385.COD_MESTRE%TYPE,
  pNOME_MESTRE          RHFP0385.NOME_MESTRE%TYPE default null,
  pREF_APROPRIACAO      RHFP0385.REF_APROPRIACAO%TYPE default null,
  pDATA_INICIO_DISTRIB  RHFP0385.DATA_INICIO_DISTRIB%TYPE default null,
  pDATA_FIM_DISTRIB     RHFP0385.DATA_FIM_DISTRIB%TYPE default null,
  pNUMERO_DIAS_PASSAGEM RHFP0385.NUMERO_DIAS_PASSAGEM%TYPE default null,
  pDATA_INICIO_VERIFICA RHFP0385.DATA_INICIO_VERIFICA%TYPE default null,
  pDATA_FIM_VERIFICA    RHFP0385.DATA_FIM_VERIFICA%TYPE default null,
  pCONF_APROP           CHAR DEFAULT 'N',
  pCONF_DIST            CHAR DEFAULT 'N'   ,
  pCONF_VERIF           CHAR DEFAULT 'N'   
);

PROCEDURE GRAVA_LINHA(
  pCOD_LINHA       IN OUT RHFP0380.COD_LINHA%TYPE,
  pNOME_LINHA      RHFP0380.NOME_LINHA%TYPE default null,
  pCOD_TIPO_LINHA  RHFP0380.NOME_LINHA%TYPE default null,
  pCOD_PESSOA      RHFP0380.NOME_LINHA%TYPE default null,
  pCOD_VD          RHFP0380.NOME_LINHA%TYPE default null,
  pCOD_VD_INTEGRAL RHFP0380.NOME_LINHA%TYPE default null
);

PROCEDURE RHFP0381_HI(
  pOperacao            VARCHAR2 default 'I', -- I, A ou E
  pHistorico           VARCHAR2 default 'N', -- S ou N
  pCOD_LINHA           RHFP0380.COD_LINHA%TYPE,
  pDATA_INICIO         DATE default null,
  pDATA_FIM            DATE default null,
  pVALOR_TARIFA        RHFP0381.VALOR_TARIFA%TYPE default null,
  pCOD_MOTIVO          RHFP0381.COD_MOTIVO%TYPE default null);

PROCEDURE RHFP0384_HI(
  pOperacao             VARCHAR2 default 'I', -- I, A ou E
  pHistorico            VARCHAR2 default 'N', -- S ou N
  pCOD_CONTRATO         RHFP0384.COD_CONTRATO%TYPE,
  pCOD_LINHA            RHFP0380.COD_LINHA%TYPE,
  pDATA_INICIO          DATE default null,
  pDATA_FIM             DATE default null,
  pRECEBE_DINHEIRO      RHFP0384.RECEBE_DINHEIRO%TYPE, 
  pIND_RECEBE_FERIADO   RHFP0384.IND_RECEBE_FERIADO%TYPE,
  pTIPOS_VALES_CONTRATO RHFP0384.TIPOS_VALES_CONTRATO%TYPE,
  pQTD_PASSAGENS_DIA    RHFP0384.QTD_PASSAGENS_DIA%TYPE, 
  pQTD_PASSAGENS_SEG    RHFP0384.QTD_PASSAGENS_SEG%TYPE, 
  pQTD_PASSAGENS_TER    RHFP0384.QTD_PASSAGENS_TER%TYPE, 
  pQTD_PASSAGENS_QUA    RHFP0384.QTD_PASSAGENS_QUA%TYPE, 
  pQTD_PASSAGENS_QUI    RHFP0384.QTD_PASSAGENS_QUI%TYPE, 
  pQTD_PASSAGENS_SEX    RHFP0384.QTD_PASSAGENS_SEX%TYPE, 
  pQTD_PASSAGENS_SAB    RHFP0384.QTD_PASSAGENS_SAB%TYPE, 
  pQTD_PASSAGENS_DOM    RHFP0384.QTD_PASSAGENS_DOM%TYPE, 
  pQTD_PASSAGENS_MES    RHFP0384.QTD_PASSAGENS_MES%TYPE);

PROCEDURE DISTR_VT(
  pCOD_MESTRE    	RHFP0385.COD_MESTRE%TYPE,
  pTIPO_FILTRO    RHWF0406.TIPO_FILTRO%TYPE, 
  pFILTRO_CTS     RHWF0406.FILTRO_CTS%TYPE,
  pCOD_OPERADOR   OPERADOR.COD_OPERADOR%TYPE,
  pCONF_REDIST    CHAR DEFAULT 'N',
  pCONF_MENSAL    CHAR DEFAULT 'N'
);  

PROCEDURE DISTR_MANUT(
  pOperacao        VARCHAR2 default 'I', -- I ou A 
  pCOD_CONTRATO   	RHFP0383.COD_CONTRATO%TYPE,
  pCOD_MESTRE     	RHFP0383.COD_MESTRE%TYPE,
  pCOD_LINHA      	RHFP0383.COD_LINHA%TYPE,
  pQTD_PASSAGENS   RHFP0383.QTD_PASSAGENS%TYPE,
  pVALOR_PASSAGENS RHFP0383.VALOR_PASSAGENS%TYPE,
  pCOD_OPERADOR    OPERADOR.COD_OPERADOR%TYPE
);  

PROCEDURE GERA_VT_FOLHA(
  pCOD_MESTRE_EVENTO 	RHFP1003.COD_MESTRE_EVENTO%TYPE,
  pTIPO_FILTRO        RHWF0406.TIPO_FILTRO%TYPE, 
  pFILTRO_CTS         RHWF0406.FILTRO_CTS%TYPE,
  pCOD_OPERADOR       OPERADOR.COD_OPERADOR%TYPE,
  pCONF_REGERA    CHAR DEFAULT 'N'
);  

END;
 
/

CREATE OR REPLACE PACKAGE BODY PK_VT IS

PROCEDURE GRAVA_MESTRE(
  pCOD_MESTRE           IN OUT RHFP0385.COD_MESTRE%TYPE,
  pNOME_MESTRE          RHFP0385.NOME_MESTRE%TYPE default null,
  pREF_APROPRIACAO      RHFP0385.REF_APROPRIACAO%TYPE default null,
  pDATA_INICIO_DISTRIB  RHFP0385.DATA_INICIO_DISTRIB%TYPE default null,
  pDATA_FIM_DISTRIB     RHFP0385.DATA_FIM_DISTRIB%TYPE default null,
  pNUMERO_DIAS_PASSAGEM RHFP0385.NUMERO_DIAS_PASSAGEM%TYPE default null,
  pDATA_INICIO_VERIFICA RHFP0385.DATA_INICIO_VERIFICA%TYPE default null,
  pDATA_FIM_VERIFICA    RHFP0385.DATA_FIM_VERIFICA%TYPE default null,
  pCONF_APROP           CHAR DEFAULT 'N', 
  pCONF_DIST            CHAR DEFAULT 'N',
  pCONF_VERIF           CHAR DEFAULT 'N' 
) IS
  vDataAprop DATE;
  vCont      NUMBER;
BEGIN
  IF (pNOME_MESTRE IS NULL) OR (LENGTH(pNOME_MESTRE) < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Nome do Mestre" deve ser informado.#NOME_MESTRE');
  ELSIF (pREF_APROPRIACAO IS NULL) OR (LENGTH(pREF_APROPRIACAO) < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A "Apropriação" deve ser informada.#REF_APROPRIACAO');
  ELSIF LENGTH(RTRIM(LTRIM(pREF_APROPRIACAO))) <> 6 THEN
    RAISE_APPLICATION_ERROR(-20001, '"Apropriação" inválida.#REF_APROPRIACAO');
  ELSIF ISNUMBER(pREF_APROPRIACAO) <> 1 THEN
    RAISE_APPLICATION_ERROR(-20001, '"Apropriação" inválida.#REF_APROPRIACAO');
  ELSIF (pDATA_INICIO_DISTRIB IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Início da Distribuição" deve ser informado.#DATA_INICIO_DISTRIB');
  ELSIF (pDATA_FIM_DISTRIB IS NULL) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Fim da Distribuição" deve ser informado.#DATA_FIM_DISTRIB');
  ELSIF (pDATA_INICIO_DISTRIB > pDATA_FIM_DISTRIB) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A data de Início deve ser MENOR que a data de fim da Distribuição.#DATA_INICIO_DISTRIB');
  ELSIF (pNUMERO_DIAS_PASSAGEM IS NULL) OR (pNUMERO_DIAS_PASSAGEM < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Número de Dias de Passagens" deve ser informado.#NUMERO_DIAS_PASSAGEM');
  END IF;  
  BEGIN
    vDataAprop := LAST_DAY(to_date('01'||pREF_APROPRIACAO, 'DDMMYYYY'));
  EXCEPTION
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(-20001, '"Apropriação" inválida.#REF_APROPRIACAO');
  END;
  IF (pCONF_APROP = 'N') AND ((vDataAprop < pDATA_INICIO_DISTRIB) OR (vDataAprop > pDATA_INICIO_DISTRIB)) THEN
    RAISE_APPLICATION_ERROR(-20002,'A Apropriação NÃO está contida no Período de Distribuição!'||CHR(13)||CHR(10)||'Tem CERTEZA que deseja continuar?#pCONF_APROP'); 
  END IF;
  IF pCONF_DIST = 'N' THEN
    SELECT COUNT(*) 
      INTO vCont
    FROM RHFP0385  
    WHERE (pDATA_INICIO_DISTRIB BETWEEN DATA_INICIO_DISTRIB AND DATA_FIM_DISTRIB
           OR pDATA_FIM_DISTRIB BETWEEN DATA_INICIO_DISTRIB AND DATA_FIM_DISTRIB)
       AND (COD_MESTRE <> pCOD_MESTRE);
    IF vCont > 0 THEN
      RAISE_APPLICATION_ERROR(-20002,'Este período de Distribuição está sobreposto a outro já existente!'||CHR(13)||CHR(10)||'Tem CERTEZA que deseja continuar?#pCONF_DIST'); 
    END IF;   
  END IF;
  IF (pDATA_INICIO_VERIFICA IS NOT NULL) OR (pDATA_FIM_VERIFICA IS NOT NULL) THEN
    IF pDATA_INICIO_VERIFICA IS NULL THEN
      RAISE_APPLICATION_ERROR(-20001, 'Se informado um Período de Verificação, ele deve ser válido.#DATA_INICIO_VERIFICA');
    ELSIF pDATA_FIM_VERIFICA IS NULL THEN
      RAISE_APPLICATION_ERROR(-20001, 'Se informado um Período de Verificação, ele deve ser válido.#DATA_FIM_VERIFICA');
    ELSIF pDATA_INICIO_VERIFICA > pDATA_FIM_VERIFICA THEN
      RAISE_APPLICATION_ERROR(-20001, 'Se informado um Período de Verificação, ele deve ser válido.#DATA_INICIO_VERIFICA');
    ELSIF (pCONF_VERIF = 'N') AND (pDATA_FIM_VERIFICA > pDATA_INICIO_DISTRIB) THEN 
      RAISE_APPLICATION_ERROR(-20002,'O Período de Verificação está sobreposto ao Período de Distribuição.'||CHR(13)||CHR(10)||'Tem CERTEZA que deseja continuar?#pCONF_VERIF'); 
    END IF;
  END IF; 
  
  IF pCOD_MESTRE = 0 THEN --Inclusão
    SELECT NVL(MAX(COD_MESTRE), 0) + 1
      INTO pCOD_MESTRE
    FROM RHFP0385;
    INSERT INTO RHFP0385 (COD_MESTRE, NOME_MESTRE, REF_APROPRIACAO, DATA_INICIO_DISTRIB, DATA_FIM_DISTRIB, 
          NUMERO_DIAS_PASSAGEM, DATA_INICIO_VERIFICA, DATA_FIM_VERIFICA) VALUES 
      (pCOD_MESTRE, pNOME_MESTRE, TO_CHAR(vDataAprop, 'YYYYMM'), pDATA_INICIO_DISTRIB, pDATA_FIM_DISTRIB, 
          pNUMERO_DIAS_PASSAGEM, pDATA_INICIO_VERIFICA, pDATA_FIM_VERIFICA);  
  ELSE
    UPDATE RHFP0385 SET NOME_MESTRE = pNOME_MESTRE, REF_APROPRIACAO = TO_CHAR(vDataAprop, 'YYYYMM'), 
           DATA_INICIO_DISTRIB = pDATA_INICIO_DISTRIB, DATA_FIM_DISTRIB = pDATA_FIM_DISTRIB, NUMERO_DIAS_PASSAGEM = pNUMERO_DIAS_PASSAGEM, 
           DATA_INICIO_VERIFICA = pDATA_INICIO_VERIFICA, DATA_FIM_VERIFICA = pDATA_FIM_VERIFICA
    WHERE COD_MESTRE = pCOD_MESTRE;  
  END IF;
END;

PROCEDURE GRAVA_LINHA(
  pCOD_LINHA       IN OUT RHFP0380.COD_LINHA%TYPE,
  pNOME_LINHA      RHFP0380.NOME_LINHA%TYPE default null,
  pCOD_TIPO_LINHA  RHFP0380.NOME_LINHA%TYPE default null,
  pCOD_PESSOA      RHFP0380.NOME_LINHA%TYPE default null,
  pCOD_VD          RHFP0380.NOME_LINHA%TYPE default null,
  pCOD_VD_INTEGRAL RHFP0380.NOME_LINHA%TYPE default null
) IS
BEGIN
  IF (pNOME_LINHA IS NULL) OR (LENGTH(pNOME_LINHA) < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Nome da Linha" deve ser informado.#NOME_LINHA');
  ELSIF (pCOD_TIPO_LINHA IS NULL) OR (pCOD_TIPO_LINHA < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Tipo de Linha" deve ser informado.#COD_TIPO_LINHA');
  ELSIF (pCOD_VD IS NULL) OR (pCOD_VD < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Cód. VD" deve ser informado.#COD_VD');
  END IF;
  
  IF pCOD_LINHA = 0 THEN --Inclusão
    SELECT NVL(MAX(COD_LINHA), 0) + 1
      INTO pCOD_LINHA
    FROM RHFP0380;
    INSERT INTO RHFP0380 (COD_LINHA, NOME_LINHA, COD_TIPO_LINHA, COD_PESSOA, COD_VD, COD_VD_INTEGRAL, CONTROLA_ESTOQUE) VALUES 
      (pCOD_LINHA, pNOME_LINHA, pCOD_TIPO_LINHA, pCOD_PESSOA, pCOD_VD, pCOD_VD_INTEGRAL, 'N');  
  ELSE
    UPDATE RHFP0380 SET NOME_LINHA = pNOME_LINHA, COD_TIPO_LINHA = pCOD_TIPO_LINHA, COD_PESSOA = pCOD_PESSOA, COD_VD = pCOD_VD, COD_VD_INTEGRAL = pCOD_VD_INTEGRAL
    WHERE COD_LINHA = pCOD_LINHA;  
  END IF;
END;

PROCEDURE RHFP0381_HI(
  pOperacao            VARCHAR2 default 'I', -- I, A ou E
  pHistorico           VARCHAR2 default 'N', -- S ou N
  pCOD_LINHA           RHFP0380.COD_LINHA%TYPE,
  pDATA_INICIO         DATE default null,
  pDATA_FIM            DATE default null,
  pVALOR_TARIFA        RHFP0381.VALOR_TARIFA%TYPE default null,
  pCOD_MOTIVO          RHFP0381.COD_MOTIVO%TYPE default null)
IS
  vDataIniAnt  DATE;
  vDataFimAnt  DATE;

  vDataFim     DATE;

BEGIN
  IF pOperacao NOT IN ('I', 'A', 'E') THEN
    RAISE_APPLICATION_ERROR(-20001, '"Operação" inválida!#OPERACAO');
  END IF;

  SELECT LT.DATA_INICIO AS DATA_INI_ANT,
         LT.DATA_FIM    AS DATA_FIM_ANT
    INTO vDataIniAnt, vDataFimAnt
  FROM (SELECT COD_LINHA, DATA_INICIO, DATA_FIM
        FROM RHFP0381 LT
        WHERE LT.COD_LINHA = pCOD_LINHA
          AND LT.DATA_INICIO  = (SELECT MAX(DATA_INICIO) FROM RHFP0381 WHERE COD_LINHA = pCOD_LINHA)  
       ) LT,
       RHFP0380 LI
  WHERE LI.COD_LINHA = pCOD_LINHA 
    AND LT.COD_LINHA (+) = LI.COD_LINHA; 
  
  -- Validações
  IF pOperacao = 'I' THEN
    IF pDATA_INICIO IS NULL THEN -- validação YSHI1001
       RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser informada.#DATA_INICIO');
    ELSIF pDATA_INICIO = vDataIniAnt THEN
      RAISE_APPLICATION_ERROR(-20001, '"Data Início" inváilda, pois já existe".#DATA_INICIO');
    ELSIF pDATA_INICIO > TO_DATE('31/12/2999', 'DD/MM/YYYY') THEN -- YSHI1001
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser menor que "31/12/2999"!#DATA_INICIO');
    ELSIF (pVALOR_TARIFA IS NULL) OR (pVALOR_TARIFA < 1) THEN
      RAISE_APPLICATION_ERROR(-20001, 'O "Valor Tarifa" deve ser informado.#VALOR_TARIFA');
    ELSIF (pCOD_MOTIVO IS NULL) OR (pCOD_MOTIVO < 1) THEN 
      RAISE_APPLICATION_ERROR(-20001, 'O "Motivo" deve ser informado.#COD_MOTIVO');
    ELSIF pDATA_INICIO < vDataIniAnt THEN
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser posterior a data anterior, que é: '||to_char(vDataIniAnt, 'DD/MM/YYYY')||'.#DATA_INICIO');
    END IF;
  ELSIF pOperacao = 'A' THEN
    IF (pCOD_MOTIVO IS NULL) OR (pCOD_MOTIVO < 1) THEN 
      RAISE_APPLICATION_ERROR(-20001, 'O "Motivo" deve ser informado.#COD_MOTIVO');
    END IF;
  ELSIF pOperacao = 'E' THEN
    IF pDATA_INICIO <> vDataIniAnt THEN
      RAISE_APPLICATION_ERROR(-20001, 'Só pode ser excluído o "ultimo" registro, que é: '||to_char(vDataIniAnt, 'DD/MM/YYYY')||'.#DATA_INICIO');
    END IF;
  END IF;
    
  IF (pOperacao IN ('I', 'E')) /*AND (pHistorico = 'N')*/ THEN
    vDataFim := TO_DATE('31/12/2999', 'DD/MM/YYYY');
  END IF; 

  -- Efetiva a operação correspondente no BD.
  IF pOperacao = 'I' THEN  
    IF vDataIniAnt IS NOT NULL THEN
      UPDATE RHFP0381 SET DATA_FIM = pDATA_INICIO - 1
      WHERE COD_LINHA = pCOD_LINHA
        AND DATA_INICIO  = vDataIniAnt;   
    END IF; 
    INSERT INTO RHFP0381 (COD_LINHA, DATA_INICIO, DATA_FIM, VALOR_TARIFA, COD_MOTIVO) 
    VALUES (pCOD_LINHA, pDATA_INICIO, vDataFim, pVALOR_TARIFA, pCOD_MOTIVO);
  ELSIF pOperacao = 'A' THEN
    UPDATE RHFP0381 SET COD_MOTIVO = pCOD_MOTIVO
    WHERE COD_LINHA = pCOD_LINHA
      AND DATA_INICIO  = pDATA_INICIO;
  ELSIF pOperacao = 'E' THEN
    DELETE RHFP0381
    WHERE COD_LINHA = pCOD_LINHA
      AND DATA_INICIO  = pDATA_INICIO;
      
    UPDATE RHFP0381 SET DATA_FIM = vDataFim
    WHERE COD_LINHA = pCOD_LINHA
      AND DATA_INICIO  = (SELECT MAX(DATA_INICIO) FROM RHFP0381 WHERE COD_LINHA = pCOD_LINHA AND DATA_INICIO < pDATA_INICIO);   
  END IF;
END; 

PROCEDURE RHFP0384_HI(
  pOperacao             VARCHAR2 default 'I', -- I, A ou E
  pHistorico            VARCHAR2 default 'N', -- S ou N
  pCOD_CONTRATO         RHFP0384.COD_CONTRATO%TYPE,
  pCOD_LINHA            RHFP0380.COD_LINHA%TYPE,
  pDATA_INICIO          DATE default null,
  pDATA_FIM             DATE default null,
  pRECEBE_DINHEIRO      RHFP0384.RECEBE_DINHEIRO%TYPE, 
  pIND_RECEBE_FERIADO   RHFP0384.IND_RECEBE_FERIADO%TYPE,
  pTIPOS_VALES_CONTRATO RHFP0384.TIPOS_VALES_CONTRATO%TYPE,
  pQTD_PASSAGENS_DIA    RHFP0384.QTD_PASSAGENS_DIA%TYPE, 
  pQTD_PASSAGENS_SEG    RHFP0384.QTD_PASSAGENS_SEG%TYPE, 
  pQTD_PASSAGENS_TER    RHFP0384.QTD_PASSAGENS_TER%TYPE, 
  pQTD_PASSAGENS_QUA    RHFP0384.QTD_PASSAGENS_QUA%TYPE, 
  pQTD_PASSAGENS_QUI    RHFP0384.QTD_PASSAGENS_QUI%TYPE, 
  pQTD_PASSAGENS_SEX    RHFP0384.QTD_PASSAGENS_SEX%TYPE, 
  pQTD_PASSAGENS_SAB    RHFP0384.QTD_PASSAGENS_SAB%TYPE, 
  pQTD_PASSAGENS_DOM    RHFP0384.QTD_PASSAGENS_DOM%TYPE, 
  pQTD_PASSAGENS_MES    RHFP0384.QTD_PASSAGENS_MES%TYPE)
IS
  vDataAdm     DATE;
  vDataResc    DATE;
  vDataIniAnt  DATE;
  vDataFimAnt  DATE;
  vDataFim     DATE;
  vLinha       NUMBER(15);

BEGIN
  IF pOperacao NOT IN ('I', 'A', 'E') THEN
    RAISE_APPLICATION_ERROR(-20001, '"Operação" inválida!#OPERACAO');
  END IF;

  SELECT CT.DATA_INICIO, CT.DATA_FIM, 
         CO.DATA_INICIO AS DATA_INI_ANT,
         CO.DATA_FIM    AS DATA_FIM_ANT
    INTO vDataAdm, vDataResc, vDataIniAnt, vDataFimAnt
  FROM (SELECT COD_CONTRATO, DATA_INICIO, DATA_FIM
        FROM RHFP0384 CO
        WHERE CO.COD_CONTRATO = pCOD_CONTRATO
          AND CO.COD_LINHA = pCOD_LINHA
          AND CO.DATA_INICIO  = (SELECT MAX(DATA_INICIO) FROM RHFP0384 WHERE COD_CONTRATO = pCOD_CONTRATO AND COD_LINHA = pCOD_LINHA)  
       ) CO,
       RHFP0300 CT
  WHERE CT.COD_CONTRATO = pCOD_CONTRATO 
    AND CO.COD_CONTRATO (+) = CT.COD_CONTRATO; 
  
  -- Validações
  IF pOperacao = 'I' THEN
    IF pDATA_INICIO IS NULL THEN
       RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser informada.#DATA_INICIO');
    ELSIF pDATA_INICIO = vDataIniAnt THEN
      RAISE_APPLICATION_ERROR(-20001, '"Data Início" inváilda, pois já existe".#DATA_INICIO');
    ELSIF pDATA_INICIO > TO_DATE('31/12/2999', 'DD/MM/YYYY') THEN -- YSHI1001
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser menor que "31/12/2999"!#DATA_INICIO');
    ELSIF (pCOD_LINHA IS NULL) OR (pCOD_LINHA < 1) THEN --início das validações Fpct0110
      RAISE_APPLICATION_ERROR(-20001, 'A "Linha" deve ser informada.#COD_LINHA');
    ELSIF vDataAdm > pDATA_INICIO THEN
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser igual ou posterior a Admissão do Contrato.#DATA_INICIO');
    ELSIF pDATA_INICIO > vDataResc THEN
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser anterior a Rescisão do Contrato.#DATA_INICIO');
    ELSIF pDATA_FIM < pDATA_INICIO THEN
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Fim" deve ser maior que a "Data Início".#DATA_FIM');
    ELSIF pDATA_INICIO < vDataFimAnt AND vDataFimAnt <> TO_DATE('31/12/2999','DD/MM/YYYY') THEN
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Início" deve ser posterior a data fim anterior, que é: '||to_char(vDataFimAnt, 'DD/MM/YYYY')||'.#DATA_INICIO');
    END IF;
    SELECT COUNT(*) INTO vLinha
    FROM RHFP0380
    WHERE COD_LINHA = pCOD_LINHA;
    IF vLinha = 0 THEN
      RAISE_APPLICATION_ERROR(-20001, 'Campo "Linha" inválido.#COD_LINHA');
    END IF;
    IF pTIPOS_VALES_CONTRATO = 'F' AND NVL(pQTD_PASSAGENS_DIA,0) <= 0 THEN
      RAISE_APPLICATION_ERROR(-20001, 'Campo "Passagens Fixas" deve ser informado.#QTD_PASSAGENS_DIA');
    END IF;
    IF pTIPOS_VALES_CONTRATO = 'N' AND NVL(pQTD_PASSAGENS_MES,0) <= 0 THEN
      RAISE_APPLICATION_ERROR(-20001, 'Campo "Número de Passagens" deve ser informado.#QTD_PASSAGENS_MES');
    END IF;
    IF pTIPOS_VALES_CONTRATO = 'D' AND NVL(pQTD_PASSAGENS_SEG,-1) < 0 THEN
      RAISE_APPLICATION_ERROR(-20001, 'Campo "Seg" deve ser informado.#QTD_PASSAGENS_SEG');
    END IF;
    IF pTIPOS_VALES_CONTRATO = 'D' AND NVL(pQTD_PASSAGENS_TER,-1) < 0 THEN
      RAISE_APPLICATION_ERROR(-20001, 'Campo "Ter" deve ser informado.#QTD_PASSAGENS_TER');
    END IF;
    IF pTIPOS_VALES_CONTRATO = 'D' AND NVL(pQTD_PASSAGENS_QUA,-1) < 0 THEN
      RAISE_APPLICATION_ERROR(-20001, 'Campo "Qua" deve ser informado.#QTD_PASSAGENS_QUA');
    END IF;
    IF pTIPOS_VALES_CONTRATO = 'D' AND NVL(pQTD_PASSAGENS_QUI,-1) < 0 THEN
      RAISE_APPLICATION_ERROR(-20001, 'Campo "Qui" deve ser informado.#QTD_PASSAGENS_QUI');
    END IF;
    IF pTIPOS_VALES_CONTRATO = 'D' AND NVL(pQTD_PASSAGENS_SEX,-1) < 0 THEN
      RAISE_APPLICATION_ERROR(-20001, 'Campo "Sex" deve ser informado.#QTD_PASSAGENS_SEX');
    END IF;
    IF pTIPOS_VALES_CONTRATO = 'D' AND NVL(pQTD_PASSAGENS_SAB,-1) < 0 THEN
      RAISE_APPLICATION_ERROR(-20001, 'Campo "Sab" deve ser informado.#QTD_PASSAGENS_SAB');
    END IF;
    IF pTIPOS_VALES_CONTRATO = 'D' AND NVL(pQTD_PASSAGENS_DOM,-1) < 0 THEN
      RAISE_APPLICATION_ERROR(-20001, 'Campo "Dom" deve ser informado.#QTD_PASSAGENS_DOM');
    END IF;
  ELSIF pOperacao = 'A' THEN    
    IF pDATA_FIM < pDATA_INICIO THEN
      RAISE_APPLICATION_ERROR(-20001, 'A "Data Fim" deve ser maior que a "Data Início".#DATA_FIM');
    END IF;
  ELSIF pOperacao = 'E' THEN
    IF pDATA_INICIO <> vDataIniAnt THEN
      RAISE_APPLICATION_ERROR(-20001, 'Só pode ser excluído o "ultimo" registro, que é: '||to_char(vDataIniAnt, 'DD/MM/YYYY')||'.#DATA_INICIO');
    END IF;
  END IF;
    
  -- Efetiva a operação correspondente no BD.
  IF pOperacao = 'I' THEN  
    IF vDataIniAnt IS NOT NULL AND vDataFimAnt = TO_DATE('31/12/2999','DD/MM/YYYY') THEN
      UPDATE RHFP0384 SET DATA_FIM = pDATA_INICIO - 1
      WHERE COD_CONTRATO = pCOD_CONTRATO
        AND COD_LINHA = pCOD_LINHA
        AND DATA_INICIO  = vDataIniAnt
        ;   
    END IF; 
    INSERT INTO RHFP0384 (COD_CONTRATO,
      COD_LINHA,
      DATA_INICIO,
      DATA_FIM,
      RECEBE_DINHEIRO,
      IND_RECEBE_FERIADO,
      TIPOS_VALES_CONTRATO,
      QTD_PASSAGENS_DIA,
      QTD_PASSAGENS_SEG,
      QTD_PASSAGENS_TER,
      QTD_PASSAGENS_QUA,
      QTD_PASSAGENS_QUI,
      QTD_PASSAGENS_SEX,
      QTD_PASSAGENS_SAB,
      QTD_PASSAGENS_DOM,
      QTD_PASSAGENS_MES
    ) 
    VALUES (
      pCOD_CONTRATO,
      pCOD_LINHA,
      pDATA_INICIO,
      pDATA_FIM,
      pRECEBE_DINHEIRO,
      pIND_RECEBE_FERIADO,
      pTIPOS_VALES_CONTRATO,
      pQTD_PASSAGENS_DIA,
      pQTD_PASSAGENS_SEG,
      pQTD_PASSAGENS_TER,
      pQTD_PASSAGENS_QUA,
      pQTD_PASSAGENS_QUI,
      pQTD_PASSAGENS_SEX,
      pQTD_PASSAGENS_SAB,
      pQTD_PASSAGENS_DOM,
      pQTD_PASSAGENS_MES
    );
  ELSIF pOperacao = 'A' THEN
    UPDATE RHFP0384 
    SET DATA_FIM = pDATA_FIM
    WHERE COD_CONTRATO = pCOD_CONTRATO
      AND COD_LINHA = pCOD_LINHA
      AND DATA_INICIO  = pDATA_INICIO;
  ELSIF pOperacao = 'E' THEN
    DELETE RHFP0384
    WHERE COD_CONTRATO = pCOD_CONTRATO
      AND COD_LINHA    = pCOD_LINHA
      AND DATA_INICIO  = pDATA_INICIO;
  END IF;
END;  

PROCEDURE DISTR_VT(
  pCOD_MESTRE    	RHFP0385.COD_MESTRE%TYPE,
  pTIPO_FILTRO    RHWF0406.TIPO_FILTRO%TYPE, 
  pFILTRO_CTS     RHWF0406.FILTRO_CTS%TYPE,
  pCOD_OPERADOR   OPERADOR.COD_OPERADOR%TYPE,
  pCONF_REDIST    CHAR DEFAULT 'N',
  pCONF_MENSAL    CHAR DEFAULT 'N'
) IS
  CURSOR cMestre IS
    SELECT ME.*,
           (select count(*) from rhfp0383 CP where CP.cod_mestre = pCOD_MESTRE) AS QTD_DIST
    FROM RHFP0385 ME
    WHERE COD_MESTRE = pCOD_MESTRE;   

BEGIN
  FOR vMestre IN cMestre LOOP -- será sempre um único mestre
    IF (pCONF_REDIST = 'N') AND (vMestre.QTD_DIST > 0) THEN
      RAISE_APPLICATION_ERROR(-20002,'Já existe Distribuição de VT para este Mestre!'||CHR(13)||CHR(10)||'Tem CERTEZA que deseja continuar?#pCONF_REDIST'); 
    ELSIF (pCONF_MENSAL = 'N') AND (vMestre.COD_EVENTO = 1) THEN
      RAISE_APPLICATION_ERROR(-20002,'Já foram gerados Valores para "Folha de Pagamento"!'||CHR(13)||CHR(10)||'Tem CERTEZA que deseja continuar?#pCONF_MENSAL'); 
    END IF;

    -- aqui será feita a Distribuição!!! Insert abaixo é só para testar... fake....
    DELETE rhfp0383 WHERE COD_MESTRE = pCOD_MESTRE;
    insert into rhfp0383 values (3028, pCOD_MESTRE, 101, 50, 100, 8, null);
    --
  END LOOP;
END;  

PROCEDURE DISTR_MANUT(
  pOperacao        VARCHAR2 default 'I', -- I ou A 
  pCOD_CONTRATO   	RHFP0383.COD_CONTRATO%TYPE,
  pCOD_MESTRE     	RHFP0383.COD_MESTRE%TYPE,
  pCOD_LINHA      	RHFP0383.COD_LINHA%TYPE,
  pQTD_PASSAGENS   RHFP0383.QTD_PASSAGENS%TYPE,
  pVALOR_PASSAGENS RHFP0383.VALOR_PASSAGENS%TYPE,
  pCOD_OPERADOR    OPERADOR.COD_OPERADOR%TYPE
) IS

BEGIN
  IF pOperacao NOT IN ('I', 'A') THEN
    RAISE_APPLICATION_ERROR(-20001, '"Operação" inválida!#OPERACAO');
  ELSIF (pCOD_CONTRATO IS NULL) OR (pCOD_CONTRATO < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Contrato" deve ser informado.#COD_CONTRATO');
  ELSIF (pCOD_MESTRE IS NULL) OR (pCOD_MESTRE < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Mestre de VT" deve ser informado.#COD_MESTRE');
  ELSIF (pCOD_LINHA IS NULL) OR (pCOD_LINHA < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A "Linha de VT" deve ser informada.#COD_LINHA');
  ELSIF (pQTD_PASSAGENS IS NULL) OR (pQTD_PASSAGENS < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'A "Quantidade de Passagens" deve ser informada.#QTD_PASSAGENS');
  ELSIF (pVALOR_PASSAGENS IS NULL) OR (pVALOR_PASSAGENS < 1) THEN
    RAISE_APPLICATION_ERROR(-20001, 'O "Valor das Passagens" deve ser informado.#VALOR_PASSAGENS');
  END IF;

  IF pOperacao = 'I' THEN
    INSERT INTO RHFP0383 (COD_CONTRATO, COD_MESTRE, COD_LINHA, QTD_PASSAGENS, VALOR_PASSAGENS, COD_ORIGEM_MOV)
      VALUES (pCOD_CONTRATO, pCOD_MESTRE, pCOD_LINHA, pQTD_PASSAGENS, pVALOR_PASSAGENS, 1);
  ELSIF pOperacao = 'A' THEN
    UPDATE RHFP0383 SET QTD_PASSAGENS   = pQTD_PASSAGENS, 
                        VALOR_PASSAGENS = pVALOR_PASSAGENS, 
                        COD_ORIGEM_MOV  = 1
    WHERE COD_CONTRATO = pCOD_CONTRATO
      AND COD_MESTRE = pCOD_MESTRE 
      AND COD_LINHA = pCOD_LINHA;
  END IF;
END;  



PROCEDURE GERA_VT_FOLHA(
  pCOD_MESTRE_EVENTO 	RHFP1003.COD_MESTRE_EVENTO%TYPE,
  pTIPO_FILTRO        RHWF0406.TIPO_FILTRO%TYPE, 
  pFILTRO_CTS         RHWF0406.FILTRO_CTS%TYPE,
  pCOD_OPERADOR       OPERADOR.COD_OPERADOR%TYPE,
  pCONF_REGERA    CHAR DEFAULT 'N'
) IS
  CURSOR cParam IS
    SELECT * FROM RHFP0394;
  
  vParam cParam%ROWTYPE;  
  vCount NUMBER;

BEGIN
  OPEN cParam;
  FETCH cParam INTO vParam;
  IF cParam%NOTFOUND THEN
    CLOSE cParam;
    RAISE_APPLICATION_ERROR(-20001, 'Não é possível realizar a Geração dos Valores para o Cálculo porque não existem Parâmetros para a Geração.#COD_MESTRE_EVENTO');
  END IF;
  CLOSE cParam;
  IF pCONF_REGERA = 'N' THEN
    SELECT COUNT(*) 
      INTO vCount 
    FROM RHFP0389
    WHERE COD_MESTRE_EVENTO = pCOD_MESTRE_EVENTO;
    IF vCount > 0 THEN   
      RAISE_APPLICATION_ERROR(-20002,'Já foram gerados Valores para "Folha de Pagamento"!'||CHR(13)||CHR(10)||'Tem CERTEZA que deseja continuar?#pCONF_REGERA'); 
    END IF;
  END IF;  

    -- aqui será feita a Distribuição!!! Insert abaixo é só para testar... fake....
    DELETE rhfp0389 WHERE COD_MESTRE_EVENTO = pCOD_MESTRE_EVENTO AND COD_CONTRATO = 3028;
    INSERT INTO RHFP0389 VALUES (pCOD_MESTRE_EVENTO, 3028, 1164, 'DI', 10, 55, NULL, NULL);
    --
  
END;  

END;
/
